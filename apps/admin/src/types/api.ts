/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/images": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.images.id"];
          created_at?: parameters["rowFilter.images.created_at"];
          updated_at?: parameters["rowFilter.images.updated_at"];
          created_by?: parameters["rowFilter.images.created_by"];
          description?: parameters["rowFilter.images.description"];
          owner_id?: parameters["rowFilter.images.owner_id"];
          updated_by?: parameters["rowFilter.images.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["images"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** images */
          images?: definitions["images"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.images.id"];
          created_at?: parameters["rowFilter.images.created_at"];
          updated_at?: parameters["rowFilter.images.updated_at"];
          created_by?: parameters["rowFilter.images.created_by"];
          description?: parameters["rowFilter.images.description"];
          owner_id?: parameters["rowFilter.images.owner_id"];
          updated_by?: parameters["rowFilter.images.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.images.id"];
          created_at?: parameters["rowFilter.images.created_at"];
          updated_at?: parameters["rowFilter.images.updated_at"];
          created_by?: parameters["rowFilter.images.created_by"];
          description?: parameters["rowFilter.images.description"];
          owner_id?: parameters["rowFilter.images.owner_id"];
          updated_by?: parameters["rowFilter.images.updated_by"];
        };
        body: {
          /** images */
          images?: definitions["images"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/types": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.types.id"];
          created_at?: parameters["rowFilter.types.created_at"];
          created_by?: parameters["rowFilter.types.created_by"];
          owner_id?: parameters["rowFilter.types.owner_id"];
          updated_at?: parameters["rowFilter.types.updated_at"];
          name?: parameters["rowFilter.types.name"];
          category?: parameters["rowFilter.types.category"];
          updated_by?: parameters["rowFilter.types.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["types"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** types */
          types?: definitions["types"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.types.id"];
          created_at?: parameters["rowFilter.types.created_at"];
          created_by?: parameters["rowFilter.types.created_by"];
          owner_id?: parameters["rowFilter.types.owner_id"];
          updated_at?: parameters["rowFilter.types.updated_at"];
          name?: parameters["rowFilter.types.name"];
          category?: parameters["rowFilter.types.category"];
          updated_by?: parameters["rowFilter.types.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.types.id"];
          created_at?: parameters["rowFilter.types.created_at"];
          created_by?: parameters["rowFilter.types.created_by"];
          owner_id?: parameters["rowFilter.types.owner_id"];
          updated_at?: parameters["rowFilter.types.updated_at"];
          name?: parameters["rowFilter.types.name"];
          category?: parameters["rowFilter.types.category"];
          updated_by?: parameters["rowFilter.types.updated_by"];
        };
        body: {
          /** types */
          types?: definitions["types"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_expense_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_expense_documents.created_at"];
          updated_at?: parameters["rowFilter.join_expense_documents.updated_at"];
          created_by?: parameters["rowFilter.join_expense_documents.created_by"];
          expense_id?: parameters["rowFilter.join_expense_documents.expense_id"];
          image_id?: parameters["rowFilter.join_expense_documents.image_id"];
          owner_id?: parameters["rowFilter.join_expense_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_expense_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_expense_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_expense_documents */
          join_expense_documents?: definitions["join_expense_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_expense_documents.created_at"];
          updated_at?: parameters["rowFilter.join_expense_documents.updated_at"];
          created_by?: parameters["rowFilter.join_expense_documents.created_by"];
          expense_id?: parameters["rowFilter.join_expense_documents.expense_id"];
          image_id?: parameters["rowFilter.join_expense_documents.image_id"];
          owner_id?: parameters["rowFilter.join_expense_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_expense_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_expense_documents.created_at"];
          updated_at?: parameters["rowFilter.join_expense_documents.updated_at"];
          created_by?: parameters["rowFilter.join_expense_documents.created_by"];
          expense_id?: parameters["rowFilter.join_expense_documents.expense_id"];
          image_id?: parameters["rowFilter.join_expense_documents.image_id"];
          owner_id?: parameters["rowFilter.join_expense_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_expense_documents.updated_by"];
        };
        body: {
          /** join_expense_documents */
          join_expense_documents?: definitions["join_expense_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/insurance_plan_additions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_plan_additions.id"];
          created_at?: parameters["rowFilter.insurance_plan_additions.created_at"];
          created_by?: parameters["rowFilter.insurance_plan_additions.created_by"];
          owner_id?: parameters["rowFilter.insurance_plan_additions.owner_id"];
          updated_at?: parameters["rowFilter.insurance_plan_additions.updated_at"];
          name?: parameters["rowFilter.insurance_plan_additions.name"];
          description?: parameters["rowFilter.insurance_plan_additions.description"];
          updated_by?: parameters["rowFilter.insurance_plan_additions.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["insurance_plan_additions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** insurance_plan_additions */
          insurance_plan_additions?: definitions["insurance_plan_additions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_plan_additions.id"];
          created_at?: parameters["rowFilter.insurance_plan_additions.created_at"];
          created_by?: parameters["rowFilter.insurance_plan_additions.created_by"];
          owner_id?: parameters["rowFilter.insurance_plan_additions.owner_id"];
          updated_at?: parameters["rowFilter.insurance_plan_additions.updated_at"];
          name?: parameters["rowFilter.insurance_plan_additions.name"];
          description?: parameters["rowFilter.insurance_plan_additions.description"];
          updated_by?: parameters["rowFilter.insurance_plan_additions.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_plan_additions.id"];
          created_at?: parameters["rowFilter.insurance_plan_additions.created_at"];
          created_by?: parameters["rowFilter.insurance_plan_additions.created_by"];
          owner_id?: parameters["rowFilter.insurance_plan_additions.owner_id"];
          updated_at?: parameters["rowFilter.insurance_plan_additions.updated_at"];
          name?: parameters["rowFilter.insurance_plan_additions.name"];
          description?: parameters["rowFilter.insurance_plan_additions.description"];
          updated_by?: parameters["rowFilter.insurance_plan_additions.updated_by"];
        };
        body: {
          /** insurance_plan_additions */
          insurance_plan_additions?: definitions["insurance_plan_additions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_certification_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_certification_documents.created_at"];
          updated_at?: parameters["rowFilter.join_certification_documents.updated_at"];
          created_by?: parameters["rowFilter.join_certification_documents.created_by"];
          certification_id?: parameters["rowFilter.join_certification_documents.certification_id"];
          image_id?: parameters["rowFilter.join_certification_documents.image_id"];
          owner_id?: parameters["rowFilter.join_certification_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_certification_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_certification_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_certification_documents */
          join_certification_documents?: definitions["join_certification_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_certification_documents.created_at"];
          updated_at?: parameters["rowFilter.join_certification_documents.updated_at"];
          created_by?: parameters["rowFilter.join_certification_documents.created_by"];
          certification_id?: parameters["rowFilter.join_certification_documents.certification_id"];
          image_id?: parameters["rowFilter.join_certification_documents.image_id"];
          owner_id?: parameters["rowFilter.join_certification_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_certification_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_certification_documents.created_at"];
          updated_at?: parameters["rowFilter.join_certification_documents.updated_at"];
          created_by?: parameters["rowFilter.join_certification_documents.created_by"];
          certification_id?: parameters["rowFilter.join_certification_documents.certification_id"];
          image_id?: parameters["rowFilter.join_certification_documents.image_id"];
          owner_id?: parameters["rowFilter.join_certification_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_certification_documents.updated_by"];
        };
        body: {
          /** join_certification_documents */
          join_certification_documents?: definitions["join_certification_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_insurance_additions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_additions.id"];
          created_at?: parameters["rowFilter.request_insurance_additions.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_additions.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_additions.created_by"];
          notes?: parameters["rowFilter.request_insurance_additions.notes"];
          owner_id?: parameters["rowFilter.request_insurance_additions.owner_id"];
          title?: parameters["rowFilter.request_insurance_additions.title"];
          type?: parameters["rowFilter.request_insurance_additions.type"];
          updated_by?: parameters["rowFilter.request_insurance_additions.updated_by"];
          status?: parameters["rowFilter.request_insurance_additions.status"];
          insurance_plan_addition_id?: parameters["rowFilter.request_insurance_additions.insurance_plan_addition_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_insurance_additions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_insurance_additions */
          request_insurance_additions?: definitions["request_insurance_additions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_additions.id"];
          created_at?: parameters["rowFilter.request_insurance_additions.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_additions.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_additions.created_by"];
          notes?: parameters["rowFilter.request_insurance_additions.notes"];
          owner_id?: parameters["rowFilter.request_insurance_additions.owner_id"];
          title?: parameters["rowFilter.request_insurance_additions.title"];
          type?: parameters["rowFilter.request_insurance_additions.type"];
          updated_by?: parameters["rowFilter.request_insurance_additions.updated_by"];
          status?: parameters["rowFilter.request_insurance_additions.status"];
          insurance_plan_addition_id?: parameters["rowFilter.request_insurance_additions.insurance_plan_addition_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_additions.id"];
          created_at?: parameters["rowFilter.request_insurance_additions.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_additions.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_additions.created_by"];
          notes?: parameters["rowFilter.request_insurance_additions.notes"];
          owner_id?: parameters["rowFilter.request_insurance_additions.owner_id"];
          title?: parameters["rowFilter.request_insurance_additions.title"];
          type?: parameters["rowFilter.request_insurance_additions.type"];
          updated_by?: parameters["rowFilter.request_insurance_additions.updated_by"];
          status?: parameters["rowFilter.request_insurance_additions.status"];
          insurance_plan_addition_id?: parameters["rowFilter.request_insurance_additions.insurance_plan_addition_id"];
        };
        body: {
          /** request_insurance_additions */
          request_insurance_additions?: definitions["request_insurance_additions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_commissions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_commissions.id"];
          created_at?: parameters["rowFilter.request_commissions.created_at"];
          updated_at?: parameters["rowFilter.request_commissions.updated_at"];
          created_by?: parameters["rowFilter.request_commissions.created_by"];
          notes?: parameters["rowFilter.request_commissions.notes"];
          owner_id?: parameters["rowFilter.request_commissions.owner_id"];
          title?: parameters["rowFilter.request_commissions.title"];
          type?: parameters["rowFilter.request_commissions.type"];
          updated_by?: parameters["rowFilter.request_commissions.updated_by"];
          status?: parameters["rowFilter.request_commissions.status"];
          suggested_amount?: parameters["rowFilter.request_commissions.suggested_amount"];
          reason?: parameters["rowFilter.request_commissions.reason"];
          commission_type_id?: parameters["rowFilter.request_commissions.commission_type_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_commissions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_commissions */
          request_commissions?: definitions["request_commissions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_commissions.id"];
          created_at?: parameters["rowFilter.request_commissions.created_at"];
          updated_at?: parameters["rowFilter.request_commissions.updated_at"];
          created_by?: parameters["rowFilter.request_commissions.created_by"];
          notes?: parameters["rowFilter.request_commissions.notes"];
          owner_id?: parameters["rowFilter.request_commissions.owner_id"];
          title?: parameters["rowFilter.request_commissions.title"];
          type?: parameters["rowFilter.request_commissions.type"];
          updated_by?: parameters["rowFilter.request_commissions.updated_by"];
          status?: parameters["rowFilter.request_commissions.status"];
          suggested_amount?: parameters["rowFilter.request_commissions.suggested_amount"];
          reason?: parameters["rowFilter.request_commissions.reason"];
          commission_type_id?: parameters["rowFilter.request_commissions.commission_type_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_commissions.id"];
          created_at?: parameters["rowFilter.request_commissions.created_at"];
          updated_at?: parameters["rowFilter.request_commissions.updated_at"];
          created_by?: parameters["rowFilter.request_commissions.created_by"];
          notes?: parameters["rowFilter.request_commissions.notes"];
          owner_id?: parameters["rowFilter.request_commissions.owner_id"];
          title?: parameters["rowFilter.request_commissions.title"];
          type?: parameters["rowFilter.request_commissions.type"];
          updated_by?: parameters["rowFilter.request_commissions.updated_by"];
          status?: parameters["rowFilter.request_commissions.status"];
          suggested_amount?: parameters["rowFilter.request_commissions.suggested_amount"];
          reason?: parameters["rowFilter.request_commissions.reason"];
          commission_type_id?: parameters["rowFilter.request_commissions.commission_type_id"];
        };
        body: {
          /** request_commissions */
          request_commissions?: definitions["request_commissions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_hirings": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_hirings.id"];
          created_at?: parameters["rowFilter.request_hirings.created_at"];
          updated_at?: parameters["rowFilter.request_hirings.updated_at"];
          created_by?: parameters["rowFilter.request_hirings.created_by"];
          notes?: parameters["rowFilter.request_hirings.notes"];
          owner_id?: parameters["rowFilter.request_hirings.owner_id"];
          title?: parameters["rowFilter.request_hirings.title"];
          type?: parameters["rowFilter.request_hirings.type"];
          updated_by?: parameters["rowFilter.request_hirings.updated_by"];
          status?: parameters["rowFilter.request_hirings.status"];
          candidate_name?: parameters["rowFilter.request_hirings.candidate_name"];
          job_title_id?: parameters["rowFilter.request_hirings.job_title_id"];
          document_id?: parameters["rowFilter.request_hirings.document_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_hirings"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_hirings */
          request_hirings?: definitions["request_hirings"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_hirings.id"];
          created_at?: parameters["rowFilter.request_hirings.created_at"];
          updated_at?: parameters["rowFilter.request_hirings.updated_at"];
          created_by?: parameters["rowFilter.request_hirings.created_by"];
          notes?: parameters["rowFilter.request_hirings.notes"];
          owner_id?: parameters["rowFilter.request_hirings.owner_id"];
          title?: parameters["rowFilter.request_hirings.title"];
          type?: parameters["rowFilter.request_hirings.type"];
          updated_by?: parameters["rowFilter.request_hirings.updated_by"];
          status?: parameters["rowFilter.request_hirings.status"];
          candidate_name?: parameters["rowFilter.request_hirings.candidate_name"];
          job_title_id?: parameters["rowFilter.request_hirings.job_title_id"];
          document_id?: parameters["rowFilter.request_hirings.document_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_hirings.id"];
          created_at?: parameters["rowFilter.request_hirings.created_at"];
          updated_at?: parameters["rowFilter.request_hirings.updated_at"];
          created_by?: parameters["rowFilter.request_hirings.created_by"];
          notes?: parameters["rowFilter.request_hirings.notes"];
          owner_id?: parameters["rowFilter.request_hirings.owner_id"];
          title?: parameters["rowFilter.request_hirings.title"];
          type?: parameters["rowFilter.request_hirings.type"];
          updated_by?: parameters["rowFilter.request_hirings.updated_by"];
          status?: parameters["rowFilter.request_hirings.status"];
          candidate_name?: parameters["rowFilter.request_hirings.candidate_name"];
          job_title_id?: parameters["rowFilter.request_hirings.job_title_id"];
          document_id?: parameters["rowFilter.request_hirings.document_id"];
        };
        body: {
          /** request_hirings */
          request_hirings?: definitions["request_hirings"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/medications": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.medications.id"];
          created_at?: parameters["rowFilter.medications.created_at"];
          created_by?: parameters["rowFilter.medications.created_by"];
          owner_id?: parameters["rowFilter.medications.owner_id"];
          updated_at?: parameters["rowFilter.medications.updated_at"];
          name?: parameters["rowFilter.medications.name"];
          recurrent?: parameters["rowFilter.medications.recurrent"];
          weeks?: parameters["rowFilter.medications.weeks"];
          dose?: parameters["rowFilter.medications.dose"];
          updated_by?: parameters["rowFilter.medications.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["medications"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** medications */
          medications?: definitions["medications"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.medications.id"];
          created_at?: parameters["rowFilter.medications.created_at"];
          created_by?: parameters["rowFilter.medications.created_by"];
          owner_id?: parameters["rowFilter.medications.owner_id"];
          updated_at?: parameters["rowFilter.medications.updated_at"];
          name?: parameters["rowFilter.medications.name"];
          recurrent?: parameters["rowFilter.medications.recurrent"];
          weeks?: parameters["rowFilter.medications.weeks"];
          dose?: parameters["rowFilter.medications.dose"];
          updated_by?: parameters["rowFilter.medications.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.medications.id"];
          created_at?: parameters["rowFilter.medications.created_at"];
          created_by?: parameters["rowFilter.medications.created_by"];
          owner_id?: parameters["rowFilter.medications.owner_id"];
          updated_at?: parameters["rowFilter.medications.updated_at"];
          name?: parameters["rowFilter.medications.name"];
          recurrent?: parameters["rowFilter.medications.recurrent"];
          weeks?: parameters["rowFilter.medications.weeks"];
          dose?: parameters["rowFilter.medications.dose"];
          updated_by?: parameters["rowFilter.medications.updated_by"];
        };
        body: {
          /** medications */
          medications?: definitions["medications"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_health_condition_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_health_condition_documents.created_at"];
          updated_at?: parameters["rowFilter.join_health_condition_documents.updated_at"];
          created_by?: parameters["rowFilter.join_health_condition_documents.created_by"];
          condition_id?: parameters["rowFilter.join_health_condition_documents.condition_id"];
          image_id?: parameters["rowFilter.join_health_condition_documents.image_id"];
          owner_id?: parameters["rowFilter.join_health_condition_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_health_condition_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_health_condition_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_health_condition_documents */
          join_health_condition_documents?: definitions["join_health_condition_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_health_condition_documents.created_at"];
          updated_at?: parameters["rowFilter.join_health_condition_documents.updated_at"];
          created_by?: parameters["rowFilter.join_health_condition_documents.created_by"];
          condition_id?: parameters["rowFilter.join_health_condition_documents.condition_id"];
          image_id?: parameters["rowFilter.join_health_condition_documents.image_id"];
          owner_id?: parameters["rowFilter.join_health_condition_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_health_condition_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_health_condition_documents.created_at"];
          updated_at?: parameters["rowFilter.join_health_condition_documents.updated_at"];
          created_by?: parameters["rowFilter.join_health_condition_documents.created_by"];
          condition_id?: parameters["rowFilter.join_health_condition_documents.condition_id"];
          image_id?: parameters["rowFilter.join_health_condition_documents.image_id"];
          owner_id?: parameters["rowFilter.join_health_condition_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_health_condition_documents.updated_by"];
        };
        body: {
          /** join_health_condition_documents */
          join_health_condition_documents?: definitions["join_health_condition_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/groups": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.groups.id"];
          name?: parameters["rowFilter.groups.name"];
          created_at?: parameters["rowFilter.groups.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["groups"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** groups */
          groups?: definitions["groups"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.groups.id"];
          name?: parameters["rowFilter.groups.name"];
          created_at?: parameters["rowFilter.groups.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.groups.id"];
          name?: parameters["rowFilter.groups.name"];
          created_at?: parameters["rowFilter.groups.created_at"];
        };
        body: {
          /** groups */
          groups?: definitions["groups"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/new_database_structure": {
    get: {
      parameters: {
        query: {
          table_name?: parameters["rowFilter.new_database_structure.table_name"];
          columns?: parameters["rowFilter.new_database_structure.columns"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["new_database_structure"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/trainings": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.trainings.id"];
          created_at?: parameters["rowFilter.trainings.created_at"];
          created_by?: parameters["rowFilter.trainings.created_by"];
          owner_id?: parameters["rowFilter.trainings.owner_id"];
          updated_at?: parameters["rowFilter.trainings.updated_at"];
          name?: parameters["rowFilter.trainings.name"];
          description?: parameters["rowFilter.trainings.description"];
          from?: parameters["rowFilter.trainings.from"];
          to?: parameters["rowFilter.trainings.to"];
          training_type_id?: parameters["rowFilter.trainings.training_type_id"];
          training_type_type_id?: parameters["rowFilter.trainings.training_type_type_id"];
          updated_by?: parameters["rowFilter.trainings.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["trainings"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** trainings */
          trainings?: definitions["trainings"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.trainings.id"];
          created_at?: parameters["rowFilter.trainings.created_at"];
          created_by?: parameters["rowFilter.trainings.created_by"];
          owner_id?: parameters["rowFilter.trainings.owner_id"];
          updated_at?: parameters["rowFilter.trainings.updated_at"];
          name?: parameters["rowFilter.trainings.name"];
          description?: parameters["rowFilter.trainings.description"];
          from?: parameters["rowFilter.trainings.from"];
          to?: parameters["rowFilter.trainings.to"];
          training_type_id?: parameters["rowFilter.trainings.training_type_id"];
          training_type_type_id?: parameters["rowFilter.trainings.training_type_type_id"];
          updated_by?: parameters["rowFilter.trainings.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.trainings.id"];
          created_at?: parameters["rowFilter.trainings.created_at"];
          created_by?: parameters["rowFilter.trainings.created_by"];
          owner_id?: parameters["rowFilter.trainings.owner_id"];
          updated_at?: parameters["rowFilter.trainings.updated_at"];
          name?: parameters["rowFilter.trainings.name"];
          description?: parameters["rowFilter.trainings.description"];
          from?: parameters["rowFilter.trainings.from"];
          to?: parameters["rowFilter.trainings.to"];
          training_type_id?: parameters["rowFilter.trainings.training_type_id"];
          training_type_type_id?: parameters["rowFilter.trainings.training_type_type_id"];
          updated_by?: parameters["rowFilter.trainings.updated_by"];
        };
        body: {
          /** trainings */
          trainings?: definitions["trainings"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/proposals": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposals.id"];
          created_at?: parameters["rowFilter.proposals.created_at"];
          updated_at?: parameters["rowFilter.proposals.updated_at"];
          created_by?: parameters["rowFilter.proposals.created_by"];
          notes?: parameters["rowFilter.proposals.notes"];
          owner_id?: parameters["rowFilter.proposals.owner_id"];
          title?: parameters["rowFilter.proposals.title"];
          type?: parameters["rowFilter.proposals.type"];
          updated_by?: parameters["rowFilter.proposals.updated_by"];
          description?: parameters["rowFilter.proposals.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["proposals"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** proposals */
          proposals?: definitions["proposals"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposals.id"];
          created_at?: parameters["rowFilter.proposals.created_at"];
          updated_at?: parameters["rowFilter.proposals.updated_at"];
          created_by?: parameters["rowFilter.proposals.created_by"];
          notes?: parameters["rowFilter.proposals.notes"];
          owner_id?: parameters["rowFilter.proposals.owner_id"];
          title?: parameters["rowFilter.proposals.title"];
          type?: parameters["rowFilter.proposals.type"];
          updated_by?: parameters["rowFilter.proposals.updated_by"];
          description?: parameters["rowFilter.proposals.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposals.id"];
          created_at?: parameters["rowFilter.proposals.created_at"];
          updated_at?: parameters["rowFilter.proposals.updated_at"];
          created_by?: parameters["rowFilter.proposals.created_by"];
          notes?: parameters["rowFilter.proposals.notes"];
          owner_id?: parameters["rowFilter.proposals.owner_id"];
          title?: parameters["rowFilter.proposals.title"];
          type?: parameters["rowFilter.proposals.type"];
          updated_by?: parameters["rowFilter.proposals.updated_by"];
          description?: parameters["rowFilter.proposals.description"];
        };
        body: {
          /** proposals */
          proposals?: definitions["proposals"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_promotions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_promotions.id"];
          created_at?: parameters["rowFilter.request_promotions.created_at"];
          updated_at?: parameters["rowFilter.request_promotions.updated_at"];
          created_by?: parameters["rowFilter.request_promotions.created_by"];
          notes?: parameters["rowFilter.request_promotions.notes"];
          owner_id?: parameters["rowFilter.request_promotions.owner_id"];
          title?: parameters["rowFilter.request_promotions.title"];
          type?: parameters["rowFilter.request_promotions.type"];
          updated_by?: parameters["rowFilter.request_promotions.updated_by"];
          status?: parameters["rowFilter.request_promotions.status"];
          new_job_title_id?: parameters["rowFilter.request_promotions.new_job_title_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_promotions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_promotions */
          request_promotions?: definitions["request_promotions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_promotions.id"];
          created_at?: parameters["rowFilter.request_promotions.created_at"];
          updated_at?: parameters["rowFilter.request_promotions.updated_at"];
          created_by?: parameters["rowFilter.request_promotions.created_by"];
          notes?: parameters["rowFilter.request_promotions.notes"];
          owner_id?: parameters["rowFilter.request_promotions.owner_id"];
          title?: parameters["rowFilter.request_promotions.title"];
          type?: parameters["rowFilter.request_promotions.type"];
          updated_by?: parameters["rowFilter.request_promotions.updated_by"];
          status?: parameters["rowFilter.request_promotions.status"];
          new_job_title_id?: parameters["rowFilter.request_promotions.new_job_title_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_promotions.id"];
          created_at?: parameters["rowFilter.request_promotions.created_at"];
          updated_at?: parameters["rowFilter.request_promotions.updated_at"];
          created_by?: parameters["rowFilter.request_promotions.created_by"];
          notes?: parameters["rowFilter.request_promotions.notes"];
          owner_id?: parameters["rowFilter.request_promotions.owner_id"];
          title?: parameters["rowFilter.request_promotions.title"];
          type?: parameters["rowFilter.request_promotions.type"];
          updated_by?: parameters["rowFilter.request_promotions.updated_by"];
          status?: parameters["rowFilter.request_promotions.status"];
          new_job_title_id?: parameters["rowFilter.request_promotions.new_job_title_id"];
        };
        body: {
          /** request_promotions */
          request_promotions?: definitions["request_promotions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/commissions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.commissions.id"];
          created_at?: parameters["rowFilter.commissions.created_at"];
          created_by?: parameters["rowFilter.commissions.created_by"];
          owner_id?: parameters["rowFilter.commissions.owner_id"];
          updated_at?: parameters["rowFilter.commissions.updated_at"];
          amount?: parameters["rowFilter.commissions.amount"];
          reason?: parameters["rowFilter.commissions.reason"];
          employee_id?: parameters["rowFilter.commissions.employee_id"];
          note?: parameters["rowFilter.commissions.note"];
          commission_request_id?: parameters["rowFilter.commissions.commission_request_id"];
          commission_type_id?: parameters["rowFilter.commissions.commission_type_id"];
          updated_by?: parameters["rowFilter.commissions.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["commissions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** commissions */
          commissions?: definitions["commissions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.commissions.id"];
          created_at?: parameters["rowFilter.commissions.created_at"];
          created_by?: parameters["rowFilter.commissions.created_by"];
          owner_id?: parameters["rowFilter.commissions.owner_id"];
          updated_at?: parameters["rowFilter.commissions.updated_at"];
          amount?: parameters["rowFilter.commissions.amount"];
          reason?: parameters["rowFilter.commissions.reason"];
          employee_id?: parameters["rowFilter.commissions.employee_id"];
          note?: parameters["rowFilter.commissions.note"];
          commission_request_id?: parameters["rowFilter.commissions.commission_request_id"];
          commission_type_id?: parameters["rowFilter.commissions.commission_type_id"];
          updated_by?: parameters["rowFilter.commissions.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.commissions.id"];
          created_at?: parameters["rowFilter.commissions.created_at"];
          created_by?: parameters["rowFilter.commissions.created_by"];
          owner_id?: parameters["rowFilter.commissions.owner_id"];
          updated_at?: parameters["rowFilter.commissions.updated_at"];
          amount?: parameters["rowFilter.commissions.amount"];
          reason?: parameters["rowFilter.commissions.reason"];
          employee_id?: parameters["rowFilter.commissions.employee_id"];
          note?: parameters["rowFilter.commissions.note"];
          commission_request_id?: parameters["rowFilter.commissions.commission_request_id"];
          commission_type_id?: parameters["rowFilter.commissions.commission_type_id"];
          updated_by?: parameters["rowFilter.commissions.updated_by"];
        };
        body: {
          /** commissions */
          commissions?: definitions["commissions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_tags.id"];
          created_at?: parameters["rowFilter.product_tags.created_at"];
          created_by?: parameters["rowFilter.product_tags.created_by"];
          owner_id?: parameters["rowFilter.product_tags.owner_id"];
          updated_at?: parameters["rowFilter.product_tags.updated_at"];
          name?: parameters["rowFilter.product_tags.name"];
          updated_by?: parameters["rowFilter.product_tags.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_tags */
          product_tags?: definitions["product_tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_tags.id"];
          created_at?: parameters["rowFilter.product_tags.created_at"];
          created_by?: parameters["rowFilter.product_tags.created_by"];
          owner_id?: parameters["rowFilter.product_tags.owner_id"];
          updated_at?: parameters["rowFilter.product_tags.updated_at"];
          name?: parameters["rowFilter.product_tags.name"];
          updated_by?: parameters["rowFilter.product_tags.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_tags.id"];
          created_at?: parameters["rowFilter.product_tags.created_at"];
          created_by?: parameters["rowFilter.product_tags.created_by"];
          owner_id?: parameters["rowFilter.product_tags.owner_id"];
          updated_at?: parameters["rowFilter.product_tags.updated_at"];
          name?: parameters["rowFilter.product_tags.name"];
          updated_by?: parameters["rowFilter.product_tags.updated_by"];
        };
        body: {
          /** product_tags */
          product_tags?: definitions["product_tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_marriage_kids": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_marriage_kids.created_at"];
          updated_at?: parameters["rowFilter.join_marriage_kids.updated_at"];
          created_by?: parameters["rowFilter.join_marriage_kids.created_by"];
          marriage_id?: parameters["rowFilter.join_marriage_kids.marriage_id"];
          kid_id?: parameters["rowFilter.join_marriage_kids.kid_id"];
          owner_id?: parameters["rowFilter.join_marriage_kids.owner_id"];
          updated_by?: parameters["rowFilter.join_marriage_kids.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_marriage_kids"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_marriage_kids */
          join_marriage_kids?: definitions["join_marriage_kids"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_marriage_kids.created_at"];
          updated_at?: parameters["rowFilter.join_marriage_kids.updated_at"];
          created_by?: parameters["rowFilter.join_marriage_kids.created_by"];
          marriage_id?: parameters["rowFilter.join_marriage_kids.marriage_id"];
          kid_id?: parameters["rowFilter.join_marriage_kids.kid_id"];
          owner_id?: parameters["rowFilter.join_marriage_kids.owner_id"];
          updated_by?: parameters["rowFilter.join_marriage_kids.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_marriage_kids.created_at"];
          updated_at?: parameters["rowFilter.join_marriage_kids.updated_at"];
          created_by?: parameters["rowFilter.join_marriage_kids.created_by"];
          marriage_id?: parameters["rowFilter.join_marriage_kids.marriage_id"];
          kid_id?: parameters["rowFilter.join_marriage_kids.kid_id"];
          owner_id?: parameters["rowFilter.join_marriage_kids.owner_id"];
          updated_by?: parameters["rowFilter.join_marriage_kids.updated_by"];
        };
        body: {
          /** join_marriage_kids */
          join_marriage_kids?: definitions["join_marriage_kids"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_permissions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_permissions.id"];
          created_at?: parameters["rowFilter.request_permissions.created_at"];
          updated_at?: parameters["rowFilter.request_permissions.updated_at"];
          created_by?: parameters["rowFilter.request_permissions.created_by"];
          notes?: parameters["rowFilter.request_permissions.notes"];
          owner_id?: parameters["rowFilter.request_permissions.owner_id"];
          title?: parameters["rowFilter.request_permissions.title"];
          type?: parameters["rowFilter.request_permissions.type"];
          updated_by?: parameters["rowFilter.request_permissions.updated_by"];
          status?: parameters["rowFilter.request_permissions.status"];
          date_of_permission?: parameters["rowFilter.request_permissions.date_of_permission"];
          permission_type_id?: parameters["rowFilter.request_permissions.permission_type_id"];
          from?: parameters["rowFilter.request_permissions.from"];
          to?: parameters["rowFilter.request_permissions.to"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_permissions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_permissions */
          request_permissions?: definitions["request_permissions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_permissions.id"];
          created_at?: parameters["rowFilter.request_permissions.created_at"];
          updated_at?: parameters["rowFilter.request_permissions.updated_at"];
          created_by?: parameters["rowFilter.request_permissions.created_by"];
          notes?: parameters["rowFilter.request_permissions.notes"];
          owner_id?: parameters["rowFilter.request_permissions.owner_id"];
          title?: parameters["rowFilter.request_permissions.title"];
          type?: parameters["rowFilter.request_permissions.type"];
          updated_by?: parameters["rowFilter.request_permissions.updated_by"];
          status?: parameters["rowFilter.request_permissions.status"];
          date_of_permission?: parameters["rowFilter.request_permissions.date_of_permission"];
          permission_type_id?: parameters["rowFilter.request_permissions.permission_type_id"];
          from?: parameters["rowFilter.request_permissions.from"];
          to?: parameters["rowFilter.request_permissions.to"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_permissions.id"];
          created_at?: parameters["rowFilter.request_permissions.created_at"];
          updated_at?: parameters["rowFilter.request_permissions.updated_at"];
          created_by?: parameters["rowFilter.request_permissions.created_by"];
          notes?: parameters["rowFilter.request_permissions.notes"];
          owner_id?: parameters["rowFilter.request_permissions.owner_id"];
          title?: parameters["rowFilter.request_permissions.title"];
          type?: parameters["rowFilter.request_permissions.type"];
          updated_by?: parameters["rowFilter.request_permissions.updated_by"];
          status?: parameters["rowFilter.request_permissions.status"];
          date_of_permission?: parameters["rowFilter.request_permissions.date_of_permission"];
          permission_type_id?: parameters["rowFilter.request_permissions.permission_type_id"];
          from?: parameters["rowFilter.request_permissions.from"];
          to?: parameters["rowFilter.request_permissions.to"];
        };
        body: {
          /** request_permissions */
          request_permissions?: definitions["request_permissions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/brokers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.brokers.id"];
          created_at?: parameters["rowFilter.brokers.created_at"];
          updated_at?: parameters["rowFilter.brokers.updated_at"];
          employee_name?: parameters["rowFilter.brokers.employee_name"];
          phone?: parameters["rowFilter.brokers.phone"];
          email?: parameters["rowFilter.brokers.email"];
          website?: parameters["rowFilter.brokers.website"];
          updated_by?: parameters["rowFilter.brokers.updated_by"];
          owner_id?: parameters["rowFilter.brokers.owner_id"];
          country_id?: parameters["rowFilter.brokers.country_id"];
          city_id?: parameters["rowFilter.brokers.city_id"];
          street?: parameters["rowFilter.brokers.street"];
          building?: parameters["rowFilter.brokers.building"];
          landmark?: parameters["rowFilter.brokers.landmark"];
          gps?: parameters["rowFilter.brokers.gps"];
          created_by?: parameters["rowFilter.brokers.created_by"];
          name?: parameters["rowFilter.brokers.name"];
          terms_and_conditions?: parameters["rowFilter.brokers.terms_and_conditions"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["brokers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** brokers */
          brokers?: definitions["brokers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.brokers.id"];
          created_at?: parameters["rowFilter.brokers.created_at"];
          updated_at?: parameters["rowFilter.brokers.updated_at"];
          employee_name?: parameters["rowFilter.brokers.employee_name"];
          phone?: parameters["rowFilter.brokers.phone"];
          email?: parameters["rowFilter.brokers.email"];
          website?: parameters["rowFilter.brokers.website"];
          updated_by?: parameters["rowFilter.brokers.updated_by"];
          owner_id?: parameters["rowFilter.brokers.owner_id"];
          country_id?: parameters["rowFilter.brokers.country_id"];
          city_id?: parameters["rowFilter.brokers.city_id"];
          street?: parameters["rowFilter.brokers.street"];
          building?: parameters["rowFilter.brokers.building"];
          landmark?: parameters["rowFilter.brokers.landmark"];
          gps?: parameters["rowFilter.brokers.gps"];
          created_by?: parameters["rowFilter.brokers.created_by"];
          name?: parameters["rowFilter.brokers.name"];
          terms_and_conditions?: parameters["rowFilter.brokers.terms_and_conditions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.brokers.id"];
          created_at?: parameters["rowFilter.brokers.created_at"];
          updated_at?: parameters["rowFilter.brokers.updated_at"];
          employee_name?: parameters["rowFilter.brokers.employee_name"];
          phone?: parameters["rowFilter.brokers.phone"];
          email?: parameters["rowFilter.brokers.email"];
          website?: parameters["rowFilter.brokers.website"];
          updated_by?: parameters["rowFilter.brokers.updated_by"];
          owner_id?: parameters["rowFilter.brokers.owner_id"];
          country_id?: parameters["rowFilter.brokers.country_id"];
          city_id?: parameters["rowFilter.brokers.city_id"];
          street?: parameters["rowFilter.brokers.street"];
          building?: parameters["rowFilter.brokers.building"];
          landmark?: parameters["rowFilter.brokers.landmark"];
          gps?: parameters["rowFilter.brokers.gps"];
          created_by?: parameters["rowFilter.brokers.created_by"];
          name?: parameters["rowFilter.brokers.name"];
          terms_and_conditions?: parameters["rowFilter.brokers.terms_and_conditions"];
        };
        body: {
          /** brokers */
          brokers?: definitions["brokers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/certifications": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.certifications.id"];
          created_at?: parameters["rowFilter.certifications.created_at"];
          updated_at?: parameters["rowFilter.certifications.updated_at"];
          created_by?: parameters["rowFilter.certifications.created_by"];
          name?: parameters["rowFilter.certifications.name"];
          specialization?: parameters["rowFilter.certifications.specialization"];
          level?: parameters["rowFilter.certifications.level"];
          date_of_issue?: parameters["rowFilter.certifications.date_of_issue"];
          date_of_expiry?: parameters["rowFilter.certifications.date_of_expiry"];
          employee_id?: parameters["rowFilter.certifications.employee_id"];
          owner_id?: parameters["rowFilter.certifications.owner_id"];
          issuing_organization?: parameters["rowFilter.certifications.issuing_organization"];
          credential_url?: parameters["rowFilter.certifications.credential_url"];
          credential_number?: parameters["rowFilter.certifications.credential_number"];
          updated_by?: parameters["rowFilter.certifications.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["certifications"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** certifications */
          certifications?: definitions["certifications"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.certifications.id"];
          created_at?: parameters["rowFilter.certifications.created_at"];
          updated_at?: parameters["rowFilter.certifications.updated_at"];
          created_by?: parameters["rowFilter.certifications.created_by"];
          name?: parameters["rowFilter.certifications.name"];
          specialization?: parameters["rowFilter.certifications.specialization"];
          level?: parameters["rowFilter.certifications.level"];
          date_of_issue?: parameters["rowFilter.certifications.date_of_issue"];
          date_of_expiry?: parameters["rowFilter.certifications.date_of_expiry"];
          employee_id?: parameters["rowFilter.certifications.employee_id"];
          owner_id?: parameters["rowFilter.certifications.owner_id"];
          issuing_organization?: parameters["rowFilter.certifications.issuing_organization"];
          credential_url?: parameters["rowFilter.certifications.credential_url"];
          credential_number?: parameters["rowFilter.certifications.credential_number"];
          updated_by?: parameters["rowFilter.certifications.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.certifications.id"];
          created_at?: parameters["rowFilter.certifications.created_at"];
          updated_at?: parameters["rowFilter.certifications.updated_at"];
          created_by?: parameters["rowFilter.certifications.created_by"];
          name?: parameters["rowFilter.certifications.name"];
          specialization?: parameters["rowFilter.certifications.specialization"];
          level?: parameters["rowFilter.certifications.level"];
          date_of_issue?: parameters["rowFilter.certifications.date_of_issue"];
          date_of_expiry?: parameters["rowFilter.certifications.date_of_expiry"];
          employee_id?: parameters["rowFilter.certifications.employee_id"];
          owner_id?: parameters["rowFilter.certifications.owner_id"];
          issuing_organization?: parameters["rowFilter.certifications.issuing_organization"];
          credential_url?: parameters["rowFilter.certifications.credential_url"];
          credential_number?: parameters["rowFilter.certifications.credential_number"];
          updated_by?: parameters["rowFilter.certifications.updated_by"];
        };
        body: {
          /** certifications */
          certifications?: definitions["certifications"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_types": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_types.id"];
          created_at?: parameters["rowFilter.product_types.created_at"];
          created_by?: parameters["rowFilter.product_types.created_by"];
          owner_id?: parameters["rowFilter.product_types.owner_id"];
          updated_at?: parameters["rowFilter.product_types.updated_at"];
          description?: parameters["rowFilter.product_types.description"];
          name?: parameters["rowFilter.product_types.name"];
          updated_by?: parameters["rowFilter.product_types.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_types"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_types */
          product_types?: definitions["product_types"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_types.id"];
          created_at?: parameters["rowFilter.product_types.created_at"];
          created_by?: parameters["rowFilter.product_types.created_by"];
          owner_id?: parameters["rowFilter.product_types.owner_id"];
          updated_at?: parameters["rowFilter.product_types.updated_at"];
          description?: parameters["rowFilter.product_types.description"];
          name?: parameters["rowFilter.product_types.name"];
          updated_by?: parameters["rowFilter.product_types.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_types.id"];
          created_at?: parameters["rowFilter.product_types.created_at"];
          created_by?: parameters["rowFilter.product_types.created_by"];
          owner_id?: parameters["rowFilter.product_types.owner_id"];
          updated_at?: parameters["rowFilter.product_types.updated_at"];
          description?: parameters["rowFilter.product_types.description"];
          name?: parameters["rowFilter.product_types.name"];
          updated_by?: parameters["rowFilter.product_types.updated_by"];
        };
        body: {
          /** product_types */
          product_types?: definitions["product_types"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/insurance_plans": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_plans.id"];
          created_at?: parameters["rowFilter.insurance_plans.created_at"];
          updated_at?: parameters["rowFilter.insurance_plans.updated_at"];
          created_by?: parameters["rowFilter.insurance_plans.created_by"];
          name?: parameters["rowFilter.insurance_plans.name"];
          owner_id?: parameters["rowFilter.insurance_plans.owner_id"];
          offer_plan_id?: parameters["rowFilter.insurance_plans.offer_plan_id"];
          system_insurance_plan_id?: parameters["rowFilter.insurance_plans.system_insurance_plan_id"];
          updated_by?: parameters["rowFilter.insurance_plans.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["insurance_plans"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** insurance_plans */
          insurance_plans?: definitions["insurance_plans"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_plans.id"];
          created_at?: parameters["rowFilter.insurance_plans.created_at"];
          updated_at?: parameters["rowFilter.insurance_plans.updated_at"];
          created_by?: parameters["rowFilter.insurance_plans.created_by"];
          name?: parameters["rowFilter.insurance_plans.name"];
          owner_id?: parameters["rowFilter.insurance_plans.owner_id"];
          offer_plan_id?: parameters["rowFilter.insurance_plans.offer_plan_id"];
          system_insurance_plan_id?: parameters["rowFilter.insurance_plans.system_insurance_plan_id"];
          updated_by?: parameters["rowFilter.insurance_plans.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_plans.id"];
          created_at?: parameters["rowFilter.insurance_plans.created_at"];
          updated_at?: parameters["rowFilter.insurance_plans.updated_at"];
          created_by?: parameters["rowFilter.insurance_plans.created_by"];
          name?: parameters["rowFilter.insurance_plans.name"];
          owner_id?: parameters["rowFilter.insurance_plans.owner_id"];
          offer_plan_id?: parameters["rowFilter.insurance_plans.offer_plan_id"];
          system_insurance_plan_id?: parameters["rowFilter.insurance_plans.system_insurance_plan_id"];
          updated_by?: parameters["rowFilter.insurance_plans.updated_by"];
        };
        body: {
          /** insurance_plans */
          insurance_plans?: definitions["insurance_plans"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/survey_answers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.survey_answers.id"];
          created_at?: parameters["rowFilter.survey_answers.created_at"];
          created_by?: parameters["rowFilter.survey_answers.created_by"];
          owner_id?: parameters["rowFilter.survey_answers.owner_id"];
          updated_at?: parameters["rowFilter.survey_answers.updated_at"];
          responder_id?: parameters["rowFilter.survey_answers.responder_id"];
          survey_id?: parameters["rowFilter.survey_answers.survey_id"];
          answers?: parameters["rowFilter.survey_answers.answers"];
          status?: parameters["rowFilter.survey_answers.status"];
          updated_by?: parameters["rowFilter.survey_answers.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["survey_answers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** survey_answers */
          survey_answers?: definitions["survey_answers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.survey_answers.id"];
          created_at?: parameters["rowFilter.survey_answers.created_at"];
          created_by?: parameters["rowFilter.survey_answers.created_by"];
          owner_id?: parameters["rowFilter.survey_answers.owner_id"];
          updated_at?: parameters["rowFilter.survey_answers.updated_at"];
          responder_id?: parameters["rowFilter.survey_answers.responder_id"];
          survey_id?: parameters["rowFilter.survey_answers.survey_id"];
          answers?: parameters["rowFilter.survey_answers.answers"];
          status?: parameters["rowFilter.survey_answers.status"];
          updated_by?: parameters["rowFilter.survey_answers.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.survey_answers.id"];
          created_at?: parameters["rowFilter.survey_answers.created_at"];
          created_by?: parameters["rowFilter.survey_answers.created_by"];
          owner_id?: parameters["rowFilter.survey_answers.owner_id"];
          updated_at?: parameters["rowFilter.survey_answers.updated_at"];
          responder_id?: parameters["rowFilter.survey_answers.responder_id"];
          survey_id?: parameters["rowFilter.survey_answers.survey_id"];
          answers?: parameters["rowFilter.survey_answers.answers"];
          status?: parameters["rowFilter.survey_answers.status"];
          updated_by?: parameters["rowFilter.survey_answers.updated_by"];
        };
        body: {
          /** survey_answers */
          survey_answers?: definitions["survey_answers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/driver_licenses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.driver_licenses.id"];
          created_at?: parameters["rowFilter.driver_licenses.created_at"];
          created_by?: parameters["rowFilter.driver_licenses.created_by"];
          owner_id?: parameters["rowFilter.driver_licenses.owner_id"];
          date_of_expiry?: parameters["rowFilter.driver_licenses.date_of_expiry"];
          date_of_issue?: parameters["rowFilter.driver_licenses.date_of_issue"];
          license_number?: parameters["rowFilter.driver_licenses.license_number"];
          type?: parameters["rowFilter.driver_licenses.type"];
          employee_id?: parameters["rowFilter.driver_licenses.employee_id"];
          updated_at?: parameters["rowFilter.driver_licenses.updated_at"];
          blood_type_id?: parameters["rowFilter.driver_licenses.blood_type_id"];
          updated_by?: parameters["rowFilter.driver_licenses.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["driver_licenses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** driver_licenses */
          driver_licenses?: definitions["driver_licenses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.driver_licenses.id"];
          created_at?: parameters["rowFilter.driver_licenses.created_at"];
          created_by?: parameters["rowFilter.driver_licenses.created_by"];
          owner_id?: parameters["rowFilter.driver_licenses.owner_id"];
          date_of_expiry?: parameters["rowFilter.driver_licenses.date_of_expiry"];
          date_of_issue?: parameters["rowFilter.driver_licenses.date_of_issue"];
          license_number?: parameters["rowFilter.driver_licenses.license_number"];
          type?: parameters["rowFilter.driver_licenses.type"];
          employee_id?: parameters["rowFilter.driver_licenses.employee_id"];
          updated_at?: parameters["rowFilter.driver_licenses.updated_at"];
          blood_type_id?: parameters["rowFilter.driver_licenses.blood_type_id"];
          updated_by?: parameters["rowFilter.driver_licenses.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.driver_licenses.id"];
          created_at?: parameters["rowFilter.driver_licenses.created_at"];
          created_by?: parameters["rowFilter.driver_licenses.created_by"];
          owner_id?: parameters["rowFilter.driver_licenses.owner_id"];
          date_of_expiry?: parameters["rowFilter.driver_licenses.date_of_expiry"];
          date_of_issue?: parameters["rowFilter.driver_licenses.date_of_issue"];
          license_number?: parameters["rowFilter.driver_licenses.license_number"];
          type?: parameters["rowFilter.driver_licenses.type"];
          employee_id?: parameters["rowFilter.driver_licenses.employee_id"];
          updated_at?: parameters["rowFilter.driver_licenses.updated_at"];
          blood_type_id?: parameters["rowFilter.driver_licenses.blood_type_id"];
          updated_by?: parameters["rowFilter.driver_licenses.updated_by"];
        };
        body: {
          /** driver_licenses */
          driver_licenses?: definitions["driver_licenses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/proposal_urgents": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposal_urgents.id"];
          created_at?: parameters["rowFilter.proposal_urgents.created_at"];
          updated_at?: parameters["rowFilter.proposal_urgents.updated_at"];
          created_by?: parameters["rowFilter.proposal_urgents.created_by"];
          notes?: parameters["rowFilter.proposal_urgents.notes"];
          owner_id?: parameters["rowFilter.proposal_urgents.owner_id"];
          title?: parameters["rowFilter.proposal_urgents.title"];
          type?: parameters["rowFilter.proposal_urgents.type"];
          updated_by?: parameters["rowFilter.proposal_urgents.updated_by"];
          date_of_urgent?: parameters["rowFilter.proposal_urgents.date_of_urgent"];
          description?: parameters["rowFilter.proposal_urgents.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["proposal_urgents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** proposal_urgents */
          proposal_urgents?: definitions["proposal_urgents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposal_urgents.id"];
          created_at?: parameters["rowFilter.proposal_urgents.created_at"];
          updated_at?: parameters["rowFilter.proposal_urgents.updated_at"];
          created_by?: parameters["rowFilter.proposal_urgents.created_by"];
          notes?: parameters["rowFilter.proposal_urgents.notes"];
          owner_id?: parameters["rowFilter.proposal_urgents.owner_id"];
          title?: parameters["rowFilter.proposal_urgents.title"];
          type?: parameters["rowFilter.proposal_urgents.type"];
          updated_by?: parameters["rowFilter.proposal_urgents.updated_by"];
          date_of_urgent?: parameters["rowFilter.proposal_urgents.date_of_urgent"];
          description?: parameters["rowFilter.proposal_urgents.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposal_urgents.id"];
          created_at?: parameters["rowFilter.proposal_urgents.created_at"];
          updated_at?: parameters["rowFilter.proposal_urgents.updated_at"];
          created_by?: parameters["rowFilter.proposal_urgents.created_by"];
          notes?: parameters["rowFilter.proposal_urgents.notes"];
          owner_id?: parameters["rowFilter.proposal_urgents.owner_id"];
          title?: parameters["rowFilter.proposal_urgents.title"];
          type?: parameters["rowFilter.proposal_urgents.type"];
          updated_by?: parameters["rowFilter.proposal_urgents.updated_by"];
          date_of_urgent?: parameters["rowFilter.proposal_urgents.date_of_urgent"];
          description?: parameters["rowFilter.proposal_urgents.description"];
        };
        body: {
          /** proposal_urgents */
          proposal_urgents?: definitions["proposal_urgents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_employee_nationalities": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_nationalities.created_at"];
          updated_at?: parameters["rowFilter.join_employee_nationalities.updated_at"];
          created_by?: parameters["rowFilter.join_employee_nationalities.created_by"];
          employee_id?: parameters["rowFilter.join_employee_nationalities.employee_id"];
          nationality_id?: parameters["rowFilter.join_employee_nationalities.nationality_id"];
          owner_id?: parameters["rowFilter.join_employee_nationalities.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_nationalities.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_employee_nationalities"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_employee_nationalities */
          join_employee_nationalities?: definitions["join_employee_nationalities"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_nationalities.created_at"];
          updated_at?: parameters["rowFilter.join_employee_nationalities.updated_at"];
          created_by?: parameters["rowFilter.join_employee_nationalities.created_by"];
          employee_id?: parameters["rowFilter.join_employee_nationalities.employee_id"];
          nationality_id?: parameters["rowFilter.join_employee_nationalities.nationality_id"];
          owner_id?: parameters["rowFilter.join_employee_nationalities.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_nationalities.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_nationalities.created_at"];
          updated_at?: parameters["rowFilter.join_employee_nationalities.updated_at"];
          created_by?: parameters["rowFilter.join_employee_nationalities.created_by"];
          employee_id?: parameters["rowFilter.join_employee_nationalities.employee_id"];
          nationality_id?: parameters["rowFilter.join_employee_nationalities.nationality_id"];
          owner_id?: parameters["rowFilter.join_employee_nationalities.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_nationalities.updated_by"];
        };
        body: {
          /** join_employee_nationalities */
          join_employee_nationalities?: definitions["join_employee_nationalities"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_expenses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_expenses.id"];
          created_at?: parameters["rowFilter.request_expenses.created_at"];
          updated_at?: parameters["rowFilter.request_expenses.updated_at"];
          created_by?: parameters["rowFilter.request_expenses.created_by"];
          notes?: parameters["rowFilter.request_expenses.notes"];
          owner_id?: parameters["rowFilter.request_expenses.owner_id"];
          title?: parameters["rowFilter.request_expenses.title"];
          type?: parameters["rowFilter.request_expenses.type"];
          updated_by?: parameters["rowFilter.request_expenses.updated_by"];
          status?: parameters["rowFilter.request_expenses.status"];
          amount?: parameters["rowFilter.request_expenses.amount"];
          expense_type_id?: parameters["rowFilter.request_expenses.expense_type_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_expenses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_expenses */
          request_expenses?: definitions["request_expenses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_expenses.id"];
          created_at?: parameters["rowFilter.request_expenses.created_at"];
          updated_at?: parameters["rowFilter.request_expenses.updated_at"];
          created_by?: parameters["rowFilter.request_expenses.created_by"];
          notes?: parameters["rowFilter.request_expenses.notes"];
          owner_id?: parameters["rowFilter.request_expenses.owner_id"];
          title?: parameters["rowFilter.request_expenses.title"];
          type?: parameters["rowFilter.request_expenses.type"];
          updated_by?: parameters["rowFilter.request_expenses.updated_by"];
          status?: parameters["rowFilter.request_expenses.status"];
          amount?: parameters["rowFilter.request_expenses.amount"];
          expense_type_id?: parameters["rowFilter.request_expenses.expense_type_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_expenses.id"];
          created_at?: parameters["rowFilter.request_expenses.created_at"];
          updated_at?: parameters["rowFilter.request_expenses.updated_at"];
          created_by?: parameters["rowFilter.request_expenses.created_by"];
          notes?: parameters["rowFilter.request_expenses.notes"];
          owner_id?: parameters["rowFilter.request_expenses.owner_id"];
          title?: parameters["rowFilter.request_expenses.title"];
          type?: parameters["rowFilter.request_expenses.type"];
          updated_by?: parameters["rowFilter.request_expenses.updated_by"];
          status?: parameters["rowFilter.request_expenses.status"];
          amount?: parameters["rowFilter.request_expenses.amount"];
          expense_type_id?: parameters["rowFilter.request_expenses.expense_type_id"];
        };
        body: {
          /** request_expenses */
          request_expenses?: definitions["request_expenses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/base_complaints": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_complaints.id"];
          created_at?: parameters["rowFilter.base_complaints.created_at"];
          updated_at?: parameters["rowFilter.base_complaints.updated_at"];
          created_by?: parameters["rowFilter.base_complaints.created_by"];
          notes?: parameters["rowFilter.base_complaints.notes"];
          owner_id?: parameters["rowFilter.base_complaints.owner_id"];
          title?: parameters["rowFilter.base_complaints.title"];
          type?: parameters["rowFilter.base_complaints.type"];
          updated_by?: parameters["rowFilter.base_complaints.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["base_complaints"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** base_complaints */
          base_complaints?: definitions["base_complaints"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_complaints.id"];
          created_at?: parameters["rowFilter.base_complaints.created_at"];
          updated_at?: parameters["rowFilter.base_complaints.updated_at"];
          created_by?: parameters["rowFilter.base_complaints.created_by"];
          notes?: parameters["rowFilter.base_complaints.notes"];
          owner_id?: parameters["rowFilter.base_complaints.owner_id"];
          title?: parameters["rowFilter.base_complaints.title"];
          type?: parameters["rowFilter.base_complaints.type"];
          updated_by?: parameters["rowFilter.base_complaints.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_complaints.id"];
          created_at?: parameters["rowFilter.base_complaints.created_at"];
          updated_at?: parameters["rowFilter.base_complaints.updated_at"];
          created_by?: parameters["rowFilter.base_complaints.created_by"];
          notes?: parameters["rowFilter.base_complaints.notes"];
          owner_id?: parameters["rowFilter.base_complaints.owner_id"];
          title?: parameters["rowFilter.base_complaints.title"];
          type?: parameters["rowFilter.base_complaints.type"];
          updated_by?: parameters["rowFilter.base_complaints.updated_by"];
        };
        body: {
          /** base_complaints */
          base_complaints?: definitions["base_complaints"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_training_trainees": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_training_trainees.created_at"];
          created_by?: parameters["rowFilter.join_training_trainees.created_by"];
          owner_id?: parameters["rowFilter.join_training_trainees.owner_id"];
          updated_at?: parameters["rowFilter.join_training_trainees.updated_at"];
          employee_id?: parameters["rowFilter.join_training_trainees.employee_id"];
          training_id?: parameters["rowFilter.join_training_trainees.training_id"];
          updated_by?: parameters["rowFilter.join_training_trainees.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_training_trainees"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_training_trainees */
          join_training_trainees?: definitions["join_training_trainees"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_training_trainees.created_at"];
          created_by?: parameters["rowFilter.join_training_trainees.created_by"];
          owner_id?: parameters["rowFilter.join_training_trainees.owner_id"];
          updated_at?: parameters["rowFilter.join_training_trainees.updated_at"];
          employee_id?: parameters["rowFilter.join_training_trainees.employee_id"];
          training_id?: parameters["rowFilter.join_training_trainees.training_id"];
          updated_by?: parameters["rowFilter.join_training_trainees.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_training_trainees.created_at"];
          created_by?: parameters["rowFilter.join_training_trainees.created_by"];
          owner_id?: parameters["rowFilter.join_training_trainees.owner_id"];
          updated_at?: parameters["rowFilter.join_training_trainees.updated_at"];
          employee_id?: parameters["rowFilter.join_training_trainees.employee_id"];
          training_id?: parameters["rowFilter.join_training_trainees.training_id"];
          updated_by?: parameters["rowFilter.join_training_trainees.updated_by"];
        };
        body: {
          /** join_training_trainees */
          join_training_trainees?: definitions["join_training_trainees"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_product_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_documents.created_at"];
          updated_at?: parameters["rowFilter.join_product_documents.updated_at"];
          created_by?: parameters["rowFilter.join_product_documents.created_by"];
          owner_id?: parameters["rowFilter.join_product_documents.owner_id"];
          image_id?: parameters["rowFilter.join_product_documents.image_id"];
          product_id?: parameters["rowFilter.join_product_documents.product_id"];
          updated_by?: parameters["rowFilter.join_product_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_product_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_product_documents */
          join_product_documents?: definitions["join_product_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_documents.created_at"];
          updated_at?: parameters["rowFilter.join_product_documents.updated_at"];
          created_by?: parameters["rowFilter.join_product_documents.created_by"];
          owner_id?: parameters["rowFilter.join_product_documents.owner_id"];
          image_id?: parameters["rowFilter.join_product_documents.image_id"];
          product_id?: parameters["rowFilter.join_product_documents.product_id"];
          updated_by?: parameters["rowFilter.join_product_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_documents.created_at"];
          updated_at?: parameters["rowFilter.join_product_documents.updated_at"];
          created_by?: parameters["rowFilter.join_product_documents.created_by"];
          owner_id?: parameters["rowFilter.join_product_documents.owner_id"];
          image_id?: parameters["rowFilter.join_product_documents.image_id"];
          product_id?: parameters["rowFilter.join_product_documents.product_id"];
          updated_by?: parameters["rowFilter.join_product_documents.updated_by"];
        };
        body: {
          /** join_product_documents */
          join_product_documents?: definitions["join_product_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/residencies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.residencies.id"];
          created_at?: parameters["rowFilter.residencies.created_at"];
          created_by?: parameters["rowFilter.residencies.created_by"];
          owner_id?: parameters["rowFilter.residencies.owner_id"];
          updated_at?: parameters["rowFilter.residencies.updated_at"];
          from?: parameters["rowFilter.residencies.from"];
          to?: parameters["rowFilter.residencies.to"];
          employee_id?: parameters["rowFilter.residencies.employee_id"];
          updated_by?: parameters["rowFilter.residencies.updated_by"];
          issuer_id?: parameters["rowFilter.residencies.issuer_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["residencies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** residencies */
          residencies?: definitions["residencies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.residencies.id"];
          created_at?: parameters["rowFilter.residencies.created_at"];
          created_by?: parameters["rowFilter.residencies.created_by"];
          owner_id?: parameters["rowFilter.residencies.owner_id"];
          updated_at?: parameters["rowFilter.residencies.updated_at"];
          from?: parameters["rowFilter.residencies.from"];
          to?: parameters["rowFilter.residencies.to"];
          employee_id?: parameters["rowFilter.residencies.employee_id"];
          updated_by?: parameters["rowFilter.residencies.updated_by"];
          issuer_id?: parameters["rowFilter.residencies.issuer_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.residencies.id"];
          created_at?: parameters["rowFilter.residencies.created_at"];
          created_by?: parameters["rowFilter.residencies.created_by"];
          owner_id?: parameters["rowFilter.residencies.owner_id"];
          updated_at?: parameters["rowFilter.residencies.updated_at"];
          from?: parameters["rowFilter.residencies.from"];
          to?: parameters["rowFilter.residencies.to"];
          employee_id?: parameters["rowFilter.residencies.employee_id"];
          updated_by?: parameters["rowFilter.residencies.updated_by"];
          issuer_id?: parameters["rowFilter.residencies.issuer_id"];
        };
        body: {
          /** residencies */
          residencies?: definitions["residencies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/group_users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group_users.id"];
          group_id?: parameters["rowFilter.group_users.group_id"];
          user_id?: parameters["rowFilter.group_users.user_id"];
          role?: parameters["rowFilter.group_users.role"];
          created_at?: parameters["rowFilter.group_users.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["group_users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** group_users */
          group_users?: definitions["group_users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group_users.id"];
          group_id?: parameters["rowFilter.group_users.group_id"];
          user_id?: parameters["rowFilter.group_users.user_id"];
          role?: parameters["rowFilter.group_users.role"];
          created_at?: parameters["rowFilter.group_users.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group_users.id"];
          group_id?: parameters["rowFilter.group_users.group_id"];
          user_id?: parameters["rowFilter.group_users.user_id"];
          role?: parameters["rowFilter.group_users.role"];
          created_at?: parameters["rowFilter.group_users.created_at"];
        };
        body: {
          /** group_users */
          group_users?: definitions["group_users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/requests": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.requests.id"];
          created_at?: parameters["rowFilter.requests.created_at"];
          updated_at?: parameters["rowFilter.requests.updated_at"];
          created_by?: parameters["rowFilter.requests.created_by"];
          notes?: parameters["rowFilter.requests.notes"];
          owner_id?: parameters["rowFilter.requests.owner_id"];
          title?: parameters["rowFilter.requests.title"];
          type?: parameters["rowFilter.requests.type"];
          updated_by?: parameters["rowFilter.requests.updated_by"];
          status?: parameters["rowFilter.requests.status"];
          description?: parameters["rowFilter.requests.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["requests"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** requests */
          requests?: definitions["requests"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.requests.id"];
          created_at?: parameters["rowFilter.requests.created_at"];
          updated_at?: parameters["rowFilter.requests.updated_at"];
          created_by?: parameters["rowFilter.requests.created_by"];
          notes?: parameters["rowFilter.requests.notes"];
          owner_id?: parameters["rowFilter.requests.owner_id"];
          title?: parameters["rowFilter.requests.title"];
          type?: parameters["rowFilter.requests.type"];
          updated_by?: parameters["rowFilter.requests.updated_by"];
          status?: parameters["rowFilter.requests.status"];
          description?: parameters["rowFilter.requests.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.requests.id"];
          created_at?: parameters["rowFilter.requests.created_at"];
          updated_at?: parameters["rowFilter.requests.updated_at"];
          created_by?: parameters["rowFilter.requests.created_by"];
          notes?: parameters["rowFilter.requests.notes"];
          owner_id?: parameters["rowFilter.requests.owner_id"];
          title?: parameters["rowFilter.requests.title"];
          type?: parameters["rowFilter.requests.type"];
          updated_by?: parameters["rowFilter.requests.updated_by"];
          status?: parameters["rowFilter.requests.status"];
          description?: parameters["rowFilter.requests.description"];
        };
        body: {
          /** requests */
          requests?: definitions["requests"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ports": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ports.id"];
          created_at?: parameters["rowFilter.ports.created_at"];
          created_by?: parameters["rowFilter.ports.created_by"];
          owner_id?: parameters["rowFilter.ports.owner_id"];
          updated_at?: parameters["rowFilter.ports.updated_at"];
          name?: parameters["rowFilter.ports.name"];
          country_id?: parameters["rowFilter.ports.country_id"];
          city_id?: parameters["rowFilter.ports.city_id"];
          updated_by?: parameters["rowFilter.ports.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ports"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ports */
          ports?: definitions["ports"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ports.id"];
          created_at?: parameters["rowFilter.ports.created_at"];
          created_by?: parameters["rowFilter.ports.created_by"];
          owner_id?: parameters["rowFilter.ports.owner_id"];
          updated_at?: parameters["rowFilter.ports.updated_at"];
          name?: parameters["rowFilter.ports.name"];
          country_id?: parameters["rowFilter.ports.country_id"];
          city_id?: parameters["rowFilter.ports.city_id"];
          updated_by?: parameters["rowFilter.ports.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ports.id"];
          created_at?: parameters["rowFilter.ports.created_at"];
          created_by?: parameters["rowFilter.ports.created_by"];
          owner_id?: parameters["rowFilter.ports.owner_id"];
          updated_at?: parameters["rowFilter.ports.updated_at"];
          name?: parameters["rowFilter.ports.name"];
          country_id?: parameters["rowFilter.ports.country_id"];
          city_id?: parameters["rowFilter.ports.city_id"];
          updated_by?: parameters["rowFilter.ports.updated_by"];
        };
        body: {
          /** ports */
          ports?: definitions["ports"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_brands": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_brands.id"];
          created_at?: parameters["rowFilter.product_brands.created_at"];
          created_by?: parameters["rowFilter.product_brands.created_by"];
          owner_id?: parameters["rowFilter.product_brands.owner_id"];
          updated_at?: parameters["rowFilter.product_brands.updated_at"];
          name?: parameters["rowFilter.product_brands.name"];
          updated_by?: parameters["rowFilter.product_brands.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_brands"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_brands */
          product_brands?: definitions["product_brands"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_brands.id"];
          created_at?: parameters["rowFilter.product_brands.created_at"];
          created_by?: parameters["rowFilter.product_brands.created_by"];
          owner_id?: parameters["rowFilter.product_brands.owner_id"];
          updated_at?: parameters["rowFilter.product_brands.updated_at"];
          name?: parameters["rowFilter.product_brands.name"];
          updated_by?: parameters["rowFilter.product_brands.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_brands.id"];
          created_at?: parameters["rowFilter.product_brands.created_at"];
          created_by?: parameters["rowFilter.product_brands.created_by"];
          owner_id?: parameters["rowFilter.product_brands.owner_id"];
          updated_at?: parameters["rowFilter.product_brands.updated_at"];
          name?: parameters["rowFilter.product_brands.name"];
          updated_by?: parameters["rowFilter.product_brands.updated_by"];
        };
        body: {
          /** product_brands */
          product_brands?: definitions["product_brands"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/recruitment_agencies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.recruitment_agencies.id"];
          created_at?: parameters["rowFilter.recruitment_agencies.created_at"];
          updated_at?: parameters["rowFilter.recruitment_agencies.updated_at"];
          employee_name?: parameters["rowFilter.recruitment_agencies.employee_name"];
          phone?: parameters["rowFilter.recruitment_agencies.phone"];
          email?: parameters["rowFilter.recruitment_agencies.email"];
          website?: parameters["rowFilter.recruitment_agencies.website"];
          updated_by?: parameters["rowFilter.recruitment_agencies.updated_by"];
          owner_id?: parameters["rowFilter.recruitment_agencies.owner_id"];
          country_id?: parameters["rowFilter.recruitment_agencies.country_id"];
          city_id?: parameters["rowFilter.recruitment_agencies.city_id"];
          street?: parameters["rowFilter.recruitment_agencies.street"];
          building?: parameters["rowFilter.recruitment_agencies.building"];
          landmark?: parameters["rowFilter.recruitment_agencies.landmark"];
          gps?: parameters["rowFilter.recruitment_agencies.gps"];
          created_by?: parameters["rowFilter.recruitment_agencies.created_by"];
          name?: parameters["rowFilter.recruitment_agencies.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["recruitment_agencies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** recruitment_agencies */
          recruitment_agencies?: definitions["recruitment_agencies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.recruitment_agencies.id"];
          created_at?: parameters["rowFilter.recruitment_agencies.created_at"];
          updated_at?: parameters["rowFilter.recruitment_agencies.updated_at"];
          employee_name?: parameters["rowFilter.recruitment_agencies.employee_name"];
          phone?: parameters["rowFilter.recruitment_agencies.phone"];
          email?: parameters["rowFilter.recruitment_agencies.email"];
          website?: parameters["rowFilter.recruitment_agencies.website"];
          updated_by?: parameters["rowFilter.recruitment_agencies.updated_by"];
          owner_id?: parameters["rowFilter.recruitment_agencies.owner_id"];
          country_id?: parameters["rowFilter.recruitment_agencies.country_id"];
          city_id?: parameters["rowFilter.recruitment_agencies.city_id"];
          street?: parameters["rowFilter.recruitment_agencies.street"];
          building?: parameters["rowFilter.recruitment_agencies.building"];
          landmark?: parameters["rowFilter.recruitment_agencies.landmark"];
          gps?: parameters["rowFilter.recruitment_agencies.gps"];
          created_by?: parameters["rowFilter.recruitment_agencies.created_by"];
          name?: parameters["rowFilter.recruitment_agencies.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.recruitment_agencies.id"];
          created_at?: parameters["rowFilter.recruitment_agencies.created_at"];
          updated_at?: parameters["rowFilter.recruitment_agencies.updated_at"];
          employee_name?: parameters["rowFilter.recruitment_agencies.employee_name"];
          phone?: parameters["rowFilter.recruitment_agencies.phone"];
          email?: parameters["rowFilter.recruitment_agencies.email"];
          website?: parameters["rowFilter.recruitment_agencies.website"];
          updated_by?: parameters["rowFilter.recruitment_agencies.updated_by"];
          owner_id?: parameters["rowFilter.recruitment_agencies.owner_id"];
          country_id?: parameters["rowFilter.recruitment_agencies.country_id"];
          city_id?: parameters["rowFilter.recruitment_agencies.city_id"];
          street?: parameters["rowFilter.recruitment_agencies.street"];
          building?: parameters["rowFilter.recruitment_agencies.building"];
          landmark?: parameters["rowFilter.recruitment_agencies.landmark"];
          gps?: parameters["rowFilter.recruitment_agencies.gps"];
          created_by?: parameters["rowFilter.recruitment_agencies.created_by"];
          name?: parameters["rowFilter.recruitment_agencies.name"];
        };
        body: {
          /** recruitment_agencies */
          recruitment_agencies?: definitions["recruitment_agencies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_sponsorship_transfers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_sponsorship_transfers.id"];
          created_at?: parameters["rowFilter.request_sponsorship_transfers.created_at"];
          updated_at?: parameters["rowFilter.request_sponsorship_transfers.updated_at"];
          created_by?: parameters["rowFilter.request_sponsorship_transfers.created_by"];
          notes?: parameters["rowFilter.request_sponsorship_transfers.notes"];
          owner_id?: parameters["rowFilter.request_sponsorship_transfers.owner_id"];
          title?: parameters["rowFilter.request_sponsorship_transfers.title"];
          type?: parameters["rowFilter.request_sponsorship_transfers.type"];
          updated_by?: parameters["rowFilter.request_sponsorship_transfers.updated_by"];
          status?: parameters["rowFilter.request_sponsorship_transfers.status"];
          reason?: parameters["rowFilter.request_sponsorship_transfers.reason"];
          sponsor_id?: parameters["rowFilter.request_sponsorship_transfers.sponsor_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_sponsorship_transfers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_sponsorship_transfers */
          request_sponsorship_transfers?: definitions["request_sponsorship_transfers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_sponsorship_transfers.id"];
          created_at?: parameters["rowFilter.request_sponsorship_transfers.created_at"];
          updated_at?: parameters["rowFilter.request_sponsorship_transfers.updated_at"];
          created_by?: parameters["rowFilter.request_sponsorship_transfers.created_by"];
          notes?: parameters["rowFilter.request_sponsorship_transfers.notes"];
          owner_id?: parameters["rowFilter.request_sponsorship_transfers.owner_id"];
          title?: parameters["rowFilter.request_sponsorship_transfers.title"];
          type?: parameters["rowFilter.request_sponsorship_transfers.type"];
          updated_by?: parameters["rowFilter.request_sponsorship_transfers.updated_by"];
          status?: parameters["rowFilter.request_sponsorship_transfers.status"];
          reason?: parameters["rowFilter.request_sponsorship_transfers.reason"];
          sponsor_id?: parameters["rowFilter.request_sponsorship_transfers.sponsor_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_sponsorship_transfers.id"];
          created_at?: parameters["rowFilter.request_sponsorship_transfers.created_at"];
          updated_at?: parameters["rowFilter.request_sponsorship_transfers.updated_at"];
          created_by?: parameters["rowFilter.request_sponsorship_transfers.created_by"];
          notes?: parameters["rowFilter.request_sponsorship_transfers.notes"];
          owner_id?: parameters["rowFilter.request_sponsorship_transfers.owner_id"];
          title?: parameters["rowFilter.request_sponsorship_transfers.title"];
          type?: parameters["rowFilter.request_sponsorship_transfers.type"];
          updated_by?: parameters["rowFilter.request_sponsorship_transfers.updated_by"];
          status?: parameters["rowFilter.request_sponsorship_transfers.status"];
          reason?: parameters["rowFilter.request_sponsorship_transfers.reason"];
          sponsor_id?: parameters["rowFilter.request_sponsorship_transfers.sponsor_id"];
        };
        body: {
          /** request_sponsorship_transfers */
          request_sponsorship_transfers?: definitions["request_sponsorship_transfers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_insurance_company_feedback": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_insurance_company_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_insurance_company_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_insurance_company_feedback.created_by"];
          insurance_company_id?: parameters["rowFilter.join_insurance_company_feedback.insurance_company_id"];
          feedback_id?: parameters["rowFilter.join_insurance_company_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_insurance_company_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_insurance_company_feedback.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_insurance_company_feedback"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_insurance_company_feedback */
          join_insurance_company_feedback?: definitions["join_insurance_company_feedback"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_insurance_company_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_insurance_company_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_insurance_company_feedback.created_by"];
          insurance_company_id?: parameters["rowFilter.join_insurance_company_feedback.insurance_company_id"];
          feedback_id?: parameters["rowFilter.join_insurance_company_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_insurance_company_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_insurance_company_feedback.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_insurance_company_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_insurance_company_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_insurance_company_feedback.created_by"];
          insurance_company_id?: parameters["rowFilter.join_insurance_company_feedback.insurance_company_id"];
          feedback_id?: parameters["rowFilter.join_insurance_company_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_insurance_company_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_insurance_company_feedback.updated_by"];
        };
        body: {
          /** join_insurance_company_feedback */
          join_insurance_company_feedback?: definitions["join_insurance_company_feedback"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/work_locations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.work_locations.id"];
          created_at?: parameters["rowFilter.work_locations.created_at"];
          updated_at?: parameters["rowFilter.work_locations.updated_at"];
          employee_name?: parameters["rowFilter.work_locations.employee_name"];
          phone?: parameters["rowFilter.work_locations.phone"];
          email?: parameters["rowFilter.work_locations.email"];
          website?: parameters["rowFilter.work_locations.website"];
          updated_by?: parameters["rowFilter.work_locations.updated_by"];
          owner_id?: parameters["rowFilter.work_locations.owner_id"];
          country_id?: parameters["rowFilter.work_locations.country_id"];
          city_id?: parameters["rowFilter.work_locations.city_id"];
          street?: parameters["rowFilter.work_locations.street"];
          building?: parameters["rowFilter.work_locations.building"];
          landmark?: parameters["rowFilter.work_locations.landmark"];
          gps?: parameters["rowFilter.work_locations.gps"];
          created_by?: parameters["rowFilter.work_locations.created_by"];
          name?: parameters["rowFilter.work_locations.name"];
          entity_id?: parameters["rowFilter.work_locations.entity_id"];
          activity_types_id?: parameters["rowFilter.work_locations.activity_types_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["work_locations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** work_locations */
          work_locations?: definitions["work_locations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.work_locations.id"];
          created_at?: parameters["rowFilter.work_locations.created_at"];
          updated_at?: parameters["rowFilter.work_locations.updated_at"];
          employee_name?: parameters["rowFilter.work_locations.employee_name"];
          phone?: parameters["rowFilter.work_locations.phone"];
          email?: parameters["rowFilter.work_locations.email"];
          website?: parameters["rowFilter.work_locations.website"];
          updated_by?: parameters["rowFilter.work_locations.updated_by"];
          owner_id?: parameters["rowFilter.work_locations.owner_id"];
          country_id?: parameters["rowFilter.work_locations.country_id"];
          city_id?: parameters["rowFilter.work_locations.city_id"];
          street?: parameters["rowFilter.work_locations.street"];
          building?: parameters["rowFilter.work_locations.building"];
          landmark?: parameters["rowFilter.work_locations.landmark"];
          gps?: parameters["rowFilter.work_locations.gps"];
          created_by?: parameters["rowFilter.work_locations.created_by"];
          name?: parameters["rowFilter.work_locations.name"];
          entity_id?: parameters["rowFilter.work_locations.entity_id"];
          activity_types_id?: parameters["rowFilter.work_locations.activity_types_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.work_locations.id"];
          created_at?: parameters["rowFilter.work_locations.created_at"];
          updated_at?: parameters["rowFilter.work_locations.updated_at"];
          employee_name?: parameters["rowFilter.work_locations.employee_name"];
          phone?: parameters["rowFilter.work_locations.phone"];
          email?: parameters["rowFilter.work_locations.email"];
          website?: parameters["rowFilter.work_locations.website"];
          updated_by?: parameters["rowFilter.work_locations.updated_by"];
          owner_id?: parameters["rowFilter.work_locations.owner_id"];
          country_id?: parameters["rowFilter.work_locations.country_id"];
          city_id?: parameters["rowFilter.work_locations.city_id"];
          street?: parameters["rowFilter.work_locations.street"];
          building?: parameters["rowFilter.work_locations.building"];
          landmark?: parameters["rowFilter.work_locations.landmark"];
          gps?: parameters["rowFilter.work_locations.gps"];
          created_by?: parameters["rowFilter.work_locations.created_by"];
          name?: parameters["rowFilter.work_locations.name"];
          entity_id?: parameters["rowFilter.work_locations.entity_id"];
          activity_types_id?: parameters["rowFilter.work_locations.activity_types_id"];
        };
        body: {
          /** work_locations */
          work_locations?: definitions["work_locations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/beneficiaries": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.beneficiaries.id"];
          created_at?: parameters["rowFilter.beneficiaries.created_at"];
          updated_at?: parameters["rowFilter.beneficiaries.updated_at"];
          created_by?: parameters["rowFilter.beneficiaries.created_by"];
          name?: parameters["rowFilter.beneficiaries.name"];
          date_of_birth?: parameters["rowFilter.beneficiaries.date_of_birth"];
          owner_id?: parameters["rowFilter.beneficiaries.owner_id"];
          type?: parameters["rowFilter.beneficiaries.type"];
          updated_by?: parameters["rowFilter.beneficiaries.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["beneficiaries"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** beneficiaries */
          beneficiaries?: definitions["beneficiaries"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.beneficiaries.id"];
          created_at?: parameters["rowFilter.beneficiaries.created_at"];
          updated_at?: parameters["rowFilter.beneficiaries.updated_at"];
          created_by?: parameters["rowFilter.beneficiaries.created_by"];
          name?: parameters["rowFilter.beneficiaries.name"];
          date_of_birth?: parameters["rowFilter.beneficiaries.date_of_birth"];
          owner_id?: parameters["rowFilter.beneficiaries.owner_id"];
          type?: parameters["rowFilter.beneficiaries.type"];
          updated_by?: parameters["rowFilter.beneficiaries.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.beneficiaries.id"];
          created_at?: parameters["rowFilter.beneficiaries.created_at"];
          updated_at?: parameters["rowFilter.beneficiaries.updated_at"];
          created_by?: parameters["rowFilter.beneficiaries.created_by"];
          name?: parameters["rowFilter.beneficiaries.name"];
          date_of_birth?: parameters["rowFilter.beneficiaries.date_of_birth"];
          owner_id?: parameters["rowFilter.beneficiaries.owner_id"];
          type?: parameters["rowFilter.beneficiaries.type"];
          updated_by?: parameters["rowFilter.beneficiaries.updated_by"];
        };
        body: {
          /** beneficiaries */
          beneficiaries?: definitions["beneficiaries"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/complaints": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.complaints.id"];
          created_at?: parameters["rowFilter.complaints.created_at"];
          updated_at?: parameters["rowFilter.complaints.updated_at"];
          created_by?: parameters["rowFilter.complaints.created_by"];
          notes?: parameters["rowFilter.complaints.notes"];
          owner_id?: parameters["rowFilter.complaints.owner_id"];
          title?: parameters["rowFilter.complaints.title"];
          type?: parameters["rowFilter.complaints.type"];
          updated_by?: parameters["rowFilter.complaints.updated_by"];
          description?: parameters["rowFilter.complaints.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["complaints"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** complaints */
          complaints?: definitions["complaints"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.complaints.id"];
          created_at?: parameters["rowFilter.complaints.created_at"];
          updated_at?: parameters["rowFilter.complaints.updated_at"];
          created_by?: parameters["rowFilter.complaints.created_by"];
          notes?: parameters["rowFilter.complaints.notes"];
          owner_id?: parameters["rowFilter.complaints.owner_id"];
          title?: parameters["rowFilter.complaints.title"];
          type?: parameters["rowFilter.complaints.type"];
          updated_by?: parameters["rowFilter.complaints.updated_by"];
          description?: parameters["rowFilter.complaints.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.complaints.id"];
          created_at?: parameters["rowFilter.complaints.created_at"];
          updated_at?: parameters["rowFilter.complaints.updated_at"];
          created_by?: parameters["rowFilter.complaints.created_by"];
          notes?: parameters["rowFilter.complaints.notes"];
          owner_id?: parameters["rowFilter.complaints.owner_id"];
          title?: parameters["rowFilter.complaints.title"];
          type?: parameters["rowFilter.complaints.type"];
          updated_by?: parameters["rowFilter.complaints.updated_by"];
          description?: parameters["rowFilter.complaints.description"];
        };
        body: {
          /** complaints */
          complaints?: definitions["complaints"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_employee_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_documents.created_at"];
          updated_at?: parameters["rowFilter.join_employee_documents.updated_at"];
          created_by?: parameters["rowFilter.join_employee_documents.created_by"];
          employee_id?: parameters["rowFilter.join_employee_documents.employee_id"];
          image_id?: parameters["rowFilter.join_employee_documents.image_id"];
          owner_id?: parameters["rowFilter.join_employee_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_employee_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_employee_documents */
          join_employee_documents?: definitions["join_employee_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_documents.created_at"];
          updated_at?: parameters["rowFilter.join_employee_documents.updated_at"];
          created_by?: parameters["rowFilter.join_employee_documents.created_by"];
          employee_id?: parameters["rowFilter.join_employee_documents.employee_id"];
          image_id?: parameters["rowFilter.join_employee_documents.image_id"];
          owner_id?: parameters["rowFilter.join_employee_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_documents.created_at"];
          updated_at?: parameters["rowFilter.join_employee_documents.updated_at"];
          created_by?: parameters["rowFilter.join_employee_documents.created_by"];
          employee_id?: parameters["rowFilter.join_employee_documents.employee_id"];
          image_id?: parameters["rowFilter.join_employee_documents.image_id"];
          owner_id?: parameters["rowFilter.join_employee_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_documents.updated_by"];
        };
        body: {
          /** join_employee_documents */
          join_employee_documents?: definitions["join_employee_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_type_attribute_values": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_type_attribute_values.id"];
          created_at?: parameters["rowFilter.product_type_attribute_values.created_at"];
          created_by?: parameters["rowFilter.product_type_attribute_values.created_by"];
          owner_id?: parameters["rowFilter.product_type_attribute_values.owner_id"];
          updated_at?: parameters["rowFilter.product_type_attribute_values.updated_at"];
          description?: parameters["rowFilter.product_type_attribute_values.description"];
          product_type_attribute_id?: parameters["rowFilter.product_type_attribute_values.product_type_attribute_id"];
          name?: parameters["rowFilter.product_type_attribute_values.name"];
          updated_by?: parameters["rowFilter.product_type_attribute_values.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_type_attribute_values"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_type_attribute_values */
          product_type_attribute_values?: definitions["product_type_attribute_values"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_type_attribute_values.id"];
          created_at?: parameters["rowFilter.product_type_attribute_values.created_at"];
          created_by?: parameters["rowFilter.product_type_attribute_values.created_by"];
          owner_id?: parameters["rowFilter.product_type_attribute_values.owner_id"];
          updated_at?: parameters["rowFilter.product_type_attribute_values.updated_at"];
          description?: parameters["rowFilter.product_type_attribute_values.description"];
          product_type_attribute_id?: parameters["rowFilter.product_type_attribute_values.product_type_attribute_id"];
          name?: parameters["rowFilter.product_type_attribute_values.name"];
          updated_by?: parameters["rowFilter.product_type_attribute_values.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_type_attribute_values.id"];
          created_at?: parameters["rowFilter.product_type_attribute_values.created_at"];
          created_by?: parameters["rowFilter.product_type_attribute_values.created_by"];
          owner_id?: parameters["rowFilter.product_type_attribute_values.owner_id"];
          updated_at?: parameters["rowFilter.product_type_attribute_values.updated_at"];
          description?: parameters["rowFilter.product_type_attribute_values.description"];
          product_type_attribute_id?: parameters["rowFilter.product_type_attribute_values.product_type_attribute_id"];
          name?: parameters["rowFilter.product_type_attribute_values.name"];
          updated_by?: parameters["rowFilter.product_type_attribute_values.updated_by"];
        };
        body: {
          /** product_type_attribute_values */
          product_type_attribute_values?: definitions["product_type_attribute_values"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/factories": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.factories.id"];
          created_at?: parameters["rowFilter.factories.created_at"];
          updated_at?: parameters["rowFilter.factories.updated_at"];
          employee_name?: parameters["rowFilter.factories.employee_name"];
          phone?: parameters["rowFilter.factories.phone"];
          email?: parameters["rowFilter.factories.email"];
          website?: parameters["rowFilter.factories.website"];
          updated_by?: parameters["rowFilter.factories.updated_by"];
          owner_id?: parameters["rowFilter.factories.owner_id"];
          country_id?: parameters["rowFilter.factories.country_id"];
          city_id?: parameters["rowFilter.factories.city_id"];
          street?: parameters["rowFilter.factories.street"];
          building?: parameters["rowFilter.factories.building"];
          landmark?: parameters["rowFilter.factories.landmark"];
          gps?: parameters["rowFilter.factories.gps"];
          created_by?: parameters["rowFilter.factories.created_by"];
          name?: parameters["rowFilter.factories.name"];
          production_capacity?: parameters["rowFilter.factories.production_capacity"];
          quality_control_and_testing?: parameters["rowFilter.factories.quality_control_and_testing"];
          warranty_and_return_policy?: parameters["rowFilter.factories.warranty_and_return_policy"];
          terms_of_contract?: parameters["rowFilter.factories.terms_of_contract"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["factories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** factories */
          factories?: definitions["factories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.factories.id"];
          created_at?: parameters["rowFilter.factories.created_at"];
          updated_at?: parameters["rowFilter.factories.updated_at"];
          employee_name?: parameters["rowFilter.factories.employee_name"];
          phone?: parameters["rowFilter.factories.phone"];
          email?: parameters["rowFilter.factories.email"];
          website?: parameters["rowFilter.factories.website"];
          updated_by?: parameters["rowFilter.factories.updated_by"];
          owner_id?: parameters["rowFilter.factories.owner_id"];
          country_id?: parameters["rowFilter.factories.country_id"];
          city_id?: parameters["rowFilter.factories.city_id"];
          street?: parameters["rowFilter.factories.street"];
          building?: parameters["rowFilter.factories.building"];
          landmark?: parameters["rowFilter.factories.landmark"];
          gps?: parameters["rowFilter.factories.gps"];
          created_by?: parameters["rowFilter.factories.created_by"];
          name?: parameters["rowFilter.factories.name"];
          production_capacity?: parameters["rowFilter.factories.production_capacity"];
          quality_control_and_testing?: parameters["rowFilter.factories.quality_control_and_testing"];
          warranty_and_return_policy?: parameters["rowFilter.factories.warranty_and_return_policy"];
          terms_of_contract?: parameters["rowFilter.factories.terms_of_contract"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.factories.id"];
          created_at?: parameters["rowFilter.factories.created_at"];
          updated_at?: parameters["rowFilter.factories.updated_at"];
          employee_name?: parameters["rowFilter.factories.employee_name"];
          phone?: parameters["rowFilter.factories.phone"];
          email?: parameters["rowFilter.factories.email"];
          website?: parameters["rowFilter.factories.website"];
          updated_by?: parameters["rowFilter.factories.updated_by"];
          owner_id?: parameters["rowFilter.factories.owner_id"];
          country_id?: parameters["rowFilter.factories.country_id"];
          city_id?: parameters["rowFilter.factories.city_id"];
          street?: parameters["rowFilter.factories.street"];
          building?: parameters["rowFilter.factories.building"];
          landmark?: parameters["rowFilter.factories.landmark"];
          gps?: parameters["rowFilter.factories.gps"];
          created_by?: parameters["rowFilter.factories.created_by"];
          name?: parameters["rowFilter.factories.name"];
          production_capacity?: parameters["rowFilter.factories.production_capacity"];
          quality_control_and_testing?: parameters["rowFilter.factories.quality_control_and_testing"];
          warranty_and_return_policy?: parameters["rowFilter.factories.warranty_and_return_policy"];
          terms_of_contract?: parameters["rowFilter.factories.terms_of_contract"];
        };
        body: {
          /** factories */
          factories?: definitions["factories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_allowances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_allowances.id"];
          created_at?: parameters["rowFilter.request_allowances.created_at"];
          updated_at?: parameters["rowFilter.request_allowances.updated_at"];
          created_by?: parameters["rowFilter.request_allowances.created_by"];
          notes?: parameters["rowFilter.request_allowances.notes"];
          owner_id?: parameters["rowFilter.request_allowances.owner_id"];
          title?: parameters["rowFilter.request_allowances.title"];
          type?: parameters["rowFilter.request_allowances.type"];
          updated_by?: parameters["rowFilter.request_allowances.updated_by"];
          status?: parameters["rowFilter.request_allowances.status"];
          suggested_amount?: parameters["rowFilter.request_allowances.suggested_amount"];
          allowance_type_id?: parameters["rowFilter.request_allowances.allowance_type_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_allowances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_allowances */
          request_allowances?: definitions["request_allowances"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_allowances.id"];
          created_at?: parameters["rowFilter.request_allowances.created_at"];
          updated_at?: parameters["rowFilter.request_allowances.updated_at"];
          created_by?: parameters["rowFilter.request_allowances.created_by"];
          notes?: parameters["rowFilter.request_allowances.notes"];
          owner_id?: parameters["rowFilter.request_allowances.owner_id"];
          title?: parameters["rowFilter.request_allowances.title"];
          type?: parameters["rowFilter.request_allowances.type"];
          updated_by?: parameters["rowFilter.request_allowances.updated_by"];
          status?: parameters["rowFilter.request_allowances.status"];
          suggested_amount?: parameters["rowFilter.request_allowances.suggested_amount"];
          allowance_type_id?: parameters["rowFilter.request_allowances.allowance_type_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_allowances.id"];
          created_at?: parameters["rowFilter.request_allowances.created_at"];
          updated_at?: parameters["rowFilter.request_allowances.updated_at"];
          created_by?: parameters["rowFilter.request_allowances.created_by"];
          notes?: parameters["rowFilter.request_allowances.notes"];
          owner_id?: parameters["rowFilter.request_allowances.owner_id"];
          title?: parameters["rowFilter.request_allowances.title"];
          type?: parameters["rowFilter.request_allowances.type"];
          updated_by?: parameters["rowFilter.request_allowances.updated_by"];
          status?: parameters["rowFilter.request_allowances.status"];
          suggested_amount?: parameters["rowFilter.request_allowances.suggested_amount"];
          allowance_type_id?: parameters["rowFilter.request_allowances.allowance_type_id"];
        };
        body: {
          /** request_allowances */
          request_allowances?: definitions["request_allowances"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/insurance_offer_plans": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_offer_plans.id"];
          created_at?: parameters["rowFilter.insurance_offer_plans.created_at"];
          created_by?: parameters["rowFilter.insurance_offer_plans.created_by"];
          owner_id?: parameters["rowFilter.insurance_offer_plans.owner_id"];
          updated_at?: parameters["rowFilter.insurance_offer_plans.updated_at"];
          name?: parameters["rowFilter.insurance_offer_plans.name"];
          insurance_offer_id?: parameters["rowFilter.insurance_offer_plans.insurance_offer_id"];
          system_insurance_plan_id?: parameters["rowFilter.insurance_offer_plans.system_insurance_plan_id"];
          updated_by?: parameters["rowFilter.insurance_offer_plans.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["insurance_offer_plans"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** insurance_offer_plans */
          insurance_offer_plans?: definitions["insurance_offer_plans"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_offer_plans.id"];
          created_at?: parameters["rowFilter.insurance_offer_plans.created_at"];
          created_by?: parameters["rowFilter.insurance_offer_plans.created_by"];
          owner_id?: parameters["rowFilter.insurance_offer_plans.owner_id"];
          updated_at?: parameters["rowFilter.insurance_offer_plans.updated_at"];
          name?: parameters["rowFilter.insurance_offer_plans.name"];
          insurance_offer_id?: parameters["rowFilter.insurance_offer_plans.insurance_offer_id"];
          system_insurance_plan_id?: parameters["rowFilter.insurance_offer_plans.system_insurance_plan_id"];
          updated_by?: parameters["rowFilter.insurance_offer_plans.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_offer_plans.id"];
          created_at?: parameters["rowFilter.insurance_offer_plans.created_at"];
          created_by?: parameters["rowFilter.insurance_offer_plans.created_by"];
          owner_id?: parameters["rowFilter.insurance_offer_plans.owner_id"];
          updated_at?: parameters["rowFilter.insurance_offer_plans.updated_at"];
          name?: parameters["rowFilter.insurance_offer_plans.name"];
          insurance_offer_id?: parameters["rowFilter.insurance_offer_plans.insurance_offer_id"];
          system_insurance_plan_id?: parameters["rowFilter.insurance_offer_plans.system_insurance_plan_id"];
          updated_by?: parameters["rowFilter.insurance_offer_plans.updated_by"];
        };
        body: {
          /** insurance_offer_plans */
          insurance_offer_plans?: definitions["insurance_offer_plans"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/res_currencies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.res_currencies.id"];
          created_at?: parameters["rowFilter.res_currencies.created_at"];
          updated_at?: parameters["rowFilter.res_currencies.updated_at"];
          name?: parameters["rowFilter.res_currencies.name"];
          symbol?: parameters["rowFilter.res_currencies.symbol"];
          decimal_places?: parameters["rowFilter.res_currencies.decimal_places"];
          position?: parameters["rowFilter.res_currencies.position"];
          currency_unit_label?: parameters["rowFilter.res_currencies.currency_unit_label"];
          rounding?: parameters["rowFilter.res_currencies.rounding"];
          active?: parameters["rowFilter.res_currencies.active"];
          full_name?: parameters["rowFilter.res_currencies.full_name"];
          currency_subunit_label?: parameters["rowFilter.res_currencies.currency_subunit_label"];
          updated_by?: parameters["rowFilter.res_currencies.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["res_currencies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** res_currencies */
          res_currencies?: definitions["res_currencies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.res_currencies.id"];
          created_at?: parameters["rowFilter.res_currencies.created_at"];
          updated_at?: parameters["rowFilter.res_currencies.updated_at"];
          name?: parameters["rowFilter.res_currencies.name"];
          symbol?: parameters["rowFilter.res_currencies.symbol"];
          decimal_places?: parameters["rowFilter.res_currencies.decimal_places"];
          position?: parameters["rowFilter.res_currencies.position"];
          currency_unit_label?: parameters["rowFilter.res_currencies.currency_unit_label"];
          rounding?: parameters["rowFilter.res_currencies.rounding"];
          active?: parameters["rowFilter.res_currencies.active"];
          full_name?: parameters["rowFilter.res_currencies.full_name"];
          currency_subunit_label?: parameters["rowFilter.res_currencies.currency_subunit_label"];
          updated_by?: parameters["rowFilter.res_currencies.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.res_currencies.id"];
          created_at?: parameters["rowFilter.res_currencies.created_at"];
          updated_at?: parameters["rowFilter.res_currencies.updated_at"];
          name?: parameters["rowFilter.res_currencies.name"];
          symbol?: parameters["rowFilter.res_currencies.symbol"];
          decimal_places?: parameters["rowFilter.res_currencies.decimal_places"];
          position?: parameters["rowFilter.res_currencies.position"];
          currency_unit_label?: parameters["rowFilter.res_currencies.currency_unit_label"];
          rounding?: parameters["rowFilter.res_currencies.rounding"];
          active?: parameters["rowFilter.res_currencies.active"];
          full_name?: parameters["rowFilter.res_currencies.full_name"];
          currency_subunit_label?: parameters["rowFilter.res_currencies.currency_subunit_label"];
          updated_by?: parameters["rowFilter.res_currencies.updated_by"];
        };
        body: {
          /** res_currencies */
          res_currencies?: definitions["res_currencies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/res_cities": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.res_cities.id"];
          created_at?: parameters["rowFilter.res_cities.created_at"];
          name?: parameters["rowFilter.res_cities.name"];
          city_ascii?: parameters["rowFilter.res_cities.city_ascii"];
          lat?: parameters["rowFilter.res_cities.lat"];
          lng?: parameters["rowFilter.res_cities.lng"];
          admin_name?: parameters["rowFilter.res_cities.admin_name"];
          capital?: parameters["rowFilter.res_cities.capital"];
          population?: parameters["rowFilter.res_cities.population"];
          country_id?: parameters["rowFilter.res_cities.country_id"];
          updated_at?: parameters["rowFilter.res_cities.updated_at"];
          updated_by?: parameters["rowFilter.res_cities.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["res_cities"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** res_cities */
          res_cities?: definitions["res_cities"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.res_cities.id"];
          created_at?: parameters["rowFilter.res_cities.created_at"];
          name?: parameters["rowFilter.res_cities.name"];
          city_ascii?: parameters["rowFilter.res_cities.city_ascii"];
          lat?: parameters["rowFilter.res_cities.lat"];
          lng?: parameters["rowFilter.res_cities.lng"];
          admin_name?: parameters["rowFilter.res_cities.admin_name"];
          capital?: parameters["rowFilter.res_cities.capital"];
          population?: parameters["rowFilter.res_cities.population"];
          country_id?: parameters["rowFilter.res_cities.country_id"];
          updated_at?: parameters["rowFilter.res_cities.updated_at"];
          updated_by?: parameters["rowFilter.res_cities.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.res_cities.id"];
          created_at?: parameters["rowFilter.res_cities.created_at"];
          name?: parameters["rowFilter.res_cities.name"];
          city_ascii?: parameters["rowFilter.res_cities.city_ascii"];
          lat?: parameters["rowFilter.res_cities.lat"];
          lng?: parameters["rowFilter.res_cities.lng"];
          admin_name?: parameters["rowFilter.res_cities.admin_name"];
          capital?: parameters["rowFilter.res_cities.capital"];
          population?: parameters["rowFilter.res_cities.population"];
          country_id?: parameters["rowFilter.res_cities.country_id"];
          updated_at?: parameters["rowFilter.res_cities.updated_at"];
          updated_by?: parameters["rowFilter.res_cities.updated_by"];
        };
        body: {
          /** res_cities */
          res_cities?: definitions["res_cities"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/contracts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.contracts.id"];
          created_at?: parameters["rowFilter.contracts.created_at"];
          created_by?: parameters["rowFilter.contracts.created_by"];
          owner_id?: parameters["rowFilter.contracts.owner_id"];
          updated_at?: parameters["rowFilter.contracts.updated_at"];
          duties?: parameters["rowFilter.contracts.duties"];
          responsibilities?: parameters["rowFilter.contracts.responsibilities"];
          salary?: parameters["rowFilter.contracts.salary"];
          benefits?: parameters["rowFilter.contracts.benefits"];
          probation_period?: parameters["rowFilter.contracts.probation_period"];
          date_of_start?: parameters["rowFilter.contracts.date_of_start"];
          job_title_id?: parameters["rowFilter.contracts.job_title_id"];
          retirement_age?: parameters["rowFilter.contracts.retirement_age"];
          maximum_retirement_renewal_age?: parameters["rowFilter.contracts.maximum_retirement_renewal_age"];
          work_hour_id?: parameters["rowFilter.contracts.work_hour_id"];
          insurance?: parameters["rowFilter.contracts.insurance"];
          contract_type_id?: parameters["rowFilter.contracts.contract_type_id"];
          employee_id?: parameters["rowFilter.contracts.employee_id"];
          recruitment_agencies_id?: parameters["rowFilter.contracts.recruitment_agencies_id"];
          retirement_renewal_period?: parameters["rowFilter.contracts.retirement_renewal_period"];
          updated_by?: parameters["rowFilter.contracts.updated_by"];
          compensation_type_id?: parameters["rowFilter.contracts.compensation_type_id"];
          period?: parameters["rowFilter.contracts.period"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["contracts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** contracts */
          contracts?: definitions["contracts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.contracts.id"];
          created_at?: parameters["rowFilter.contracts.created_at"];
          created_by?: parameters["rowFilter.contracts.created_by"];
          owner_id?: parameters["rowFilter.contracts.owner_id"];
          updated_at?: parameters["rowFilter.contracts.updated_at"];
          duties?: parameters["rowFilter.contracts.duties"];
          responsibilities?: parameters["rowFilter.contracts.responsibilities"];
          salary?: parameters["rowFilter.contracts.salary"];
          benefits?: parameters["rowFilter.contracts.benefits"];
          probation_period?: parameters["rowFilter.contracts.probation_period"];
          date_of_start?: parameters["rowFilter.contracts.date_of_start"];
          job_title_id?: parameters["rowFilter.contracts.job_title_id"];
          retirement_age?: parameters["rowFilter.contracts.retirement_age"];
          maximum_retirement_renewal_age?: parameters["rowFilter.contracts.maximum_retirement_renewal_age"];
          work_hour_id?: parameters["rowFilter.contracts.work_hour_id"];
          insurance?: parameters["rowFilter.contracts.insurance"];
          contract_type_id?: parameters["rowFilter.contracts.contract_type_id"];
          employee_id?: parameters["rowFilter.contracts.employee_id"];
          recruitment_agencies_id?: parameters["rowFilter.contracts.recruitment_agencies_id"];
          retirement_renewal_period?: parameters["rowFilter.contracts.retirement_renewal_period"];
          updated_by?: parameters["rowFilter.contracts.updated_by"];
          compensation_type_id?: parameters["rowFilter.contracts.compensation_type_id"];
          period?: parameters["rowFilter.contracts.period"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.contracts.id"];
          created_at?: parameters["rowFilter.contracts.created_at"];
          created_by?: parameters["rowFilter.contracts.created_by"];
          owner_id?: parameters["rowFilter.contracts.owner_id"];
          updated_at?: parameters["rowFilter.contracts.updated_at"];
          duties?: parameters["rowFilter.contracts.duties"];
          responsibilities?: parameters["rowFilter.contracts.responsibilities"];
          salary?: parameters["rowFilter.contracts.salary"];
          benefits?: parameters["rowFilter.contracts.benefits"];
          probation_period?: parameters["rowFilter.contracts.probation_period"];
          date_of_start?: parameters["rowFilter.contracts.date_of_start"];
          job_title_id?: parameters["rowFilter.contracts.job_title_id"];
          retirement_age?: parameters["rowFilter.contracts.retirement_age"];
          maximum_retirement_renewal_age?: parameters["rowFilter.contracts.maximum_retirement_renewal_age"];
          work_hour_id?: parameters["rowFilter.contracts.work_hour_id"];
          insurance?: parameters["rowFilter.contracts.insurance"];
          contract_type_id?: parameters["rowFilter.contracts.contract_type_id"];
          employee_id?: parameters["rowFilter.contracts.employee_id"];
          recruitment_agencies_id?: parameters["rowFilter.contracts.recruitment_agencies_id"];
          retirement_renewal_period?: parameters["rowFilter.contracts.retirement_renewal_period"];
          updated_by?: parameters["rowFilter.contracts.updated_by"];
          compensation_type_id?: parameters["rowFilter.contracts.compensation_type_id"];
          period?: parameters["rowFilter.contracts.period"];
        };
        body: {
          /** contracts */
          contracts?: definitions["contracts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_broker_feedback": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_broker_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_broker_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_broker_feedback.created_by"];
          broker_id?: parameters["rowFilter.join_broker_feedback.broker_id"];
          feedback_id?: parameters["rowFilter.join_broker_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_broker_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_broker_feedback.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_broker_feedback"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_broker_feedback */
          join_broker_feedback?: definitions["join_broker_feedback"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_broker_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_broker_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_broker_feedback.created_by"];
          broker_id?: parameters["rowFilter.join_broker_feedback.broker_id"];
          feedback_id?: parameters["rowFilter.join_broker_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_broker_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_broker_feedback.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_broker_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_broker_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_broker_feedback.created_by"];
          broker_id?: parameters["rowFilter.join_broker_feedback.broker_id"];
          feedback_id?: parameters["rowFilter.join_broker_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_broker_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_broker_feedback.updated_by"];
        };
        body: {
          /** join_broker_feedback */
          join_broker_feedback?: definitions["join_broker_feedback"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_bonuses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_bonuses.id"];
          created_at?: parameters["rowFilter.request_bonuses.created_at"];
          updated_at?: parameters["rowFilter.request_bonuses.updated_at"];
          created_by?: parameters["rowFilter.request_bonuses.created_by"];
          notes?: parameters["rowFilter.request_bonuses.notes"];
          owner_id?: parameters["rowFilter.request_bonuses.owner_id"];
          title?: parameters["rowFilter.request_bonuses.title"];
          type?: parameters["rowFilter.request_bonuses.type"];
          updated_by?: parameters["rowFilter.request_bonuses.updated_by"];
          status?: parameters["rowFilter.request_bonuses.status"];
          bonus_type_id?: parameters["rowFilter.request_bonuses.bonus_type_id"];
          bank_account_id?: parameters["rowFilter.request_bonuses.bank_account_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_bonuses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_bonuses */
          request_bonuses?: definitions["request_bonuses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_bonuses.id"];
          created_at?: parameters["rowFilter.request_bonuses.created_at"];
          updated_at?: parameters["rowFilter.request_bonuses.updated_at"];
          created_by?: parameters["rowFilter.request_bonuses.created_by"];
          notes?: parameters["rowFilter.request_bonuses.notes"];
          owner_id?: parameters["rowFilter.request_bonuses.owner_id"];
          title?: parameters["rowFilter.request_bonuses.title"];
          type?: parameters["rowFilter.request_bonuses.type"];
          updated_by?: parameters["rowFilter.request_bonuses.updated_by"];
          status?: parameters["rowFilter.request_bonuses.status"];
          bonus_type_id?: parameters["rowFilter.request_bonuses.bonus_type_id"];
          bank_account_id?: parameters["rowFilter.request_bonuses.bank_account_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_bonuses.id"];
          created_at?: parameters["rowFilter.request_bonuses.created_at"];
          updated_at?: parameters["rowFilter.request_bonuses.updated_at"];
          created_by?: parameters["rowFilter.request_bonuses.created_by"];
          notes?: parameters["rowFilter.request_bonuses.notes"];
          owner_id?: parameters["rowFilter.request_bonuses.owner_id"];
          title?: parameters["rowFilter.request_bonuses.title"];
          type?: parameters["rowFilter.request_bonuses.type"];
          updated_by?: parameters["rowFilter.request_bonuses.updated_by"];
          status?: parameters["rowFilter.request_bonuses.status"];
          bonus_type_id?: parameters["rowFilter.request_bonuses.bonus_type_id"];
          bank_account_id?: parameters["rowFilter.request_bonuses.bank_account_id"];
        };
        body: {
          /** request_bonuses */
          request_bonuses?: definitions["request_bonuses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/allowances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.allowances.id"];
          created_at?: parameters["rowFilter.allowances.created_at"];
          updated_at?: parameters["rowFilter.allowances.updated_at"];
          created_by?: parameters["rowFilter.allowances.created_by"];
          notes?: parameters["rowFilter.allowances.notes"];
          owner_id?: parameters["rowFilter.allowances.owner_id"];
          suggested_amount?: parameters["rowFilter.allowances.suggested_amount"];
          request_allowances_id?: parameters["rowFilter.allowances.request_allowances_id"];
          employee_id?: parameters["rowFilter.allowances.employee_id"];
          allowance_type_id?: parameters["rowFilter.allowances.allowance_type_id"];
          date_of_received?: parameters["rowFilter.allowances.date_of_received"];
          bank_account_id?: parameters["rowFilter.allowances.bank_account_id"];
          updated_by?: parameters["rowFilter.allowances.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["allowances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** allowances */
          allowances?: definitions["allowances"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.allowances.id"];
          created_at?: parameters["rowFilter.allowances.created_at"];
          updated_at?: parameters["rowFilter.allowances.updated_at"];
          created_by?: parameters["rowFilter.allowances.created_by"];
          notes?: parameters["rowFilter.allowances.notes"];
          owner_id?: parameters["rowFilter.allowances.owner_id"];
          suggested_amount?: parameters["rowFilter.allowances.suggested_amount"];
          request_allowances_id?: parameters["rowFilter.allowances.request_allowances_id"];
          employee_id?: parameters["rowFilter.allowances.employee_id"];
          allowance_type_id?: parameters["rowFilter.allowances.allowance_type_id"];
          date_of_received?: parameters["rowFilter.allowances.date_of_received"];
          bank_account_id?: parameters["rowFilter.allowances.bank_account_id"];
          updated_by?: parameters["rowFilter.allowances.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.allowances.id"];
          created_at?: parameters["rowFilter.allowances.created_at"];
          updated_at?: parameters["rowFilter.allowances.updated_at"];
          created_by?: parameters["rowFilter.allowances.created_by"];
          notes?: parameters["rowFilter.allowances.notes"];
          owner_id?: parameters["rowFilter.allowances.owner_id"];
          suggested_amount?: parameters["rowFilter.allowances.suggested_amount"];
          request_allowances_id?: parameters["rowFilter.allowances.request_allowances_id"];
          employee_id?: parameters["rowFilter.allowances.employee_id"];
          allowance_type_id?: parameters["rowFilter.allowances.allowance_type_id"];
          date_of_received?: parameters["rowFilter.allowances.date_of_received"];
          bank_account_id?: parameters["rowFilter.allowances.bank_account_id"];
          updated_by?: parameters["rowFilter.allowances.updated_by"];
        };
        body: {
          /** allowances */
          allowances?: definitions["allowances"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_retirement_age_extensions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_retirement_age_extensions.id"];
          created_at?: parameters["rowFilter.request_retirement_age_extensions.created_at"];
          updated_at?: parameters["rowFilter.request_retirement_age_extensions.updated_at"];
          created_by?: parameters["rowFilter.request_retirement_age_extensions.created_by"];
          notes?: parameters["rowFilter.request_retirement_age_extensions.notes"];
          owner_id?: parameters["rowFilter.request_retirement_age_extensions.owner_id"];
          title?: parameters["rowFilter.request_retirement_age_extensions.title"];
          type?: parameters["rowFilter.request_retirement_age_extensions.type"];
          updated_by?: parameters["rowFilter.request_retirement_age_extensions.updated_by"];
          status?: parameters["rowFilter.request_retirement_age_extensions.status"];
          survey_answer_id?: parameters["rowFilter.request_retirement_age_extensions.survey_answer_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_retirement_age_extensions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_retirement_age_extensions */
          request_retirement_age_extensions?: definitions["request_retirement_age_extensions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_retirement_age_extensions.id"];
          created_at?: parameters["rowFilter.request_retirement_age_extensions.created_at"];
          updated_at?: parameters["rowFilter.request_retirement_age_extensions.updated_at"];
          created_by?: parameters["rowFilter.request_retirement_age_extensions.created_by"];
          notes?: parameters["rowFilter.request_retirement_age_extensions.notes"];
          owner_id?: parameters["rowFilter.request_retirement_age_extensions.owner_id"];
          title?: parameters["rowFilter.request_retirement_age_extensions.title"];
          type?: parameters["rowFilter.request_retirement_age_extensions.type"];
          updated_by?: parameters["rowFilter.request_retirement_age_extensions.updated_by"];
          status?: parameters["rowFilter.request_retirement_age_extensions.status"];
          survey_answer_id?: parameters["rowFilter.request_retirement_age_extensions.survey_answer_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_retirement_age_extensions.id"];
          created_at?: parameters["rowFilter.request_retirement_age_extensions.created_at"];
          updated_at?: parameters["rowFilter.request_retirement_age_extensions.updated_at"];
          created_by?: parameters["rowFilter.request_retirement_age_extensions.created_by"];
          notes?: parameters["rowFilter.request_retirement_age_extensions.notes"];
          owner_id?: parameters["rowFilter.request_retirement_age_extensions.owner_id"];
          title?: parameters["rowFilter.request_retirement_age_extensions.title"];
          type?: parameters["rowFilter.request_retirement_age_extensions.type"];
          updated_by?: parameters["rowFilter.request_retirement_age_extensions.updated_by"];
          status?: parameters["rowFilter.request_retirement_age_extensions.status"];
          survey_answer_id?: parameters["rowFilter.request_retirement_age_extensions.survey_answer_id"];
        };
        body: {
          /** request_retirement_age_extensions */
          request_retirement_age_extensions?: definitions["request_retirement_age_extensions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_entity_employees": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_entity_employees.created_at"];
          updated_at?: parameters["rowFilter.join_entity_employees.updated_at"];
          created_by?: parameters["rowFilter.join_entity_employees.created_by"];
          employee_id?: parameters["rowFilter.join_entity_employees.employee_id"];
          entity_id?: parameters["rowFilter.join_entity_employees.entity_id"];
          owner_id?: parameters["rowFilter.join_entity_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_entity_employees.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_entity_employees"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_entity_employees */
          join_entity_employees?: definitions["join_entity_employees"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_entity_employees.created_at"];
          updated_at?: parameters["rowFilter.join_entity_employees.updated_at"];
          created_by?: parameters["rowFilter.join_entity_employees.created_by"];
          employee_id?: parameters["rowFilter.join_entity_employees.employee_id"];
          entity_id?: parameters["rowFilter.join_entity_employees.entity_id"];
          owner_id?: parameters["rowFilter.join_entity_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_entity_employees.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_entity_employees.created_at"];
          updated_at?: parameters["rowFilter.join_entity_employees.updated_at"];
          created_by?: parameters["rowFilter.join_entity_employees.created_by"];
          employee_id?: parameters["rowFilter.join_entity_employees.employee_id"];
          entity_id?: parameters["rowFilter.join_entity_employees.entity_id"];
          owner_id?: parameters["rowFilter.join_entity_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_entity_employees.updated_by"];
        };
        body: {
          /** join_entity_employees */
          join_entity_employees?: definitions["join_entity_employees"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_salary_raises": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_salary_raises.id"];
          created_at?: parameters["rowFilter.request_salary_raises.created_at"];
          updated_at?: parameters["rowFilter.request_salary_raises.updated_at"];
          created_by?: parameters["rowFilter.request_salary_raises.created_by"];
          notes?: parameters["rowFilter.request_salary_raises.notes"];
          owner_id?: parameters["rowFilter.request_salary_raises.owner_id"];
          title?: parameters["rowFilter.request_salary_raises.title"];
          type?: parameters["rowFilter.request_salary_raises.type"];
          updated_by?: parameters["rowFilter.request_salary_raises.updated_by"];
          status?: parameters["rowFilter.request_salary_raises.status"];
          reasons?: parameters["rowFilter.request_salary_raises.reasons"];
          amount?: parameters["rowFilter.request_salary_raises.amount"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_salary_raises"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_salary_raises */
          request_salary_raises?: definitions["request_salary_raises"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_salary_raises.id"];
          created_at?: parameters["rowFilter.request_salary_raises.created_at"];
          updated_at?: parameters["rowFilter.request_salary_raises.updated_at"];
          created_by?: parameters["rowFilter.request_salary_raises.created_by"];
          notes?: parameters["rowFilter.request_salary_raises.notes"];
          owner_id?: parameters["rowFilter.request_salary_raises.owner_id"];
          title?: parameters["rowFilter.request_salary_raises.title"];
          type?: parameters["rowFilter.request_salary_raises.type"];
          updated_by?: parameters["rowFilter.request_salary_raises.updated_by"];
          status?: parameters["rowFilter.request_salary_raises.status"];
          reasons?: parameters["rowFilter.request_salary_raises.reasons"];
          amount?: parameters["rowFilter.request_salary_raises.amount"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_salary_raises.id"];
          created_at?: parameters["rowFilter.request_salary_raises.created_at"];
          updated_at?: parameters["rowFilter.request_salary_raises.updated_at"];
          created_by?: parameters["rowFilter.request_salary_raises.created_by"];
          notes?: parameters["rowFilter.request_salary_raises.notes"];
          owner_id?: parameters["rowFilter.request_salary_raises.owner_id"];
          title?: parameters["rowFilter.request_salary_raises.title"];
          type?: parameters["rowFilter.request_salary_raises.type"];
          updated_by?: parameters["rowFilter.request_salary_raises.updated_by"];
          status?: parameters["rowFilter.request_salary_raises.status"];
          reasons?: parameters["rowFilter.request_salary_raises.reasons"];
          amount?: parameters["rowFilter.request_salary_raises.amount"];
        };
        body: {
          /** request_salary_raises */
          request_salary_raises?: definitions["request_salary_raises"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_offer_plan_providers": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_offer_plan_providers.created_at"];
          updated_at?: parameters["rowFilter.join_offer_plan_providers.updated_at"];
          created_by?: parameters["rowFilter.join_offer_plan_providers.created_by"];
          insurance_offer_plan_id?: parameters["rowFilter.join_offer_plan_providers.insurance_offer_plan_id"];
          healthcare_service_provider_id?: parameters["rowFilter.join_offer_plan_providers.healthcare_service_provider_id"];
          owner_id?: parameters["rowFilter.join_offer_plan_providers.owner_id"];
          updated_by?: parameters["rowFilter.join_offer_plan_providers.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_offer_plan_providers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_offer_plan_providers */
          join_offer_plan_providers?: definitions["join_offer_plan_providers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_offer_plan_providers.created_at"];
          updated_at?: parameters["rowFilter.join_offer_plan_providers.updated_at"];
          created_by?: parameters["rowFilter.join_offer_plan_providers.created_by"];
          insurance_offer_plan_id?: parameters["rowFilter.join_offer_plan_providers.insurance_offer_plan_id"];
          healthcare_service_provider_id?: parameters["rowFilter.join_offer_plan_providers.healthcare_service_provider_id"];
          owner_id?: parameters["rowFilter.join_offer_plan_providers.owner_id"];
          updated_by?: parameters["rowFilter.join_offer_plan_providers.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_offer_plan_providers.created_at"];
          updated_at?: parameters["rowFilter.join_offer_plan_providers.updated_at"];
          created_by?: parameters["rowFilter.join_offer_plan_providers.created_by"];
          insurance_offer_plan_id?: parameters["rowFilter.join_offer_plan_providers.insurance_offer_plan_id"];
          healthcare_service_provider_id?: parameters["rowFilter.join_offer_plan_providers.healthcare_service_provider_id"];
          owner_id?: parameters["rowFilter.join_offer_plan_providers.owner_id"];
          updated_by?: parameters["rowFilter.join_offer_plan_providers.updated_by"];
        };
        body: {
          /** join_offer_plan_providers */
          join_offer_plan_providers?: definitions["join_offer_plan_providers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_role_employees": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_role_employees.created_at"];
          updated_at?: parameters["rowFilter.join_role_employees.updated_at"];
          created_by?: parameters["rowFilter.join_role_employees.created_by"];
          employee_id?: parameters["rowFilter.join_role_employees.employee_id"];
          role_id?: parameters["rowFilter.join_role_employees.role_id"];
          owner_id?: parameters["rowFilter.join_role_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_role_employees.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_role_employees"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_role_employees */
          join_role_employees?: definitions["join_role_employees"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_role_employees.created_at"];
          updated_at?: parameters["rowFilter.join_role_employees.updated_at"];
          created_by?: parameters["rowFilter.join_role_employees.created_by"];
          employee_id?: parameters["rowFilter.join_role_employees.employee_id"];
          role_id?: parameters["rowFilter.join_role_employees.role_id"];
          owner_id?: parameters["rowFilter.join_role_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_role_employees.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_role_employees.created_at"];
          updated_at?: parameters["rowFilter.join_role_employees.updated_at"];
          created_by?: parameters["rowFilter.join_role_employees.created_by"];
          employee_id?: parameters["rowFilter.join_role_employees.employee_id"];
          role_id?: parameters["rowFilter.join_role_employees.role_id"];
          owner_id?: parameters["rowFilter.join_role_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_role_employees.updated_by"];
        };
        body: {
          /** join_role_employees */
          join_role_employees?: definitions["join_role_employees"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_training_trainers": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_training_trainers.created_at"];
          created_by?: parameters["rowFilter.join_training_trainers.created_by"];
          owner_id?: parameters["rowFilter.join_training_trainers.owner_id"];
          updated_at?: parameters["rowFilter.join_training_trainers.updated_at"];
          employee_id?: parameters["rowFilter.join_training_trainers.employee_id"];
          training_id?: parameters["rowFilter.join_training_trainers.training_id"];
          updated_by?: parameters["rowFilter.join_training_trainers.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_training_trainers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_training_trainers */
          join_training_trainers?: definitions["join_training_trainers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_training_trainers.created_at"];
          created_by?: parameters["rowFilter.join_training_trainers.created_by"];
          owner_id?: parameters["rowFilter.join_training_trainers.owner_id"];
          updated_at?: parameters["rowFilter.join_training_trainers.updated_at"];
          employee_id?: parameters["rowFilter.join_training_trainers.employee_id"];
          training_id?: parameters["rowFilter.join_training_trainers.training_id"];
          updated_by?: parameters["rowFilter.join_training_trainers.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_training_trainers.created_at"];
          created_by?: parameters["rowFilter.join_training_trainers.created_by"];
          owner_id?: parameters["rowFilter.join_training_trainers.owner_id"];
          updated_at?: parameters["rowFilter.join_training_trainers.updated_at"];
          employee_id?: parameters["rowFilter.join_training_trainers.employee_id"];
          training_id?: parameters["rowFilter.join_training_trainers.training_id"];
          updated_by?: parameters["rowFilter.join_training_trainers.updated_by"];
        };
        body: {
          /** join_training_trainers */
          join_training_trainers?: definitions["join_training_trainers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/health_reports": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.health_reports.id"];
          created_at?: parameters["rowFilter.health_reports.created_at"];
          created_by?: parameters["rowFilter.health_reports.created_by"];
          owner_id?: parameters["rowFilter.health_reports.owner_id"];
          updated_at?: parameters["rowFilter.health_reports.updated_at"];
          year?: parameters["rowFilter.health_reports.year"];
          answers?: parameters["rowFilter.health_reports.answers"];
          updated_by?: parameters["rowFilter.health_reports.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["health_reports"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** health_reports */
          health_reports?: definitions["health_reports"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.health_reports.id"];
          created_at?: parameters["rowFilter.health_reports.created_at"];
          created_by?: parameters["rowFilter.health_reports.created_by"];
          owner_id?: parameters["rowFilter.health_reports.owner_id"];
          updated_at?: parameters["rowFilter.health_reports.updated_at"];
          year?: parameters["rowFilter.health_reports.year"];
          answers?: parameters["rowFilter.health_reports.answers"];
          updated_by?: parameters["rowFilter.health_reports.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.health_reports.id"];
          created_at?: parameters["rowFilter.health_reports.created_at"];
          created_by?: parameters["rowFilter.health_reports.created_by"];
          owner_id?: parameters["rowFilter.health_reports.owner_id"];
          updated_at?: parameters["rowFilter.health_reports.updated_at"];
          year?: parameters["rowFilter.health_reports.year"];
          answers?: parameters["rowFilter.health_reports.answers"];
          updated_by?: parameters["rowFilter.health_reports.updated_by"];
        };
        body: {
          /** health_reports */
          health_reports?: definitions["health_reports"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_factory_feedback": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_factory_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_factory_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_factory_feedback.created_by"];
          factory_id?: parameters["rowFilter.join_factory_feedback.factory_id"];
          feedback_id?: parameters["rowFilter.join_factory_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_factory_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_factory_feedback.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_factory_feedback"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_factory_feedback */
          join_factory_feedback?: definitions["join_factory_feedback"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_factory_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_factory_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_factory_feedback.created_by"];
          factory_id?: parameters["rowFilter.join_factory_feedback.factory_id"];
          feedback_id?: parameters["rowFilter.join_factory_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_factory_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_factory_feedback.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_factory_feedback.created_at"];
          updated_at?: parameters["rowFilter.join_factory_feedback.updated_at"];
          created_by?: parameters["rowFilter.join_factory_feedback.created_by"];
          factory_id?: parameters["rowFilter.join_factory_feedback.factory_id"];
          feedback_id?: parameters["rowFilter.join_factory_feedback.feedback_id"];
          owner_id?: parameters["rowFilter.join_factory_feedback.owner_id"];
          updated_by?: parameters["rowFilter.join_factory_feedback.updated_by"];
        };
        body: {
          /** join_factory_feedback */
          join_factory_feedback?: definitions["join_factory_feedback"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/employees": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.employees.id"];
          updated_at?: parameters["rowFilter.employees.updated_at"];
          username?: parameters["rowFilter.employees.username"];
          full_name?: parameters["rowFilter.employees.full_name"];
          phone?: parameters["rowFilter.employees.phone"];
          date_of_birth?: parameters["rowFilter.employees.date_of_birth"];
          gender?: parameters["rowFilter.employees.gender"];
          country_of_birth_id?: parameters["rowFilter.employees.country_of_birth_id"];
          image_id?: parameters["rowFilter.employees.image_id"];
          created_at?: parameters["rowFilter.employees.created_at"];
          preferences?: parameters["rowFilter.employees.preferences"];
          date_of_hiring?: parameters["rowFilter.employees.date_of_hiring"];
          city_of_birth_id?: parameters["rowFilter.employees.city_of_birth_id"];
          sponsor_id?: parameters["rowFilter.employees.sponsor_id"];
          date_of_termination?: parameters["rowFilter.employees.date_of_termination"];
          insurance_plan_id?: parameters["rowFilter.employees.insurance_plan_id"];
          country_id?: parameters["rowFilter.employees.country_id"];
          city_id?: parameters["rowFilter.employees.city_id"];
          street?: parameters["rowFilter.employees.street"];
          building?: parameters["rowFilter.employees.building"];
          landmark?: parameters["rowFilter.employees.landmark"];
          updated_by?: parameters["rowFilter.employees.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["employees"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** employees */
          employees?: definitions["employees"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.employees.id"];
          updated_at?: parameters["rowFilter.employees.updated_at"];
          username?: parameters["rowFilter.employees.username"];
          full_name?: parameters["rowFilter.employees.full_name"];
          phone?: parameters["rowFilter.employees.phone"];
          date_of_birth?: parameters["rowFilter.employees.date_of_birth"];
          gender?: parameters["rowFilter.employees.gender"];
          country_of_birth_id?: parameters["rowFilter.employees.country_of_birth_id"];
          image_id?: parameters["rowFilter.employees.image_id"];
          created_at?: parameters["rowFilter.employees.created_at"];
          preferences?: parameters["rowFilter.employees.preferences"];
          date_of_hiring?: parameters["rowFilter.employees.date_of_hiring"];
          city_of_birth_id?: parameters["rowFilter.employees.city_of_birth_id"];
          sponsor_id?: parameters["rowFilter.employees.sponsor_id"];
          date_of_termination?: parameters["rowFilter.employees.date_of_termination"];
          insurance_plan_id?: parameters["rowFilter.employees.insurance_plan_id"];
          country_id?: parameters["rowFilter.employees.country_id"];
          city_id?: parameters["rowFilter.employees.city_id"];
          street?: parameters["rowFilter.employees.street"];
          building?: parameters["rowFilter.employees.building"];
          landmark?: parameters["rowFilter.employees.landmark"];
          updated_by?: parameters["rowFilter.employees.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.employees.id"];
          updated_at?: parameters["rowFilter.employees.updated_at"];
          username?: parameters["rowFilter.employees.username"];
          full_name?: parameters["rowFilter.employees.full_name"];
          phone?: parameters["rowFilter.employees.phone"];
          date_of_birth?: parameters["rowFilter.employees.date_of_birth"];
          gender?: parameters["rowFilter.employees.gender"];
          country_of_birth_id?: parameters["rowFilter.employees.country_of_birth_id"];
          image_id?: parameters["rowFilter.employees.image_id"];
          created_at?: parameters["rowFilter.employees.created_at"];
          preferences?: parameters["rowFilter.employees.preferences"];
          date_of_hiring?: parameters["rowFilter.employees.date_of_hiring"];
          city_of_birth_id?: parameters["rowFilter.employees.city_of_birth_id"];
          sponsor_id?: parameters["rowFilter.employees.sponsor_id"];
          date_of_termination?: parameters["rowFilter.employees.date_of_termination"];
          insurance_plan_id?: parameters["rowFilter.employees.insurance_plan_id"];
          country_id?: parameters["rowFilter.employees.country_id"];
          city_id?: parameters["rowFilter.employees.city_id"];
          street?: parameters["rowFilter.employees.street"];
          building?: parameters["rowFilter.employees.building"];
          landmark?: parameters["rowFilter.employees.landmark"];
          updated_by?: parameters["rowFilter.employees.updated_by"];
        };
        body: {
          /** employees */
          employees?: definitions["employees"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/bonuses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.bonuses.id"];
          created_at?: parameters["rowFilter.bonuses.created_at"];
          created_by?: parameters["rowFilter.bonuses.created_by"];
          owner_id?: parameters["rowFilter.bonuses.owner_id"];
          updated_at?: parameters["rowFilter.bonuses.updated_at"];
          amount?: parameters["rowFilter.bonuses.amount"];
          reason?: parameters["rowFilter.bonuses.reason"];
          employee_id?: parameters["rowFilter.bonuses.employee_id"];
          note?: parameters["rowFilter.bonuses.note"];
          bonus_request_id?: parameters["rowFilter.bonuses.bonus_request_id"];
          bonus_type_id?: parameters["rowFilter.bonuses.bonus_type_id"];
          bank_account_id?: parameters["rowFilter.bonuses.bank_account_id"];
          updated_by?: parameters["rowFilter.bonuses.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["bonuses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** bonuses */
          bonuses?: definitions["bonuses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.bonuses.id"];
          created_at?: parameters["rowFilter.bonuses.created_at"];
          created_by?: parameters["rowFilter.bonuses.created_by"];
          owner_id?: parameters["rowFilter.bonuses.owner_id"];
          updated_at?: parameters["rowFilter.bonuses.updated_at"];
          amount?: parameters["rowFilter.bonuses.amount"];
          reason?: parameters["rowFilter.bonuses.reason"];
          employee_id?: parameters["rowFilter.bonuses.employee_id"];
          note?: parameters["rowFilter.bonuses.note"];
          bonus_request_id?: parameters["rowFilter.bonuses.bonus_request_id"];
          bonus_type_id?: parameters["rowFilter.bonuses.bonus_type_id"];
          bank_account_id?: parameters["rowFilter.bonuses.bank_account_id"];
          updated_by?: parameters["rowFilter.bonuses.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.bonuses.id"];
          created_at?: parameters["rowFilter.bonuses.created_at"];
          created_by?: parameters["rowFilter.bonuses.created_by"];
          owner_id?: parameters["rowFilter.bonuses.owner_id"];
          updated_at?: parameters["rowFilter.bonuses.updated_at"];
          amount?: parameters["rowFilter.bonuses.amount"];
          reason?: parameters["rowFilter.bonuses.reason"];
          employee_id?: parameters["rowFilter.bonuses.employee_id"];
          note?: parameters["rowFilter.bonuses.note"];
          bonus_request_id?: parameters["rowFilter.bonuses.bonus_request_id"];
          bonus_type_id?: parameters["rowFilter.bonuses.bonus_type_id"];
          bank_account_id?: parameters["rowFilter.bonuses.bank_account_id"];
          updated_by?: parameters["rowFilter.bonuses.updated_by"];
        };
        body: {
          /** bonuses */
          bonuses?: definitions["bonuses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/health_conditions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.health_conditions.id"];
          created_at?: parameters["rowFilter.health_conditions.created_at"];
          updated_at?: parameters["rowFilter.health_conditions.updated_at"];
          created_by?: parameters["rowFilter.health_conditions.created_by"];
          name?: parameters["rowFilter.health_conditions.name"];
          owner_id?: parameters["rowFilter.health_conditions.owner_id"];
          health_condition_type_id?: parameters["rowFilter.health_conditions.health_condition_type_id"];
          updated_by?: parameters["rowFilter.health_conditions.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["health_conditions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** health_conditions */
          health_conditions?: definitions["health_conditions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.health_conditions.id"];
          created_at?: parameters["rowFilter.health_conditions.created_at"];
          updated_at?: parameters["rowFilter.health_conditions.updated_at"];
          created_by?: parameters["rowFilter.health_conditions.created_by"];
          name?: parameters["rowFilter.health_conditions.name"];
          owner_id?: parameters["rowFilter.health_conditions.owner_id"];
          health_condition_type_id?: parameters["rowFilter.health_conditions.health_condition_type_id"];
          updated_by?: parameters["rowFilter.health_conditions.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.health_conditions.id"];
          created_at?: parameters["rowFilter.health_conditions.created_at"];
          updated_at?: parameters["rowFilter.health_conditions.updated_at"];
          created_by?: parameters["rowFilter.health_conditions.created_by"];
          name?: parameters["rowFilter.health_conditions.name"];
          owner_id?: parameters["rowFilter.health_conditions.owner_id"];
          health_condition_type_id?: parameters["rowFilter.health_conditions.health_condition_type_id"];
          updated_by?: parameters["rowFilter.health_conditions.updated_by"];
        };
        body: {
          /** health_conditions */
          health_conditions?: definitions["health_conditions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_relative_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_relative_documents.created_at"];
          updated_at?: parameters["rowFilter.join_relative_documents.updated_at"];
          created_by?: parameters["rowFilter.join_relative_documents.created_by"];
          relative_id?: parameters["rowFilter.join_relative_documents.relative_id"];
          image_id?: parameters["rowFilter.join_relative_documents.image_id"];
          owner_id?: parameters["rowFilter.join_relative_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_relative_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_relative_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_relative_documents */
          join_relative_documents?: definitions["join_relative_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_relative_documents.created_at"];
          updated_at?: parameters["rowFilter.join_relative_documents.updated_at"];
          created_by?: parameters["rowFilter.join_relative_documents.created_by"];
          relative_id?: parameters["rowFilter.join_relative_documents.relative_id"];
          image_id?: parameters["rowFilter.join_relative_documents.image_id"];
          owner_id?: parameters["rowFilter.join_relative_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_relative_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_relative_documents.created_at"];
          updated_at?: parameters["rowFilter.join_relative_documents.updated_at"];
          created_by?: parameters["rowFilter.join_relative_documents.created_by"];
          relative_id?: parameters["rowFilter.join_relative_documents.relative_id"];
          image_id?: parameters["rowFilter.join_relative_documents.image_id"];
          owner_id?: parameters["rowFilter.join_relative_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_relative_documents.updated_by"];
        };
        body: {
          /** join_relative_documents */
          join_relative_documents?: definitions["join_relative_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_health_condition_medications": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_health_condition_medications.created_at"];
          updated_at?: parameters["rowFilter.join_health_condition_medications.updated_at"];
          created_by?: parameters["rowFilter.join_health_condition_medications.created_by"];
          condition_id?: parameters["rowFilter.join_health_condition_medications.condition_id"];
          medication_id?: parameters["rowFilter.join_health_condition_medications.medication_id"];
          owner_id?: parameters["rowFilter.join_health_condition_medications.owner_id"];
          updated_by?: parameters["rowFilter.join_health_condition_medications.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_health_condition_medications"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_health_condition_medications */
          join_health_condition_medications?: definitions["join_health_condition_medications"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_health_condition_medications.created_at"];
          updated_at?: parameters["rowFilter.join_health_condition_medications.updated_at"];
          created_by?: parameters["rowFilter.join_health_condition_medications.created_by"];
          condition_id?: parameters["rowFilter.join_health_condition_medications.condition_id"];
          medication_id?: parameters["rowFilter.join_health_condition_medications.medication_id"];
          owner_id?: parameters["rowFilter.join_health_condition_medications.owner_id"];
          updated_by?: parameters["rowFilter.join_health_condition_medications.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_health_condition_medications.created_at"];
          updated_at?: parameters["rowFilter.join_health_condition_medications.updated_at"];
          created_by?: parameters["rowFilter.join_health_condition_medications.created_by"];
          condition_id?: parameters["rowFilter.join_health_condition_medications.condition_id"];
          medication_id?: parameters["rowFilter.join_health_condition_medications.medication_id"];
          owner_id?: parameters["rowFilter.join_health_condition_medications.owner_id"];
          updated_by?: parameters["rowFilter.join_health_condition_medications.updated_by"];
        };
        body: {
          /** join_health_condition_medications */
          join_health_condition_medications?: definitions["join_health_condition_medications"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_provider_type": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_provider_type.created_at"];
          updated_at?: parameters["rowFilter.join_provider_type.updated_at"];
          created_by?: parameters["rowFilter.join_provider_type.created_by"];
          healthcare_provider_id?: parameters["rowFilter.join_provider_type.healthcare_provider_id"];
          owner_id?: parameters["rowFilter.join_provider_type.owner_id"];
          healthcare_type_id?: parameters["rowFilter.join_provider_type.healthcare_type_id"];
          updated_by?: parameters["rowFilter.join_provider_type.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_provider_type"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_provider_type */
          join_provider_type?: definitions["join_provider_type"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_provider_type.created_at"];
          updated_at?: parameters["rowFilter.join_provider_type.updated_at"];
          created_by?: parameters["rowFilter.join_provider_type.created_by"];
          healthcare_provider_id?: parameters["rowFilter.join_provider_type.healthcare_provider_id"];
          owner_id?: parameters["rowFilter.join_provider_type.owner_id"];
          healthcare_type_id?: parameters["rowFilter.join_provider_type.healthcare_type_id"];
          updated_by?: parameters["rowFilter.join_provider_type.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_provider_type.created_at"];
          updated_at?: parameters["rowFilter.join_provider_type.updated_at"];
          created_by?: parameters["rowFilter.join_provider_type.created_by"];
          healthcare_provider_id?: parameters["rowFilter.join_provider_type.healthcare_provider_id"];
          owner_id?: parameters["rowFilter.join_provider_type.owner_id"];
          healthcare_type_id?: parameters["rowFilter.join_provider_type.healthcare_type_id"];
          updated_by?: parameters["rowFilter.join_provider_type.updated_by"];
        };
        body: {
          /** join_provider_type */
          join_provider_type?: definitions["join_provider_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/spouses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.spouses.id"];
          created_at?: parameters["rowFilter.spouses.created_at"];
          updated_at?: parameters["rowFilter.spouses.updated_at"];
          created_by?: parameters["rowFilter.spouses.created_by"];
          name?: parameters["rowFilter.spouses.name"];
          date_of_birth?: parameters["rowFilter.spouses.date_of_birth"];
          owner_id?: parameters["rowFilter.spouses.owner_id"];
          type?: parameters["rowFilter.spouses.type"];
          updated_by?: parameters["rowFilter.spouses.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["spouses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** spouses */
          spouses?: definitions["spouses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.spouses.id"];
          created_at?: parameters["rowFilter.spouses.created_at"];
          updated_at?: parameters["rowFilter.spouses.updated_at"];
          created_by?: parameters["rowFilter.spouses.created_by"];
          name?: parameters["rowFilter.spouses.name"];
          date_of_birth?: parameters["rowFilter.spouses.date_of_birth"];
          owner_id?: parameters["rowFilter.spouses.owner_id"];
          type?: parameters["rowFilter.spouses.type"];
          updated_by?: parameters["rowFilter.spouses.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.spouses.id"];
          created_at?: parameters["rowFilter.spouses.created_at"];
          updated_at?: parameters["rowFilter.spouses.updated_at"];
          created_by?: parameters["rowFilter.spouses.created_by"];
          name?: parameters["rowFilter.spouses.name"];
          date_of_birth?: parameters["rowFilter.spouses.date_of_birth"];
          owner_id?: parameters["rowFilter.spouses.owner_id"];
          type?: parameters["rowFilter.spouses.type"];
          updated_by?: parameters["rowFilter.spouses.updated_by"];
        };
        body: {
          /** spouses */
          spouses?: definitions["spouses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/deductions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.deductions.id"];
          created_at?: parameters["rowFilter.deductions.created_at"];
          created_by?: parameters["rowFilter.deductions.created_by"];
          owner_id?: parameters["rowFilter.deductions.owner_id"];
          updated_at?: parameters["rowFilter.deductions.updated_at"];
          amount?: parameters["rowFilter.deductions.amount"];
          reason?: parameters["rowFilter.deductions.reason"];
          employee_id?: parameters["rowFilter.deductions.employee_id"];
          note?: parameters["rowFilter.deductions.note"];
          deduction_type_id?: parameters["rowFilter.deductions.deduction_type_id"];
          updated_by?: parameters["rowFilter.deductions.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["deductions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** deductions */
          deductions?: definitions["deductions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.deductions.id"];
          created_at?: parameters["rowFilter.deductions.created_at"];
          created_by?: parameters["rowFilter.deductions.created_by"];
          owner_id?: parameters["rowFilter.deductions.owner_id"];
          updated_at?: parameters["rowFilter.deductions.updated_at"];
          amount?: parameters["rowFilter.deductions.amount"];
          reason?: parameters["rowFilter.deductions.reason"];
          employee_id?: parameters["rowFilter.deductions.employee_id"];
          note?: parameters["rowFilter.deductions.note"];
          deduction_type_id?: parameters["rowFilter.deductions.deduction_type_id"];
          updated_by?: parameters["rowFilter.deductions.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.deductions.id"];
          created_at?: parameters["rowFilter.deductions.created_at"];
          created_by?: parameters["rowFilter.deductions.created_by"];
          owner_id?: parameters["rowFilter.deductions.owner_id"];
          updated_at?: parameters["rowFilter.deductions.updated_at"];
          amount?: parameters["rowFilter.deductions.amount"];
          reason?: parameters["rowFilter.deductions.reason"];
          employee_id?: parameters["rowFilter.deductions.employee_id"];
          note?: parameters["rowFilter.deductions.note"];
          deduction_type_id?: parameters["rowFilter.deductions.deduction_type_id"];
          updated_by?: parameters["rowFilter.deductions.updated_by"];
        };
        body: {
          /** deductions */
          deductions?: definitions["deductions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_product_warehouses": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_warehouses.created_at"];
          updated_at?: parameters["rowFilter.join_product_warehouses.updated_at"];
          created_by?: parameters["rowFilter.join_product_warehouses.created_by"];
          product_id?: parameters["rowFilter.join_product_warehouses.product_id"];
          owner_id?: parameters["rowFilter.join_product_warehouses.owner_id"];
          warehouse_id?: parameters["rowFilter.join_product_warehouses.warehouse_id"];
          updated_by?: parameters["rowFilter.join_product_warehouses.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_product_warehouses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_product_warehouses */
          join_product_warehouses?: definitions["join_product_warehouses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_warehouses.created_at"];
          updated_at?: parameters["rowFilter.join_product_warehouses.updated_at"];
          created_by?: parameters["rowFilter.join_product_warehouses.created_by"];
          product_id?: parameters["rowFilter.join_product_warehouses.product_id"];
          owner_id?: parameters["rowFilter.join_product_warehouses.owner_id"];
          warehouse_id?: parameters["rowFilter.join_product_warehouses.warehouse_id"];
          updated_by?: parameters["rowFilter.join_product_warehouses.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_warehouses.created_at"];
          updated_at?: parameters["rowFilter.join_product_warehouses.updated_at"];
          created_by?: parameters["rowFilter.join_product_warehouses.created_by"];
          product_id?: parameters["rowFilter.join_product_warehouses.product_id"];
          owner_id?: parameters["rowFilter.join_product_warehouses.owner_id"];
          warehouse_id?: parameters["rowFilter.join_product_warehouses.warehouse_id"];
          updated_by?: parameters["rowFilter.join_product_warehouses.updated_by"];
        };
        body: {
          /** join_product_warehouses */
          join_product_warehouses?: definitions["join_product_warehouses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/database_structure": {
    get: {
      parameters: {
        query: {
          table_name?: parameters["rowFilter.database_structure.table_name"];
          columns?: parameters["rowFilter.database_structure.columns"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["database_structure"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/products": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.products.id"];
          created_at?: parameters["rowFilter.products.created_at"];
          created_by?: parameters["rowFilter.products.created_by"];
          owner_id?: parameters["rowFilter.products.owner_id"];
          updated_at?: parameters["rowFilter.products.updated_at"];
          name?: parameters["rowFilter.products.name"];
          slug?: parameters["rowFilter.products.slug"];
          description?: parameters["rowFilter.products.description"];
          short_description?: parameters["rowFilter.products.short_description"];
          sku?: parameters["rowFilter.products.sku"];
          price?: parameters["rowFilter.products.price"];
          product_type_id?: parameters["rowFilter.products.product_type_id"];
          updated_by?: parameters["rowFilter.products.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["products"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** products */
          products?: definitions["products"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.products.id"];
          created_at?: parameters["rowFilter.products.created_at"];
          created_by?: parameters["rowFilter.products.created_by"];
          owner_id?: parameters["rowFilter.products.owner_id"];
          updated_at?: parameters["rowFilter.products.updated_at"];
          name?: parameters["rowFilter.products.name"];
          slug?: parameters["rowFilter.products.slug"];
          description?: parameters["rowFilter.products.description"];
          short_description?: parameters["rowFilter.products.short_description"];
          sku?: parameters["rowFilter.products.sku"];
          price?: parameters["rowFilter.products.price"];
          product_type_id?: parameters["rowFilter.products.product_type_id"];
          updated_by?: parameters["rowFilter.products.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.products.id"];
          created_at?: parameters["rowFilter.products.created_at"];
          created_by?: parameters["rowFilter.products.created_by"];
          owner_id?: parameters["rowFilter.products.owner_id"];
          updated_at?: parameters["rowFilter.products.updated_at"];
          name?: parameters["rowFilter.products.name"];
          slug?: parameters["rowFilter.products.slug"];
          description?: parameters["rowFilter.products.description"];
          short_description?: parameters["rowFilter.products.short_description"];
          sku?: parameters["rowFilter.products.sku"];
          price?: parameters["rowFilter.products.price"];
          product_type_id?: parameters["rowFilter.products.product_type_id"];
          updated_by?: parameters["rowFilter.products.updated_by"];
        };
        body: {
          /** products */
          products?: definitions["products"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_insurance_company_insurance_types": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_insurance_company_insurance_types.created_at"];
          updated_at?: parameters["rowFilter.join_insurance_company_insurance_types.updated_at"];
          created_by?: parameters["rowFilter.join_insurance_company_insurance_types.created_by"];
          insurance_company_id?: parameters["rowFilter.join_insurance_company_insurance_types.insurance_company_id"];
          owner_id?: parameters["rowFilter.join_insurance_company_insurance_types.owner_id"];
          insurance_type_id?: parameters["rowFilter.join_insurance_company_insurance_types.insurance_type_id"];
          updated_by?: parameters["rowFilter.join_insurance_company_insurance_types.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_insurance_company_insurance_types"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_insurance_company_insurance_types */
          join_insurance_company_insurance_types?: definitions["join_insurance_company_insurance_types"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_insurance_company_insurance_types.created_at"];
          updated_at?: parameters["rowFilter.join_insurance_company_insurance_types.updated_at"];
          created_by?: parameters["rowFilter.join_insurance_company_insurance_types.created_by"];
          insurance_company_id?: parameters["rowFilter.join_insurance_company_insurance_types.insurance_company_id"];
          owner_id?: parameters["rowFilter.join_insurance_company_insurance_types.owner_id"];
          insurance_type_id?: parameters["rowFilter.join_insurance_company_insurance_types.insurance_type_id"];
          updated_by?: parameters["rowFilter.join_insurance_company_insurance_types.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_insurance_company_insurance_types.created_at"];
          updated_at?: parameters["rowFilter.join_insurance_company_insurance_types.updated_at"];
          created_by?: parameters["rowFilter.join_insurance_company_insurance_types.created_by"];
          insurance_company_id?: parameters["rowFilter.join_insurance_company_insurance_types.insurance_company_id"];
          owner_id?: parameters["rowFilter.join_insurance_company_insurance_types.owner_id"];
          insurance_type_id?: parameters["rowFilter.join_insurance_company_insurance_types.insurance_type_id"];
          updated_by?: parameters["rowFilter.join_insurance_company_insurance_types.updated_by"];
        };
        body: {
          /** join_insurance_company_insurance_types */
          join_insurance_company_insurance_types?: definitions["join_insurance_company_insurance_types"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/jsonschema_validators": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.jsonschema_validators.id"];
          created_at?: parameters["rowFilter.jsonschema_validators.created_at"];
          updated_at?: parameters["rowFilter.jsonschema_validators.updated_at"];
          created_by?: parameters["rowFilter.jsonschema_validators.created_by"];
          schema?: parameters["rowFilter.jsonschema_validators.schema"];
          description?: parameters["rowFilter.jsonschema_validators.description"];
          schema_name?: parameters["rowFilter.jsonschema_validators.schema_name"];
          updated_by?: parameters["rowFilter.jsonschema_validators.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["jsonschema_validators"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** jsonschema_validators */
          jsonschema_validators?: definitions["jsonschema_validators"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.jsonschema_validators.id"];
          created_at?: parameters["rowFilter.jsonschema_validators.created_at"];
          updated_at?: parameters["rowFilter.jsonschema_validators.updated_at"];
          created_by?: parameters["rowFilter.jsonschema_validators.created_by"];
          schema?: parameters["rowFilter.jsonschema_validators.schema"];
          description?: parameters["rowFilter.jsonschema_validators.description"];
          schema_name?: parameters["rowFilter.jsonschema_validators.schema_name"];
          updated_by?: parameters["rowFilter.jsonschema_validators.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.jsonschema_validators.id"];
          created_at?: parameters["rowFilter.jsonschema_validators.created_at"];
          updated_at?: parameters["rowFilter.jsonschema_validators.updated_at"];
          created_by?: parameters["rowFilter.jsonschema_validators.created_by"];
          schema?: parameters["rowFilter.jsonschema_validators.schema"];
          description?: parameters["rowFilter.jsonschema_validators.description"];
          schema_name?: parameters["rowFilter.jsonschema_validators.schema_name"];
          updated_by?: parameters["rowFilter.jsonschema_validators.updated_by"];
        };
        body: {
          /** jsonschema_validators */
          jsonschema_validators?: definitions["jsonschema_validators"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/sponsors": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sponsors.id"];
          created_at?: parameters["rowFilter.sponsors.created_at"];
          created_by?: parameters["rowFilter.sponsors.created_by"];
          owner_id?: parameters["rowFilter.sponsors.owner_id"];
          updated_at?: parameters["rowFilter.sponsors.updated_at"];
          employee_id?: parameters["rowFilter.sponsors.employee_id"];
          entity_id?: parameters["rowFilter.sponsors.entity_id"];
          updated_by?: parameters["rowFilter.sponsors.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["sponsors"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** sponsors */
          sponsors?: definitions["sponsors"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sponsors.id"];
          created_at?: parameters["rowFilter.sponsors.created_at"];
          created_by?: parameters["rowFilter.sponsors.created_by"];
          owner_id?: parameters["rowFilter.sponsors.owner_id"];
          updated_at?: parameters["rowFilter.sponsors.updated_at"];
          employee_id?: parameters["rowFilter.sponsors.employee_id"];
          entity_id?: parameters["rowFilter.sponsors.entity_id"];
          updated_by?: parameters["rowFilter.sponsors.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sponsors.id"];
          created_at?: parameters["rowFilter.sponsors.created_at"];
          created_by?: parameters["rowFilter.sponsors.created_by"];
          owner_id?: parameters["rowFilter.sponsors.owner_id"];
          updated_at?: parameters["rowFilter.sponsors.updated_at"];
          employee_id?: parameters["rowFilter.sponsors.employee_id"];
          entity_id?: parameters["rowFilter.sponsors.entity_id"];
          updated_by?: parameters["rowFilter.sponsors.updated_by"];
        };
        body: {
          /** sponsors */
          sponsors?: definitions["sponsors"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/image_storage_view": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.image_storage_view.created_at"];
          created_by?: parameters["rowFilter.image_storage_view.created_by"];
          description?: parameters["rowFilter.image_storage_view.description"];
          id?: parameters["rowFilter.image_storage_view.id"];
          updated_at?: parameters["rowFilter.image_storage_view.updated_at"];
          updated_by?: parameters["rowFilter.image_storage_view.updated_by"];
          bucket_id?: parameters["rowFilter.image_storage_view.bucket_id"];
          last_accessed_at?: parameters["rowFilter.image_storage_view.last_accessed_at"];
          metadata?: parameters["rowFilter.image_storage_view.metadata"];
          name?: parameters["rowFilter.image_storage_view.name"];
          owner?: parameters["rowFilter.image_storage_view.owner"];
          path_tokens?: parameters["rowFilter.image_storage_view.path_tokens"];
          version?: parameters["rowFilter.image_storage_view.version"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["image_storage_view"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/attendances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.attendances.id"];
          created_at?: parameters["rowFilter.attendances.created_at"];
          created_by?: parameters["rowFilter.attendances.created_by"];
          owner_id?: parameters["rowFilter.attendances.owner_id"];
          updated_at?: parameters["rowFilter.attendances.updated_at"];
          updated_by?: parameters["rowFilter.attendances.updated_by"];
          op_time?: parameters["rowFilter.attendances.op_time"];
          operation?: parameters["rowFilter.attendances.operation"];
          location?: parameters["rowFilter.attendances.location"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["attendances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** attendances */
          attendances?: definitions["attendances"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.attendances.id"];
          created_at?: parameters["rowFilter.attendances.created_at"];
          created_by?: parameters["rowFilter.attendances.created_by"];
          owner_id?: parameters["rowFilter.attendances.owner_id"];
          updated_at?: parameters["rowFilter.attendances.updated_at"];
          updated_by?: parameters["rowFilter.attendances.updated_by"];
          op_time?: parameters["rowFilter.attendances.op_time"];
          operation?: parameters["rowFilter.attendances.operation"];
          location?: parameters["rowFilter.attendances.location"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.attendances.id"];
          created_at?: parameters["rowFilter.attendances.created_at"];
          created_by?: parameters["rowFilter.attendances.created_by"];
          owner_id?: parameters["rowFilter.attendances.owner_id"];
          updated_at?: parameters["rowFilter.attendances.updated_at"];
          updated_by?: parameters["rowFilter.attendances.updated_by"];
          op_time?: parameters["rowFilter.attendances.op_time"];
          operation?: parameters["rowFilter.attendances.operation"];
          location?: parameters["rowFilter.attendances.location"];
        };
        body: {
          /** attendances */
          attendances?: definitions["attendances"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/feedback": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.feedback.id"];
          created_at?: parameters["rowFilter.feedback.created_at"];
          created_by?: parameters["rowFilter.feedback.created_by"];
          owner_id?: parameters["rowFilter.feedback.owner_id"];
          updated_at?: parameters["rowFilter.feedback.updated_at"];
          positive_feedback?: parameters["rowFilter.feedback.positive_feedback"];
          rating?: parameters["rowFilter.feedback.rating"];
          negative_feedback?: parameters["rowFilter.feedback.negative_feedback"];
          updated_by?: parameters["rowFilter.feedback.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["feedback"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** feedback */
          feedback?: definitions["feedback"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.feedback.id"];
          created_at?: parameters["rowFilter.feedback.created_at"];
          created_by?: parameters["rowFilter.feedback.created_by"];
          owner_id?: parameters["rowFilter.feedback.owner_id"];
          updated_at?: parameters["rowFilter.feedback.updated_at"];
          positive_feedback?: parameters["rowFilter.feedback.positive_feedback"];
          rating?: parameters["rowFilter.feedback.rating"];
          negative_feedback?: parameters["rowFilter.feedback.negative_feedback"];
          updated_by?: parameters["rowFilter.feedback.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.feedback.id"];
          created_at?: parameters["rowFilter.feedback.created_at"];
          created_by?: parameters["rowFilter.feedback.created_by"];
          owner_id?: parameters["rowFilter.feedback.owner_id"];
          updated_at?: parameters["rowFilter.feedback.updated_at"];
          positive_feedback?: parameters["rowFilter.feedback.positive_feedback"];
          rating?: parameters["rowFilter.feedback.rating"];
          negative_feedback?: parameters["rowFilter.feedback.negative_feedback"];
          updated_by?: parameters["rowFilter.feedback.updated_by"];
        };
        body: {
          /** feedback */
          feedback?: definitions["feedback"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_purchases": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_purchases.id"];
          created_at?: parameters["rowFilter.request_purchases.created_at"];
          updated_at?: parameters["rowFilter.request_purchases.updated_at"];
          created_by?: parameters["rowFilter.request_purchases.created_by"];
          notes?: parameters["rowFilter.request_purchases.notes"];
          owner_id?: parameters["rowFilter.request_purchases.owner_id"];
          title?: parameters["rowFilter.request_purchases.title"];
          type?: parameters["rowFilter.request_purchases.type"];
          updated_by?: parameters["rowFilter.request_purchases.updated_by"];
          status?: parameters["rowFilter.request_purchases.status"];
          name?: parameters["rowFilter.request_purchases.name"];
          amount?: parameters["rowFilter.request_purchases.amount"];
          quantity?: parameters["rowFilter.request_purchases.quantity"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_purchases"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_purchases */
          request_purchases?: definitions["request_purchases"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_purchases.id"];
          created_at?: parameters["rowFilter.request_purchases.created_at"];
          updated_at?: parameters["rowFilter.request_purchases.updated_at"];
          created_by?: parameters["rowFilter.request_purchases.created_by"];
          notes?: parameters["rowFilter.request_purchases.notes"];
          owner_id?: parameters["rowFilter.request_purchases.owner_id"];
          title?: parameters["rowFilter.request_purchases.title"];
          type?: parameters["rowFilter.request_purchases.type"];
          updated_by?: parameters["rowFilter.request_purchases.updated_by"];
          status?: parameters["rowFilter.request_purchases.status"];
          name?: parameters["rowFilter.request_purchases.name"];
          amount?: parameters["rowFilter.request_purchases.amount"];
          quantity?: parameters["rowFilter.request_purchases.quantity"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_purchases.id"];
          created_at?: parameters["rowFilter.request_purchases.created_at"];
          updated_at?: parameters["rowFilter.request_purchases.updated_at"];
          created_by?: parameters["rowFilter.request_purchases.created_by"];
          notes?: parameters["rowFilter.request_purchases.notes"];
          owner_id?: parameters["rowFilter.request_purchases.owner_id"];
          title?: parameters["rowFilter.request_purchases.title"];
          type?: parameters["rowFilter.request_purchases.type"];
          updated_by?: parameters["rowFilter.request_purchases.updated_by"];
          status?: parameters["rowFilter.request_purchases.status"];
          name?: parameters["rowFilter.request_purchases.name"];
          amount?: parameters["rowFilter.request_purchases.amount"];
          quantity?: parameters["rowFilter.request_purchases.quantity"];
        };
        body: {
          /** request_purchases */
          request_purchases?: definitions["request_purchases"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_factory_countries": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_factory_countries.created_at"];
          updated_at?: parameters["rowFilter.join_factory_countries.updated_at"];
          created_by?: parameters["rowFilter.join_factory_countries.created_by"];
          factory_id?: parameters["rowFilter.join_factory_countries.factory_id"];
          res_country_id?: parameters["rowFilter.join_factory_countries.res_country_id"];
          owner_id?: parameters["rowFilter.join_factory_countries.owner_id"];
          updated_by?: parameters["rowFilter.join_factory_countries.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_factory_countries"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_factory_countries */
          join_factory_countries?: definitions["join_factory_countries"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_factory_countries.created_at"];
          updated_at?: parameters["rowFilter.join_factory_countries.updated_at"];
          created_by?: parameters["rowFilter.join_factory_countries.created_by"];
          factory_id?: parameters["rowFilter.join_factory_countries.factory_id"];
          res_country_id?: parameters["rowFilter.join_factory_countries.res_country_id"];
          owner_id?: parameters["rowFilter.join_factory_countries.owner_id"];
          updated_by?: parameters["rowFilter.join_factory_countries.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_factory_countries.created_at"];
          updated_at?: parameters["rowFilter.join_factory_countries.updated_at"];
          created_by?: parameters["rowFilter.join_factory_countries.created_by"];
          factory_id?: parameters["rowFilter.join_factory_countries.factory_id"];
          res_country_id?: parameters["rowFilter.join_factory_countries.res_country_id"];
          owner_id?: parameters["rowFilter.join_factory_countries.owner_id"];
          updated_by?: parameters["rowFilter.join_factory_countries.updated_by"];
        };
        body: {
          /** join_factory_countries */
          join_factory_countries?: definitions["join_factory_countries"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/template": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.template.id"];
          created_at?: parameters["rowFilter.template.created_at"];
          created_by?: parameters["rowFilter.template.created_by"];
          owner_id?: parameters["rowFilter.template.owner_id"];
          updated_at?: parameters["rowFilter.template.updated_at"];
          updated_by?: parameters["rowFilter.template.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["template"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** template */
          template?: definitions["template"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.template.id"];
          created_at?: parameters["rowFilter.template.created_at"];
          created_by?: parameters["rowFilter.template.created_by"];
          owner_id?: parameters["rowFilter.template.owner_id"];
          updated_at?: parameters["rowFilter.template.updated_at"];
          updated_by?: parameters["rowFilter.template.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.template.id"];
          created_at?: parameters["rowFilter.template.created_at"];
          created_by?: parameters["rowFilter.template.created_by"];
          owner_id?: parameters["rowFilter.template.owner_id"];
          updated_at?: parameters["rowFilter.template.updated_at"];
          updated_by?: parameters["rowFilter.template.updated_by"];
        };
        body: {
          /** template */
          template?: definitions["template"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_insurance_updates": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_updates.id"];
          created_at?: parameters["rowFilter.request_insurance_updates.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_updates.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_updates.created_by"];
          notes?: parameters["rowFilter.request_insurance_updates.notes"];
          owner_id?: parameters["rowFilter.request_insurance_updates.owner_id"];
          title?: parameters["rowFilter.request_insurance_updates.title"];
          type?: parameters["rowFilter.request_insurance_updates.type"];
          updated_by?: parameters["rowFilter.request_insurance_updates.updated_by"];
          status?: parameters["rowFilter.request_insurance_updates.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_insurance_updates"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_insurance_updates */
          request_insurance_updates?: definitions["request_insurance_updates"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_updates.id"];
          created_at?: parameters["rowFilter.request_insurance_updates.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_updates.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_updates.created_by"];
          notes?: parameters["rowFilter.request_insurance_updates.notes"];
          owner_id?: parameters["rowFilter.request_insurance_updates.owner_id"];
          title?: parameters["rowFilter.request_insurance_updates.title"];
          type?: parameters["rowFilter.request_insurance_updates.type"];
          updated_by?: parameters["rowFilter.request_insurance_updates.updated_by"];
          status?: parameters["rowFilter.request_insurance_updates.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_updates.id"];
          created_at?: parameters["rowFilter.request_insurance_updates.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_updates.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_updates.created_by"];
          notes?: parameters["rowFilter.request_insurance_updates.notes"];
          owner_id?: parameters["rowFilter.request_insurance_updates.owner_id"];
          title?: parameters["rowFilter.request_insurance_updates.title"];
          type?: parameters["rowFilter.request_insurance_updates.type"];
          updated_by?: parameters["rowFilter.request_insurance_updates.updated_by"];
          status?: parameters["rowFilter.request_insurance_updates.status"];
        };
        body: {
          /** request_insurance_updates */
          request_insurance_updates?: definitions["request_insurance_updates"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_product_product_categories": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_product_categories.created_at"];
          updated_at?: parameters["rowFilter.join_product_product_categories.updated_at"];
          created_by?: parameters["rowFilter.join_product_product_categories.created_by"];
          product_id?: parameters["rowFilter.join_product_product_categories.product_id"];
          owner_id?: parameters["rowFilter.join_product_product_categories.owner_id"];
          product_category_id?: parameters["rowFilter.join_product_product_categories.product_category_id"];
          updated_by?: parameters["rowFilter.join_product_product_categories.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_product_product_categories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_product_product_categories */
          join_product_product_categories?: definitions["join_product_product_categories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_product_categories.created_at"];
          updated_at?: parameters["rowFilter.join_product_product_categories.updated_at"];
          created_by?: parameters["rowFilter.join_product_product_categories.created_by"];
          product_id?: parameters["rowFilter.join_product_product_categories.product_id"];
          owner_id?: parameters["rowFilter.join_product_product_categories.owner_id"];
          product_category_id?: parameters["rowFilter.join_product_product_categories.product_category_id"];
          updated_by?: parameters["rowFilter.join_product_product_categories.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_product_categories.created_at"];
          updated_at?: parameters["rowFilter.join_product_product_categories.updated_at"];
          created_by?: parameters["rowFilter.join_product_product_categories.created_by"];
          product_id?: parameters["rowFilter.join_product_product_categories.product_id"];
          owner_id?: parameters["rowFilter.join_product_product_categories.owner_id"];
          product_category_id?: parameters["rowFilter.join_product_product_categories.product_category_id"];
          updated_by?: parameters["rowFilter.join_product_product_categories.updated_by"];
        };
        body: {
          /** join_product_product_categories */
          join_product_product_categories?: definitions["join_product_product_categories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ships": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ships.id"];
          created_at?: parameters["rowFilter.ships.created_at"];
          created_by?: parameters["rowFilter.ships.created_by"];
          owner_id?: parameters["rowFilter.ships.owner_id"];
          updated_at?: parameters["rowFilter.ships.updated_at"];
          name?: parameters["rowFilter.ships.name"];
          number?: parameters["rowFilter.ships.number"];
          shipping_company_id?: parameters["rowFilter.ships.shipping_company_id"];
          updated_by?: parameters["rowFilter.ships.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ships"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ships */
          ships?: definitions["ships"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ships.id"];
          created_at?: parameters["rowFilter.ships.created_at"];
          created_by?: parameters["rowFilter.ships.created_by"];
          owner_id?: parameters["rowFilter.ships.owner_id"];
          updated_at?: parameters["rowFilter.ships.updated_at"];
          name?: parameters["rowFilter.ships.name"];
          number?: parameters["rowFilter.ships.number"];
          shipping_company_id?: parameters["rowFilter.ships.shipping_company_id"];
          updated_by?: parameters["rowFilter.ships.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ships.id"];
          created_at?: parameters["rowFilter.ships.created_at"];
          created_by?: parameters["rowFilter.ships.created_by"];
          owner_id?: parameters["rowFilter.ships.owner_id"];
          updated_at?: parameters["rowFilter.ships.updated_at"];
          name?: parameters["rowFilter.ships.name"];
          number?: parameters["rowFilter.ships.number"];
          shipping_company_id?: parameters["rowFilter.ships.shipping_company_id"];
          updated_by?: parameters["rowFilter.ships.updated_by"];
        };
        body: {
          /** ships */
          ships?: definitions["ships"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/warehouses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.warehouses.id"];
          created_at?: parameters["rowFilter.warehouses.created_at"];
          updated_at?: parameters["rowFilter.warehouses.updated_at"];
          employee_name?: parameters["rowFilter.warehouses.employee_name"];
          phone?: parameters["rowFilter.warehouses.phone"];
          email?: parameters["rowFilter.warehouses.email"];
          website?: parameters["rowFilter.warehouses.website"];
          updated_by?: parameters["rowFilter.warehouses.updated_by"];
          owner_id?: parameters["rowFilter.warehouses.owner_id"];
          country_id?: parameters["rowFilter.warehouses.country_id"];
          city_id?: parameters["rowFilter.warehouses.city_id"];
          street?: parameters["rowFilter.warehouses.street"];
          building?: parameters["rowFilter.warehouses.building"];
          landmark?: parameters["rowFilter.warehouses.landmark"];
          gps?: parameters["rowFilter.warehouses.gps"];
          created_by?: parameters["rowFilter.warehouses.created_by"];
          name?: parameters["rowFilter.warehouses.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["warehouses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** warehouses */
          warehouses?: definitions["warehouses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.warehouses.id"];
          created_at?: parameters["rowFilter.warehouses.created_at"];
          updated_at?: parameters["rowFilter.warehouses.updated_at"];
          employee_name?: parameters["rowFilter.warehouses.employee_name"];
          phone?: parameters["rowFilter.warehouses.phone"];
          email?: parameters["rowFilter.warehouses.email"];
          website?: parameters["rowFilter.warehouses.website"];
          updated_by?: parameters["rowFilter.warehouses.updated_by"];
          owner_id?: parameters["rowFilter.warehouses.owner_id"];
          country_id?: parameters["rowFilter.warehouses.country_id"];
          city_id?: parameters["rowFilter.warehouses.city_id"];
          street?: parameters["rowFilter.warehouses.street"];
          building?: parameters["rowFilter.warehouses.building"];
          landmark?: parameters["rowFilter.warehouses.landmark"];
          gps?: parameters["rowFilter.warehouses.gps"];
          created_by?: parameters["rowFilter.warehouses.created_by"];
          name?: parameters["rowFilter.warehouses.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.warehouses.id"];
          created_at?: parameters["rowFilter.warehouses.created_at"];
          updated_at?: parameters["rowFilter.warehouses.updated_at"];
          employee_name?: parameters["rowFilter.warehouses.employee_name"];
          phone?: parameters["rowFilter.warehouses.phone"];
          email?: parameters["rowFilter.warehouses.email"];
          website?: parameters["rowFilter.warehouses.website"];
          updated_by?: parameters["rowFilter.warehouses.updated_by"];
          owner_id?: parameters["rowFilter.warehouses.owner_id"];
          country_id?: parameters["rowFilter.warehouses.country_id"];
          city_id?: parameters["rowFilter.warehouses.city_id"];
          street?: parameters["rowFilter.warehouses.street"];
          building?: parameters["rowFilter.warehouses.building"];
          landmark?: parameters["rowFilter.warehouses.landmark"];
          gps?: parameters["rowFilter.warehouses.gps"];
          created_by?: parameters["rowFilter.warehouses.created_by"];
          name?: parameters["rowFilter.warehouses.name"];
        };
        body: {
          /** warehouses */
          warehouses?: definitions["warehouses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/banks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.banks.id"];
          created_at?: parameters["rowFilter.banks.created_at"];
          created_by?: parameters["rowFilter.banks.created_by"];
          owner_id?: parameters["rowFilter.banks.owner_id"];
          updated_at?: parameters["rowFilter.banks.updated_at"];
          name?: parameters["rowFilter.banks.name"];
          updated_by?: parameters["rowFilter.banks.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["banks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** banks */
          banks?: definitions["banks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.banks.id"];
          created_at?: parameters["rowFilter.banks.created_at"];
          created_by?: parameters["rowFilter.banks.created_by"];
          owner_id?: parameters["rowFilter.banks.owner_id"];
          updated_at?: parameters["rowFilter.banks.updated_at"];
          name?: parameters["rowFilter.banks.name"];
          updated_by?: parameters["rowFilter.banks.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.banks.id"];
          created_at?: parameters["rowFilter.banks.created_at"];
          created_by?: parameters["rowFilter.banks.created_by"];
          owner_id?: parameters["rowFilter.banks.owner_id"];
          updated_at?: parameters["rowFilter.banks.updated_at"];
          name?: parameters["rowFilter.banks.name"];
          updated_by?: parameters["rowFilter.banks.updated_by"];
        };
        body: {
          /** banks */
          banks?: definitions["banks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/announcements": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.announcements.id"];
          created_at?: parameters["rowFilter.announcements.created_at"];
          created_by?: parameters["rowFilter.announcements.created_by"];
          owner_id?: parameters["rowFilter.announcements.owner_id"];
          updated_at?: parameters["rowFilter.announcements.updated_at"];
          updated_by?: parameters["rowFilter.announcements.updated_by"];
          title?: parameters["rowFilter.announcements.title"];
          message?: parameters["rowFilter.announcements.message"];
          subscribers_ids?: parameters["rowFilter.announcements.subscribers_ids"];
          level?: parameters["rowFilter.announcements.level"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["announcements"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** announcements */
          announcements?: definitions["announcements"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.announcements.id"];
          created_at?: parameters["rowFilter.announcements.created_at"];
          created_by?: parameters["rowFilter.announcements.created_by"];
          owner_id?: parameters["rowFilter.announcements.owner_id"];
          updated_at?: parameters["rowFilter.announcements.updated_at"];
          updated_by?: parameters["rowFilter.announcements.updated_by"];
          title?: parameters["rowFilter.announcements.title"];
          message?: parameters["rowFilter.announcements.message"];
          subscribers_ids?: parameters["rowFilter.announcements.subscribers_ids"];
          level?: parameters["rowFilter.announcements.level"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.announcements.id"];
          created_at?: parameters["rowFilter.announcements.created_at"];
          created_by?: parameters["rowFilter.announcements.created_by"];
          owner_id?: parameters["rowFilter.announcements.owner_id"];
          updated_at?: parameters["rowFilter.announcements.updated_at"];
          updated_by?: parameters["rowFilter.announcements.updated_by"];
          title?: parameters["rowFilter.announcements.title"];
          message?: parameters["rowFilter.announcements.message"];
          subscribers_ids?: parameters["rowFilter.announcements.subscribers_ids"];
          level?: parameters["rowFilter.announcements.level"];
        };
        body: {
          /** announcements */
          announcements?: definitions["announcements"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/emergency_contacts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.emergency_contacts.id"];
          created_at?: parameters["rowFilter.emergency_contacts.created_at"];
          created_by?: parameters["rowFilter.emergency_contacts.created_by"];
          owner_id?: parameters["rowFilter.emergency_contacts.owner_id"];
          updated_at?: parameters["rowFilter.emergency_contacts.updated_at"];
          name?: parameters["rowFilter.emergency_contacts.name"];
          phone?: parameters["rowFilter.emergency_contacts.phone"];
          employee_id?: parameters["rowFilter.emergency_contacts.employee_id"];
          relation_type_id?: parameters["rowFilter.emergency_contacts.relation_type_id"];
          updated_by?: parameters["rowFilter.emergency_contacts.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["emergency_contacts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** emergency_contacts */
          emergency_contacts?: definitions["emergency_contacts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.emergency_contacts.id"];
          created_at?: parameters["rowFilter.emergency_contacts.created_at"];
          created_by?: parameters["rowFilter.emergency_contacts.created_by"];
          owner_id?: parameters["rowFilter.emergency_contacts.owner_id"];
          updated_at?: parameters["rowFilter.emergency_contacts.updated_at"];
          name?: parameters["rowFilter.emergency_contacts.name"];
          phone?: parameters["rowFilter.emergency_contacts.phone"];
          employee_id?: parameters["rowFilter.emergency_contacts.employee_id"];
          relation_type_id?: parameters["rowFilter.emergency_contacts.relation_type_id"];
          updated_by?: parameters["rowFilter.emergency_contacts.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.emergency_contacts.id"];
          created_at?: parameters["rowFilter.emergency_contacts.created_at"];
          created_by?: parameters["rowFilter.emergency_contacts.created_by"];
          owner_id?: parameters["rowFilter.emergency_contacts.owner_id"];
          updated_at?: parameters["rowFilter.emergency_contacts.updated_at"];
          name?: parameters["rowFilter.emergency_contacts.name"];
          phone?: parameters["rowFilter.emergency_contacts.phone"];
          employee_id?: parameters["rowFilter.emergency_contacts.employee_id"];
          relation_type_id?: parameters["rowFilter.emergency_contacts.relation_type_id"];
          updated_by?: parameters["rowFilter.emergency_contacts.updated_by"];
        };
        body: {
          /** emergency_contacts */
          emergency_contacts?: definitions["emergency_contacts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/options": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.options.id"];
          created_at?: parameters["rowFilter.options.created_at"];
          updated_at?: parameters["rowFilter.options.updated_at"];
          created_by?: parameters["rowFilter.options.created_by"];
          name?: parameters["rowFilter.options.name"];
          value?: parameters["rowFilter.options.value"];
          validator?: parameters["rowFilter.options.validator"];
          owner_id?: parameters["rowFilter.options.owner_id"];
          version?: parameters["rowFilter.options.version"];
          updated_by?: parameters["rowFilter.options.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["options"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** options */
          options?: definitions["options"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.options.id"];
          created_at?: parameters["rowFilter.options.created_at"];
          updated_at?: parameters["rowFilter.options.updated_at"];
          created_by?: parameters["rowFilter.options.created_by"];
          name?: parameters["rowFilter.options.name"];
          value?: parameters["rowFilter.options.value"];
          validator?: parameters["rowFilter.options.validator"];
          owner_id?: parameters["rowFilter.options.owner_id"];
          version?: parameters["rowFilter.options.version"];
          updated_by?: parameters["rowFilter.options.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.options.id"];
          created_at?: parameters["rowFilter.options.created_at"];
          updated_at?: parameters["rowFilter.options.updated_at"];
          created_by?: parameters["rowFilter.options.created_by"];
          name?: parameters["rowFilter.options.name"];
          value?: parameters["rowFilter.options.value"];
          validator?: parameters["rowFilter.options.validator"];
          owner_id?: parameters["rowFilter.options.owner_id"];
          version?: parameters["rowFilter.options.version"];
          updated_by?: parameters["rowFilter.options.updated_by"];
        };
        body: {
          /** options */
          options?: definitions["options"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/insurance_reports": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_reports.id"];
          created_at?: parameters["rowFilter.insurance_reports.created_at"];
          created_by?: parameters["rowFilter.insurance_reports.created_by"];
          owner_id?: parameters["rowFilter.insurance_reports.owner_id"];
          updated_at?: parameters["rowFilter.insurance_reports.updated_at"];
          year?: parameters["rowFilter.insurance_reports.year"];
          answers?: parameters["rowFilter.insurance_reports.answers"];
          updated_by?: parameters["rowFilter.insurance_reports.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["insurance_reports"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** insurance_reports */
          insurance_reports?: definitions["insurance_reports"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_reports.id"];
          created_at?: parameters["rowFilter.insurance_reports.created_at"];
          created_by?: parameters["rowFilter.insurance_reports.created_by"];
          owner_id?: parameters["rowFilter.insurance_reports.owner_id"];
          updated_at?: parameters["rowFilter.insurance_reports.updated_at"];
          year?: parameters["rowFilter.insurance_reports.year"];
          answers?: parameters["rowFilter.insurance_reports.answers"];
          updated_by?: parameters["rowFilter.insurance_reports.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_reports.id"];
          created_at?: parameters["rowFilter.insurance_reports.created_at"];
          created_by?: parameters["rowFilter.insurance_reports.created_by"];
          owner_id?: parameters["rowFilter.insurance_reports.owner_id"];
          updated_at?: parameters["rowFilter.insurance_reports.updated_at"];
          year?: parameters["rowFilter.insurance_reports.year"];
          answers?: parameters["rowFilter.insurance_reports.answers"];
          updated_by?: parameters["rowFilter.insurance_reports.updated_by"];
        };
        body: {
          /** insurance_reports */
          insurance_reports?: definitions["insurance_reports"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_health_visits": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_health_visits.id"];
          created_at?: parameters["rowFilter.request_health_visits.created_at"];
          updated_at?: parameters["rowFilter.request_health_visits.updated_at"];
          created_by?: parameters["rowFilter.request_health_visits.created_by"];
          notes?: parameters["rowFilter.request_health_visits.notes"];
          owner_id?: parameters["rowFilter.request_health_visits.owner_id"];
          title?: parameters["rowFilter.request_health_visits.title"];
          type?: parameters["rowFilter.request_health_visits.type"];
          updated_by?: parameters["rowFilter.request_health_visits.updated_by"];
          status?: parameters["rowFilter.request_health_visits.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_health_visits"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_health_visits */
          request_health_visits?: definitions["request_health_visits"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_health_visits.id"];
          created_at?: parameters["rowFilter.request_health_visits.created_at"];
          updated_at?: parameters["rowFilter.request_health_visits.updated_at"];
          created_by?: parameters["rowFilter.request_health_visits.created_by"];
          notes?: parameters["rowFilter.request_health_visits.notes"];
          owner_id?: parameters["rowFilter.request_health_visits.owner_id"];
          title?: parameters["rowFilter.request_health_visits.title"];
          type?: parameters["rowFilter.request_health_visits.type"];
          updated_by?: parameters["rowFilter.request_health_visits.updated_by"];
          status?: parameters["rowFilter.request_health_visits.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_health_visits.id"];
          created_at?: parameters["rowFilter.request_health_visits.created_at"];
          updated_at?: parameters["rowFilter.request_health_visits.updated_at"];
          created_by?: parameters["rowFilter.request_health_visits.created_by"];
          notes?: parameters["rowFilter.request_health_visits.notes"];
          owner_id?: parameters["rowFilter.request_health_visits.owner_id"];
          title?: parameters["rowFilter.request_health_visits.title"];
          type?: parameters["rowFilter.request_health_visits.type"];
          updated_by?: parameters["rowFilter.request_health_visits.updated_by"];
          status?: parameters["rowFilter.request_health_visits.status"];
        };
        body: {
          /** request_health_visits */
          request_health_visits?: definitions["request_health_visits"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/departments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.departments.id"];
          created_at?: parameters["rowFilter.departments.created_at"];
          created_by?: parameters["rowFilter.departments.created_by"];
          owner_id?: parameters["rowFilter.departments.owner_id"];
          updated_at?: parameters["rowFilter.departments.updated_at"];
          name?: parameters["rowFilter.departments.name"];
          description?: parameters["rowFilter.departments.description"];
          entity_id?: parameters["rowFilter.departments.entity_id"];
          updated_by?: parameters["rowFilter.departments.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["departments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** departments */
          departments?: definitions["departments"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.departments.id"];
          created_at?: parameters["rowFilter.departments.created_at"];
          created_by?: parameters["rowFilter.departments.created_by"];
          owner_id?: parameters["rowFilter.departments.owner_id"];
          updated_at?: parameters["rowFilter.departments.updated_at"];
          name?: parameters["rowFilter.departments.name"];
          description?: parameters["rowFilter.departments.description"];
          entity_id?: parameters["rowFilter.departments.entity_id"];
          updated_by?: parameters["rowFilter.departments.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.departments.id"];
          created_at?: parameters["rowFilter.departments.created_at"];
          created_by?: parameters["rowFilter.departments.created_by"];
          owner_id?: parameters["rowFilter.departments.owner_id"];
          updated_at?: parameters["rowFilter.departments.updated_at"];
          name?: parameters["rowFilter.departments.name"];
          description?: parameters["rowFilter.departments.description"];
          entity_id?: parameters["rowFilter.departments.entity_id"];
          updated_by?: parameters["rowFilter.departments.updated_by"];
        };
        body: {
          /** departments */
          departments?: definitions["departments"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/marriages": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.marriages.created_at"];
          updated_at?: parameters["rowFilter.marriages.updated_at"];
          created_by?: parameters["rowFilter.marriages.created_by"];
          employee_id?: parameters["rowFilter.marriages.employee_id"];
          spouse_id?: parameters["rowFilter.marriages.spouse_id"];
          id?: parameters["rowFilter.marriages.id"];
          date_of_marriage?: parameters["rowFilter.marriages.date_of_marriage"];
          notes?: parameters["rowFilter.marriages.notes"];
          certificate_number?: parameters["rowFilter.marriages.certificate_number"];
          owner_id?: parameters["rowFilter.marriages.owner_id"];
          date_of_separation?: parameters["rowFilter.marriages.date_of_separation"];
          separation_reason?: parameters["rowFilter.marriages.separation_reason"];
          updated_by?: parameters["rowFilter.marriages.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["marriages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** marriages */
          marriages?: definitions["marriages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.marriages.created_at"];
          updated_at?: parameters["rowFilter.marriages.updated_at"];
          created_by?: parameters["rowFilter.marriages.created_by"];
          employee_id?: parameters["rowFilter.marriages.employee_id"];
          spouse_id?: parameters["rowFilter.marriages.spouse_id"];
          id?: parameters["rowFilter.marriages.id"];
          date_of_marriage?: parameters["rowFilter.marriages.date_of_marriage"];
          notes?: parameters["rowFilter.marriages.notes"];
          certificate_number?: parameters["rowFilter.marriages.certificate_number"];
          owner_id?: parameters["rowFilter.marriages.owner_id"];
          date_of_separation?: parameters["rowFilter.marriages.date_of_separation"];
          separation_reason?: parameters["rowFilter.marriages.separation_reason"];
          updated_by?: parameters["rowFilter.marriages.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.marriages.created_at"];
          updated_at?: parameters["rowFilter.marriages.updated_at"];
          created_by?: parameters["rowFilter.marriages.created_by"];
          employee_id?: parameters["rowFilter.marriages.employee_id"];
          spouse_id?: parameters["rowFilter.marriages.spouse_id"];
          id?: parameters["rowFilter.marriages.id"];
          date_of_marriage?: parameters["rowFilter.marriages.date_of_marriage"];
          notes?: parameters["rowFilter.marriages.notes"];
          certificate_number?: parameters["rowFilter.marriages.certificate_number"];
          owner_id?: parameters["rowFilter.marriages.owner_id"];
          date_of_separation?: parameters["rowFilter.marriages.date_of_separation"];
          separation_reason?: parameters["rowFilter.marriages.separation_reason"];
          updated_by?: parameters["rowFilter.marriages.updated_by"];
        };
        body: {
          /** marriages */
          marriages?: definitions["marriages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ship_lines": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ship_lines.id"];
          created_at?: parameters["rowFilter.ship_lines.created_at"];
          created_by?: parameters["rowFilter.ship_lines.created_by"];
          owner_id?: parameters["rowFilter.ship_lines.owner_id"];
          updated_at?: parameters["rowFilter.ship_lines.updated_at"];
          from_port_id?: parameters["rowFilter.ship_lines.from_port_id"];
          to_port_id?: parameters["rowFilter.ship_lines.to_port_id"];
          name?: parameters["rowFilter.ship_lines.name"];
          updated_by?: parameters["rowFilter.ship_lines.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ship_lines"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ship_lines */
          ship_lines?: definitions["ship_lines"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ship_lines.id"];
          created_at?: parameters["rowFilter.ship_lines.created_at"];
          created_by?: parameters["rowFilter.ship_lines.created_by"];
          owner_id?: parameters["rowFilter.ship_lines.owner_id"];
          updated_at?: parameters["rowFilter.ship_lines.updated_at"];
          from_port_id?: parameters["rowFilter.ship_lines.from_port_id"];
          to_port_id?: parameters["rowFilter.ship_lines.to_port_id"];
          name?: parameters["rowFilter.ship_lines.name"];
          updated_by?: parameters["rowFilter.ship_lines.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ship_lines.id"];
          created_at?: parameters["rowFilter.ship_lines.created_at"];
          created_by?: parameters["rowFilter.ship_lines.created_by"];
          owner_id?: parameters["rowFilter.ship_lines.owner_id"];
          updated_at?: parameters["rowFilter.ship_lines.updated_at"];
          from_port_id?: parameters["rowFilter.ship_lines.from_port_id"];
          to_port_id?: parameters["rowFilter.ship_lines.to_port_id"];
          name?: parameters["rowFilter.ship_lines.name"];
          updated_by?: parameters["rowFilter.ship_lines.updated_by"];
        };
        body: {
          /** ship_lines */
          ship_lines?: definitions["ship_lines"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_internal_delegations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_internal_delegations.id"];
          created_at?: parameters["rowFilter.request_internal_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_internal_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_internal_delegations.created_by"];
          notes?: parameters["rowFilter.request_internal_delegations.notes"];
          owner_id?: parameters["rowFilter.request_internal_delegations.owner_id"];
          title?: parameters["rowFilter.request_internal_delegations.title"];
          type?: parameters["rowFilter.request_internal_delegations.type"];
          updated_by?: parameters["rowFilter.request_internal_delegations.updated_by"];
          status?: parameters["rowFilter.request_internal_delegations.status"];
          reason?: parameters["rowFilter.request_internal_delegations.reason"];
          from?: parameters["rowFilter.request_internal_delegations.from"];
          to?: parameters["rowFilter.request_internal_delegations.to"];
          entity_id?: parameters["rowFilter.request_internal_delegations.entity_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_internal_delegations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_internal_delegations */
          request_internal_delegations?: definitions["request_internal_delegations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_internal_delegations.id"];
          created_at?: parameters["rowFilter.request_internal_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_internal_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_internal_delegations.created_by"];
          notes?: parameters["rowFilter.request_internal_delegations.notes"];
          owner_id?: parameters["rowFilter.request_internal_delegations.owner_id"];
          title?: parameters["rowFilter.request_internal_delegations.title"];
          type?: parameters["rowFilter.request_internal_delegations.type"];
          updated_by?: parameters["rowFilter.request_internal_delegations.updated_by"];
          status?: parameters["rowFilter.request_internal_delegations.status"];
          reason?: parameters["rowFilter.request_internal_delegations.reason"];
          from?: parameters["rowFilter.request_internal_delegations.from"];
          to?: parameters["rowFilter.request_internal_delegations.to"];
          entity_id?: parameters["rowFilter.request_internal_delegations.entity_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_internal_delegations.id"];
          created_at?: parameters["rowFilter.request_internal_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_internal_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_internal_delegations.created_by"];
          notes?: parameters["rowFilter.request_internal_delegations.notes"];
          owner_id?: parameters["rowFilter.request_internal_delegations.owner_id"];
          title?: parameters["rowFilter.request_internal_delegations.title"];
          type?: parameters["rowFilter.request_internal_delegations.type"];
          updated_by?: parameters["rowFilter.request_internal_delegations.updated_by"];
          status?: parameters["rowFilter.request_internal_delegations.status"];
          reason?: parameters["rowFilter.request_internal_delegations.reason"];
          from?: parameters["rowFilter.request_internal_delegations.from"];
          to?: parameters["rowFilter.request_internal_delegations.to"];
          entity_id?: parameters["rowFilter.request_internal_delegations.entity_id"];
        };
        body: {
          /** request_internal_delegations */
          request_internal_delegations?: definitions["request_internal_delegations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/insurance_companies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_companies.id"];
          created_at?: parameters["rowFilter.insurance_companies.created_at"];
          updated_at?: parameters["rowFilter.insurance_companies.updated_at"];
          employee_name?: parameters["rowFilter.insurance_companies.employee_name"];
          phone?: parameters["rowFilter.insurance_companies.phone"];
          email?: parameters["rowFilter.insurance_companies.email"];
          website?: parameters["rowFilter.insurance_companies.website"];
          updated_by?: parameters["rowFilter.insurance_companies.updated_by"];
          owner_id?: parameters["rowFilter.insurance_companies.owner_id"];
          country_id?: parameters["rowFilter.insurance_companies.country_id"];
          city_id?: parameters["rowFilter.insurance_companies.city_id"];
          street?: parameters["rowFilter.insurance_companies.street"];
          building?: parameters["rowFilter.insurance_companies.building"];
          landmark?: parameters["rowFilter.insurance_companies.landmark"];
          gps?: parameters["rowFilter.insurance_companies.gps"];
          created_by?: parameters["rowFilter.insurance_companies.created_by"];
          name?: parameters["rowFilter.insurance_companies.name"];
          logo_id?: parameters["rowFilter.insurance_companies.logo_id"];
          trading_number?: parameters["rowFilter.insurance_companies.trading_number"];
          tax_number?: parameters["rowFilter.insurance_companies.tax_number"];
          active?: parameters["rowFilter.insurance_companies.active"];
          emergency_contacts?: parameters["rowFilter.insurance_companies.emergency_contacts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["insurance_companies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** insurance_companies */
          insurance_companies?: definitions["insurance_companies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_companies.id"];
          created_at?: parameters["rowFilter.insurance_companies.created_at"];
          updated_at?: parameters["rowFilter.insurance_companies.updated_at"];
          employee_name?: parameters["rowFilter.insurance_companies.employee_name"];
          phone?: parameters["rowFilter.insurance_companies.phone"];
          email?: parameters["rowFilter.insurance_companies.email"];
          website?: parameters["rowFilter.insurance_companies.website"];
          updated_by?: parameters["rowFilter.insurance_companies.updated_by"];
          owner_id?: parameters["rowFilter.insurance_companies.owner_id"];
          country_id?: parameters["rowFilter.insurance_companies.country_id"];
          city_id?: parameters["rowFilter.insurance_companies.city_id"];
          street?: parameters["rowFilter.insurance_companies.street"];
          building?: parameters["rowFilter.insurance_companies.building"];
          landmark?: parameters["rowFilter.insurance_companies.landmark"];
          gps?: parameters["rowFilter.insurance_companies.gps"];
          created_by?: parameters["rowFilter.insurance_companies.created_by"];
          name?: parameters["rowFilter.insurance_companies.name"];
          logo_id?: parameters["rowFilter.insurance_companies.logo_id"];
          trading_number?: parameters["rowFilter.insurance_companies.trading_number"];
          tax_number?: parameters["rowFilter.insurance_companies.tax_number"];
          active?: parameters["rowFilter.insurance_companies.active"];
          emergency_contacts?: parameters["rowFilter.insurance_companies.emergency_contacts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_companies.id"];
          created_at?: parameters["rowFilter.insurance_companies.created_at"];
          updated_at?: parameters["rowFilter.insurance_companies.updated_at"];
          employee_name?: parameters["rowFilter.insurance_companies.employee_name"];
          phone?: parameters["rowFilter.insurance_companies.phone"];
          email?: parameters["rowFilter.insurance_companies.email"];
          website?: parameters["rowFilter.insurance_companies.website"];
          updated_by?: parameters["rowFilter.insurance_companies.updated_by"];
          owner_id?: parameters["rowFilter.insurance_companies.owner_id"];
          country_id?: parameters["rowFilter.insurance_companies.country_id"];
          city_id?: parameters["rowFilter.insurance_companies.city_id"];
          street?: parameters["rowFilter.insurance_companies.street"];
          building?: parameters["rowFilter.insurance_companies.building"];
          landmark?: parameters["rowFilter.insurance_companies.landmark"];
          gps?: parameters["rowFilter.insurance_companies.gps"];
          created_by?: parameters["rowFilter.insurance_companies.created_by"];
          name?: parameters["rowFilter.insurance_companies.name"];
          logo_id?: parameters["rowFilter.insurance_companies.logo_id"];
          trading_number?: parameters["rowFilter.insurance_companies.trading_number"];
          tax_number?: parameters["rowFilter.insurance_companies.tax_number"];
          active?: parameters["rowFilter.insurance_companies.active"];
          emergency_contacts?: parameters["rowFilter.insurance_companies.emergency_contacts"];
        };
        body: {
          /** insurance_companies */
          insurance_companies?: definitions["insurance_companies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/entities": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.entities.id"];
          created_at?: parameters["rowFilter.entities.created_at"];
          updated_at?: parameters["rowFilter.entities.updated_at"];
          created_by?: parameters["rowFilter.entities.created_by"];
          name?: parameters["rowFilter.entities.name"];
          trading_number?: parameters["rowFilter.entities.trading_number"];
          tax_number?: parameters["rowFilter.entities.tax_number"];
          activity?: parameters["rowFilter.entities.activity"];
          type?: parameters["rowFilter.entities.type"];
          parent_id?: parameters["rowFilter.entities.parent_id"];
          entity_type_id?: parameters["rowFilter.entities.entity_type_id"];
          logo_id?: parameters["rowFilter.entities.logo_id"];
          slogan?: parameters["rowFilter.entities.slogan"];
          phone?: parameters["rowFilter.entities.phone"];
          nationality_id?: parameters["rowFilter.entities.nationality_id"];
          ceo_id?: parameters["rowFilter.entities.ceo_id"];
          established?: parameters["rowFilter.entities.established"];
          website?: parameters["rowFilter.entities.website"];
          email?: parameters["rowFilter.entities.email"];
          employee_name?: parameters["rowFilter.entities.employee_name"];
          country_id?: parameters["rowFilter.entities.country_id"];
          city_id?: parameters["rowFilter.entities.city_id"];
          street?: parameters["rowFilter.entities.street"];
          building?: parameters["rowFilter.entities.building"];
          landmark?: parameters["rowFilter.entities.landmark"];
          updated_by?: parameters["rowFilter.entities.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["entities"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** entities */
          entities?: definitions["entities"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.entities.id"];
          created_at?: parameters["rowFilter.entities.created_at"];
          updated_at?: parameters["rowFilter.entities.updated_at"];
          created_by?: parameters["rowFilter.entities.created_by"];
          name?: parameters["rowFilter.entities.name"];
          trading_number?: parameters["rowFilter.entities.trading_number"];
          tax_number?: parameters["rowFilter.entities.tax_number"];
          activity?: parameters["rowFilter.entities.activity"];
          type?: parameters["rowFilter.entities.type"];
          parent_id?: parameters["rowFilter.entities.parent_id"];
          entity_type_id?: parameters["rowFilter.entities.entity_type_id"];
          logo_id?: parameters["rowFilter.entities.logo_id"];
          slogan?: parameters["rowFilter.entities.slogan"];
          phone?: parameters["rowFilter.entities.phone"];
          nationality_id?: parameters["rowFilter.entities.nationality_id"];
          ceo_id?: parameters["rowFilter.entities.ceo_id"];
          established?: parameters["rowFilter.entities.established"];
          website?: parameters["rowFilter.entities.website"];
          email?: parameters["rowFilter.entities.email"];
          employee_name?: parameters["rowFilter.entities.employee_name"];
          country_id?: parameters["rowFilter.entities.country_id"];
          city_id?: parameters["rowFilter.entities.city_id"];
          street?: parameters["rowFilter.entities.street"];
          building?: parameters["rowFilter.entities.building"];
          landmark?: parameters["rowFilter.entities.landmark"];
          updated_by?: parameters["rowFilter.entities.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.entities.id"];
          created_at?: parameters["rowFilter.entities.created_at"];
          updated_at?: parameters["rowFilter.entities.updated_at"];
          created_by?: parameters["rowFilter.entities.created_by"];
          name?: parameters["rowFilter.entities.name"];
          trading_number?: parameters["rowFilter.entities.trading_number"];
          tax_number?: parameters["rowFilter.entities.tax_number"];
          activity?: parameters["rowFilter.entities.activity"];
          type?: parameters["rowFilter.entities.type"];
          parent_id?: parameters["rowFilter.entities.parent_id"];
          entity_type_id?: parameters["rowFilter.entities.entity_type_id"];
          logo_id?: parameters["rowFilter.entities.logo_id"];
          slogan?: parameters["rowFilter.entities.slogan"];
          phone?: parameters["rowFilter.entities.phone"];
          nationality_id?: parameters["rowFilter.entities.nationality_id"];
          ceo_id?: parameters["rowFilter.entities.ceo_id"];
          established?: parameters["rowFilter.entities.established"];
          website?: parameters["rowFilter.entities.website"];
          email?: parameters["rowFilter.entities.email"];
          employee_name?: parameters["rowFilter.entities.employee_name"];
          country_id?: parameters["rowFilter.entities.country_id"];
          city_id?: parameters["rowFilter.entities.city_id"];
          street?: parameters["rowFilter.entities.street"];
          building?: parameters["rowFilter.entities.building"];
          landmark?: parameters["rowFilter.entities.landmark"];
          updated_by?: parameters["rowFilter.entities.updated_by"];
        };
        body: {
          /** entities */
          entities?: definitions["entities"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_marriage_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_marriage_documents.created_at"];
          updated_at?: parameters["rowFilter.join_marriage_documents.updated_at"];
          created_by?: parameters["rowFilter.join_marriage_documents.created_by"];
          marriage_id?: parameters["rowFilter.join_marriage_documents.marriage_id"];
          image_id?: parameters["rowFilter.join_marriage_documents.image_id"];
          owner_id?: parameters["rowFilter.join_marriage_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_marriage_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_marriage_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_marriage_documents */
          join_marriage_documents?: definitions["join_marriage_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_marriage_documents.created_at"];
          updated_at?: parameters["rowFilter.join_marriage_documents.updated_at"];
          created_by?: parameters["rowFilter.join_marriage_documents.created_by"];
          marriage_id?: parameters["rowFilter.join_marriage_documents.marriage_id"];
          image_id?: parameters["rowFilter.join_marriage_documents.image_id"];
          owner_id?: parameters["rowFilter.join_marriage_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_marriage_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_marriage_documents.created_at"];
          updated_at?: parameters["rowFilter.join_marriage_documents.updated_at"];
          created_by?: parameters["rowFilter.join_marriage_documents.created_by"];
          marriage_id?: parameters["rowFilter.join_marriage_documents.marriage_id"];
          image_id?: parameters["rowFilter.join_marriage_documents.image_id"];
          owner_id?: parameters["rowFilter.join_marriage_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_marriage_documents.updated_by"];
        };
        body: {
          /** join_marriage_documents */
          join_marriage_documents?: definitions["join_marriage_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/factory_branches": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.factory_branches.id"];
          created_at?: parameters["rowFilter.factory_branches.created_at"];
          updated_at?: parameters["rowFilter.factory_branches.updated_at"];
          employee_name?: parameters["rowFilter.factory_branches.employee_name"];
          phone?: parameters["rowFilter.factory_branches.phone"];
          email?: parameters["rowFilter.factory_branches.email"];
          website?: parameters["rowFilter.factory_branches.website"];
          updated_by?: parameters["rowFilter.factory_branches.updated_by"];
          owner_id?: parameters["rowFilter.factory_branches.owner_id"];
          country_id?: parameters["rowFilter.factory_branches.country_id"];
          city_id?: parameters["rowFilter.factory_branches.city_id"];
          street?: parameters["rowFilter.factory_branches.street"];
          building?: parameters["rowFilter.factory_branches.building"];
          landmark?: parameters["rowFilter.factory_branches.landmark"];
          gps?: parameters["rowFilter.factory_branches.gps"];
          created_by?: parameters["rowFilter.factory_branches.created_by"];
          factory_id?: parameters["rowFilter.factory_branches.factory_id"];
          name?: parameters["rowFilter.factory_branches.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["factory_branches"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** factory_branches */
          factory_branches?: definitions["factory_branches"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.factory_branches.id"];
          created_at?: parameters["rowFilter.factory_branches.created_at"];
          updated_at?: parameters["rowFilter.factory_branches.updated_at"];
          employee_name?: parameters["rowFilter.factory_branches.employee_name"];
          phone?: parameters["rowFilter.factory_branches.phone"];
          email?: parameters["rowFilter.factory_branches.email"];
          website?: parameters["rowFilter.factory_branches.website"];
          updated_by?: parameters["rowFilter.factory_branches.updated_by"];
          owner_id?: parameters["rowFilter.factory_branches.owner_id"];
          country_id?: parameters["rowFilter.factory_branches.country_id"];
          city_id?: parameters["rowFilter.factory_branches.city_id"];
          street?: parameters["rowFilter.factory_branches.street"];
          building?: parameters["rowFilter.factory_branches.building"];
          landmark?: parameters["rowFilter.factory_branches.landmark"];
          gps?: parameters["rowFilter.factory_branches.gps"];
          created_by?: parameters["rowFilter.factory_branches.created_by"];
          factory_id?: parameters["rowFilter.factory_branches.factory_id"];
          name?: parameters["rowFilter.factory_branches.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.factory_branches.id"];
          created_at?: parameters["rowFilter.factory_branches.created_at"];
          updated_at?: parameters["rowFilter.factory_branches.updated_at"];
          employee_name?: parameters["rowFilter.factory_branches.employee_name"];
          phone?: parameters["rowFilter.factory_branches.phone"];
          email?: parameters["rowFilter.factory_branches.email"];
          website?: parameters["rowFilter.factory_branches.website"];
          updated_by?: parameters["rowFilter.factory_branches.updated_by"];
          owner_id?: parameters["rowFilter.factory_branches.owner_id"];
          country_id?: parameters["rowFilter.factory_branches.country_id"];
          city_id?: parameters["rowFilter.factory_branches.city_id"];
          street?: parameters["rowFilter.factory_branches.street"];
          building?: parameters["rowFilter.factory_branches.building"];
          landmark?: parameters["rowFilter.factory_branches.landmark"];
          gps?: parameters["rowFilter.factory_branches.gps"];
          created_by?: parameters["rowFilter.factory_branches.created_by"];
          factory_id?: parameters["rowFilter.factory_branches.factory_id"];
          name?: parameters["rowFilter.factory_branches.name"];
        };
        body: {
          /** factory_branches */
          factory_branches?: definitions["factory_branches"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_product_product_type_attribute_values": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_product_type_attribute_values.created_at"];
          updated_at?: parameters["rowFilter.join_product_product_type_attribute_values.updated_at"];
          created_by?: parameters["rowFilter.join_product_product_type_attribute_values.created_by"];
          product_id?: parameters["rowFilter.join_product_product_type_attribute_values.product_id"];
          owner_id?: parameters["rowFilter.join_product_product_type_attribute_values.owner_id"];
          product_type_attribute_value_id?: parameters["rowFilter.join_product_product_type_attribute_values.product_type_attribute_value_id"];
          updated_by?: parameters["rowFilter.join_product_product_type_attribute_values.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_product_product_type_attribute_values"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_product_product_type_attribute_values */
          join_product_product_type_attribute_values?: definitions["join_product_product_type_attribute_values"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_product_type_attribute_values.created_at"];
          updated_at?: parameters["rowFilter.join_product_product_type_attribute_values.updated_at"];
          created_by?: parameters["rowFilter.join_product_product_type_attribute_values.created_by"];
          product_id?: parameters["rowFilter.join_product_product_type_attribute_values.product_id"];
          owner_id?: parameters["rowFilter.join_product_product_type_attribute_values.owner_id"];
          product_type_attribute_value_id?: parameters["rowFilter.join_product_product_type_attribute_values.product_type_attribute_value_id"];
          updated_by?: parameters["rowFilter.join_product_product_type_attribute_values.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_product_product_type_attribute_values.created_at"];
          updated_at?: parameters["rowFilter.join_product_product_type_attribute_values.updated_at"];
          created_by?: parameters["rowFilter.join_product_product_type_attribute_values.created_by"];
          product_id?: parameters["rowFilter.join_product_product_type_attribute_values.product_id"];
          owner_id?: parameters["rowFilter.join_product_product_type_attribute_values.owner_id"];
          product_type_attribute_value_id?: parameters["rowFilter.join_product_product_type_attribute_values.product_type_attribute_value_id"];
          updated_by?: parameters["rowFilter.join_product_product_type_attribute_values.updated_by"];
        };
        body: {
          /** join_product_product_type_attribute_values */
          join_product_product_type_attribute_values?: definitions["join_product_product_type_attribute_values"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_transfers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_transfers.id"];
          created_at?: parameters["rowFilter.request_transfers.created_at"];
          updated_at?: parameters["rowFilter.request_transfers.updated_at"];
          created_by?: parameters["rowFilter.request_transfers.created_by"];
          notes?: parameters["rowFilter.request_transfers.notes"];
          owner_id?: parameters["rowFilter.request_transfers.owner_id"];
          title?: parameters["rowFilter.request_transfers.title"];
          type?: parameters["rowFilter.request_transfers.type"];
          updated_by?: parameters["rowFilter.request_transfers.updated_by"];
          status?: parameters["rowFilter.request_transfers.status"];
          date_of_transfer?: parameters["rowFilter.request_transfers.date_of_transfer"];
          job_title?: parameters["rowFilter.request_transfers.job_title"];
          entity?: parameters["rowFilter.request_transfers.entity"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_transfers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_transfers */
          request_transfers?: definitions["request_transfers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_transfers.id"];
          created_at?: parameters["rowFilter.request_transfers.created_at"];
          updated_at?: parameters["rowFilter.request_transfers.updated_at"];
          created_by?: parameters["rowFilter.request_transfers.created_by"];
          notes?: parameters["rowFilter.request_transfers.notes"];
          owner_id?: parameters["rowFilter.request_transfers.owner_id"];
          title?: parameters["rowFilter.request_transfers.title"];
          type?: parameters["rowFilter.request_transfers.type"];
          updated_by?: parameters["rowFilter.request_transfers.updated_by"];
          status?: parameters["rowFilter.request_transfers.status"];
          date_of_transfer?: parameters["rowFilter.request_transfers.date_of_transfer"];
          job_title?: parameters["rowFilter.request_transfers.job_title"];
          entity?: parameters["rowFilter.request_transfers.entity"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_transfers.id"];
          created_at?: parameters["rowFilter.request_transfers.created_at"];
          updated_at?: parameters["rowFilter.request_transfers.updated_at"];
          created_by?: parameters["rowFilter.request_transfers.created_by"];
          notes?: parameters["rowFilter.request_transfers.notes"];
          owner_id?: parameters["rowFilter.request_transfers.owner_id"];
          title?: parameters["rowFilter.request_transfers.title"];
          type?: parameters["rowFilter.request_transfers.type"];
          updated_by?: parameters["rowFilter.request_transfers.updated_by"];
          status?: parameters["rowFilter.request_transfers.status"];
          date_of_transfer?: parameters["rowFilter.request_transfers.date_of_transfer"];
          job_title?: parameters["rowFilter.request_transfers.job_title"];
          entity?: parameters["rowFilter.request_transfers.entity"];
        };
        body: {
          /** request_transfers */
          request_transfers?: definitions["request_transfers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_roles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          group_name?: parameters["rowFilter.user_roles.group_name"];
          role?: parameters["rowFilter.user_roles.role"];
          email?: parameters["rowFilter.user_roles.email"];
          group_id?: parameters["rowFilter.user_roles.group_id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_roles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          group_name?: parameters["rowFilter.user_roles.group_name"];
          role?: parameters["rowFilter.user_roles.role"];
          email?: parameters["rowFilter.user_roles.email"];
          group_id?: parameters["rowFilter.user_roles.group_id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          group_name?: parameters["rowFilter.user_roles.group_name"];
          role?: parameters["rowFilter.user_roles.role"];
          email?: parameters["rowFilter.user_roles.email"];
          group_id?: parameters["rowFilter.user_roles.group_id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
        };
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/system_insurance_plans": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.system_insurance_plans.id"];
          created_at?: parameters["rowFilter.system_insurance_plans.created_at"];
          updated_at?: parameters["rowFilter.system_insurance_plans.updated_at"];
          created_by?: parameters["rowFilter.system_insurance_plans.created_by"];
          name?: parameters["rowFilter.system_insurance_plans.name"];
          owner_id?: parameters["rowFilter.system_insurance_plans.owner_id"];
          insurance_plan_id?: parameters["rowFilter.system_insurance_plans.insurance_plan_id"];
          updated_by?: parameters["rowFilter.system_insurance_plans.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["system_insurance_plans"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** system_insurance_plans */
          system_insurance_plans?: definitions["system_insurance_plans"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.system_insurance_plans.id"];
          created_at?: parameters["rowFilter.system_insurance_plans.created_at"];
          updated_at?: parameters["rowFilter.system_insurance_plans.updated_at"];
          created_by?: parameters["rowFilter.system_insurance_plans.created_by"];
          name?: parameters["rowFilter.system_insurance_plans.name"];
          owner_id?: parameters["rowFilter.system_insurance_plans.owner_id"];
          insurance_plan_id?: parameters["rowFilter.system_insurance_plans.insurance_plan_id"];
          updated_by?: parameters["rowFilter.system_insurance_plans.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.system_insurance_plans.id"];
          created_at?: parameters["rowFilter.system_insurance_plans.created_at"];
          updated_at?: parameters["rowFilter.system_insurance_plans.updated_at"];
          created_by?: parameters["rowFilter.system_insurance_plans.created_by"];
          name?: parameters["rowFilter.system_insurance_plans.name"];
          owner_id?: parameters["rowFilter.system_insurance_plans.owner_id"];
          insurance_plan_id?: parameters["rowFilter.system_insurance_plans.insurance_plan_id"];
          updated_by?: parameters["rowFilter.system_insurance_plans.updated_by"];
        };
        body: {
          /** system_insurance_plans */
          system_insurance_plans?: definitions["system_insurance_plans"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_trainer_registrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_trainer_registrations.id"];
          created_at?: parameters["rowFilter.request_trainer_registrations.created_at"];
          updated_at?: parameters["rowFilter.request_trainer_registrations.updated_at"];
          created_by?: parameters["rowFilter.request_trainer_registrations.created_by"];
          notes?: parameters["rowFilter.request_trainer_registrations.notes"];
          owner_id?: parameters["rowFilter.request_trainer_registrations.owner_id"];
          title?: parameters["rowFilter.request_trainer_registrations.title"];
          type?: parameters["rowFilter.request_trainer_registrations.type"];
          updated_by?: parameters["rowFilter.request_trainer_registrations.updated_by"];
          status?: parameters["rowFilter.request_trainer_registrations.status"];
          training_id?: parameters["rowFilter.request_trainer_registrations.training_id"];
          qualifications?: parameters["rowFilter.request_trainer_registrations.qualifications"];
          entity_id?: parameters["rowFilter.request_trainer_registrations.entity_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_trainer_registrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_trainer_registrations */
          request_trainer_registrations?: definitions["request_trainer_registrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_trainer_registrations.id"];
          created_at?: parameters["rowFilter.request_trainer_registrations.created_at"];
          updated_at?: parameters["rowFilter.request_trainer_registrations.updated_at"];
          created_by?: parameters["rowFilter.request_trainer_registrations.created_by"];
          notes?: parameters["rowFilter.request_trainer_registrations.notes"];
          owner_id?: parameters["rowFilter.request_trainer_registrations.owner_id"];
          title?: parameters["rowFilter.request_trainer_registrations.title"];
          type?: parameters["rowFilter.request_trainer_registrations.type"];
          updated_by?: parameters["rowFilter.request_trainer_registrations.updated_by"];
          status?: parameters["rowFilter.request_trainer_registrations.status"];
          training_id?: parameters["rowFilter.request_trainer_registrations.training_id"];
          qualifications?: parameters["rowFilter.request_trainer_registrations.qualifications"];
          entity_id?: parameters["rowFilter.request_trainer_registrations.entity_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_trainer_registrations.id"];
          created_at?: parameters["rowFilter.request_trainer_registrations.created_at"];
          updated_at?: parameters["rowFilter.request_trainer_registrations.updated_at"];
          created_by?: parameters["rowFilter.request_trainer_registrations.created_by"];
          notes?: parameters["rowFilter.request_trainer_registrations.notes"];
          owner_id?: parameters["rowFilter.request_trainer_registrations.owner_id"];
          title?: parameters["rowFilter.request_trainer_registrations.title"];
          type?: parameters["rowFilter.request_trainer_registrations.type"];
          updated_by?: parameters["rowFilter.request_trainer_registrations.updated_by"];
          status?: parameters["rowFilter.request_trainer_registrations.status"];
          training_id?: parameters["rowFilter.request_trainer_registrations.training_id"];
          qualifications?: parameters["rowFilter.request_trainer_registrations.qualifications"];
          entity_id?: parameters["rowFilter.request_trainer_registrations.entity_id"];
        };
        body: {
          /** request_trainer_registrations */
          request_trainer_registrations?: definitions["request_trainer_registrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/advances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.advances.id"];
          created_at?: parameters["rowFilter.advances.created_at"];
          created_by?: parameters["rowFilter.advances.created_by"];
          owner_id?: parameters["rowFilter.advances.owner_id"];
          updated_at?: parameters["rowFilter.advances.updated_at"];
          amount?: parameters["rowFilter.advances.amount"];
          notes?: parameters["rowFilter.advances.notes"];
          employee_id?: parameters["rowFilter.advances.employee_id"];
          advance_request_id?: parameters["rowFilter.advances.advance_request_id"];
          installments?: parameters["rowFilter.advances.installments"];
          date_of_payment?: parameters["rowFilter.advances.date_of_payment"];
          date_of_receipt?: parameters["rowFilter.advances.date_of_receipt"];
          advance_type_id?: parameters["rowFilter.advances.advance_type_id"];
          bank_account_id?: parameters["rowFilter.advances.bank_account_id"];
          updated_by?: parameters["rowFilter.advances.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["advances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** advances */
          advances?: definitions["advances"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.advances.id"];
          created_at?: parameters["rowFilter.advances.created_at"];
          created_by?: parameters["rowFilter.advances.created_by"];
          owner_id?: parameters["rowFilter.advances.owner_id"];
          updated_at?: parameters["rowFilter.advances.updated_at"];
          amount?: parameters["rowFilter.advances.amount"];
          notes?: parameters["rowFilter.advances.notes"];
          employee_id?: parameters["rowFilter.advances.employee_id"];
          advance_request_id?: parameters["rowFilter.advances.advance_request_id"];
          installments?: parameters["rowFilter.advances.installments"];
          date_of_payment?: parameters["rowFilter.advances.date_of_payment"];
          date_of_receipt?: parameters["rowFilter.advances.date_of_receipt"];
          advance_type_id?: parameters["rowFilter.advances.advance_type_id"];
          bank_account_id?: parameters["rowFilter.advances.bank_account_id"];
          updated_by?: parameters["rowFilter.advances.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.advances.id"];
          created_at?: parameters["rowFilter.advances.created_at"];
          created_by?: parameters["rowFilter.advances.created_by"];
          owner_id?: parameters["rowFilter.advances.owner_id"];
          updated_at?: parameters["rowFilter.advances.updated_at"];
          amount?: parameters["rowFilter.advances.amount"];
          notes?: parameters["rowFilter.advances.notes"];
          employee_id?: parameters["rowFilter.advances.employee_id"];
          advance_request_id?: parameters["rowFilter.advances.advance_request_id"];
          installments?: parameters["rowFilter.advances.installments"];
          date_of_payment?: parameters["rowFilter.advances.date_of_payment"];
          date_of_receipt?: parameters["rowFilter.advances.date_of_receipt"];
          advance_type_id?: parameters["rowFilter.advances.advance_type_id"];
          bank_account_id?: parameters["rowFilter.advances.bank_account_id"];
          updated_by?: parameters["rowFilter.advances.updated_by"];
        };
        body: {
          /** advances */
          advances?: definitions["advances"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/complaint_financial": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.complaint_financial.id"];
          created_at?: parameters["rowFilter.complaint_financial.created_at"];
          updated_at?: parameters["rowFilter.complaint_financial.updated_at"];
          created_by?: parameters["rowFilter.complaint_financial.created_by"];
          notes?: parameters["rowFilter.complaint_financial.notes"];
          owner_id?: parameters["rowFilter.complaint_financial.owner_id"];
          title?: parameters["rowFilter.complaint_financial.title"];
          type?: parameters["rowFilter.complaint_financial.type"];
          updated_by?: parameters["rowFilter.complaint_financial.updated_by"];
          amount?: parameters["rowFilter.complaint_financial.amount"];
          financial_complaint_type_id?: parameters["rowFilter.complaint_financial.financial_complaint_type_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["complaint_financial"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** complaint_financial */
          complaint_financial?: definitions["complaint_financial"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.complaint_financial.id"];
          created_at?: parameters["rowFilter.complaint_financial.created_at"];
          updated_at?: parameters["rowFilter.complaint_financial.updated_at"];
          created_by?: parameters["rowFilter.complaint_financial.created_by"];
          notes?: parameters["rowFilter.complaint_financial.notes"];
          owner_id?: parameters["rowFilter.complaint_financial.owner_id"];
          title?: parameters["rowFilter.complaint_financial.title"];
          type?: parameters["rowFilter.complaint_financial.type"];
          updated_by?: parameters["rowFilter.complaint_financial.updated_by"];
          amount?: parameters["rowFilter.complaint_financial.amount"];
          financial_complaint_type_id?: parameters["rowFilter.complaint_financial.financial_complaint_type_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.complaint_financial.id"];
          created_at?: parameters["rowFilter.complaint_financial.created_at"];
          updated_at?: parameters["rowFilter.complaint_financial.updated_at"];
          created_by?: parameters["rowFilter.complaint_financial.created_by"];
          notes?: parameters["rowFilter.complaint_financial.notes"];
          owner_id?: parameters["rowFilter.complaint_financial.owner_id"];
          title?: parameters["rowFilter.complaint_financial.title"];
          type?: parameters["rowFilter.complaint_financial.type"];
          updated_by?: parameters["rowFilter.complaint_financial.updated_by"];
          amount?: parameters["rowFilter.complaint_financial.amount"];
          financial_complaint_type_id?: parameters["rowFilter.complaint_financial.financial_complaint_type_id"];
        };
        body: {
          /** complaint_financial */
          complaint_financial?: definitions["complaint_financial"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_benefits": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_benefits.id"];
          created_at?: parameters["rowFilter.request_benefits.created_at"];
          updated_at?: parameters["rowFilter.request_benefits.updated_at"];
          created_by?: parameters["rowFilter.request_benefits.created_by"];
          notes?: parameters["rowFilter.request_benefits.notes"];
          owner_id?: parameters["rowFilter.request_benefits.owner_id"];
          title?: parameters["rowFilter.request_benefits.title"];
          type?: parameters["rowFilter.request_benefits.type"];
          updated_by?: parameters["rowFilter.request_benefits.updated_by"];
          status?: parameters["rowFilter.request_benefits.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_benefits"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_benefits */
          request_benefits?: definitions["request_benefits"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_benefits.id"];
          created_at?: parameters["rowFilter.request_benefits.created_at"];
          updated_at?: parameters["rowFilter.request_benefits.updated_at"];
          created_by?: parameters["rowFilter.request_benefits.created_by"];
          notes?: parameters["rowFilter.request_benefits.notes"];
          owner_id?: parameters["rowFilter.request_benefits.owner_id"];
          title?: parameters["rowFilter.request_benefits.title"];
          type?: parameters["rowFilter.request_benefits.type"];
          updated_by?: parameters["rowFilter.request_benefits.updated_by"];
          status?: parameters["rowFilter.request_benefits.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_benefits.id"];
          created_at?: parameters["rowFilter.request_benefits.created_at"];
          updated_at?: parameters["rowFilter.request_benefits.updated_at"];
          created_by?: parameters["rowFilter.request_benefits.created_by"];
          notes?: parameters["rowFilter.request_benefits.notes"];
          owner_id?: parameters["rowFilter.request_benefits.owner_id"];
          title?: parameters["rowFilter.request_benefits.title"];
          type?: parameters["rowFilter.request_benefits.type"];
          updated_by?: parameters["rowFilter.request_benefits.updated_by"];
          status?: parameters["rowFilter.request_benefits.status"];
        };
        body: {
          /** request_benefits */
          request_benefits?: definitions["request_benefits"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_delegations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_delegations.id"];
          created_at?: parameters["rowFilter.request_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_delegations.created_by"];
          notes?: parameters["rowFilter.request_delegations.notes"];
          owner_id?: parameters["rowFilter.request_delegations.owner_id"];
          title?: parameters["rowFilter.request_delegations.title"];
          type?: parameters["rowFilter.request_delegations.type"];
          updated_by?: parameters["rowFilter.request_delegations.updated_by"];
          status?: parameters["rowFilter.request_delegations.status"];
          reason?: parameters["rowFilter.request_delegations.reason"];
          from?: parameters["rowFilter.request_delegations.from"];
          to?: parameters["rowFilter.request_delegations.to"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_delegations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_delegations */
          request_delegations?: definitions["request_delegations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_delegations.id"];
          created_at?: parameters["rowFilter.request_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_delegations.created_by"];
          notes?: parameters["rowFilter.request_delegations.notes"];
          owner_id?: parameters["rowFilter.request_delegations.owner_id"];
          title?: parameters["rowFilter.request_delegations.title"];
          type?: parameters["rowFilter.request_delegations.type"];
          updated_by?: parameters["rowFilter.request_delegations.updated_by"];
          status?: parameters["rowFilter.request_delegations.status"];
          reason?: parameters["rowFilter.request_delegations.reason"];
          from?: parameters["rowFilter.request_delegations.from"];
          to?: parameters["rowFilter.request_delegations.to"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_delegations.id"];
          created_at?: parameters["rowFilter.request_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_delegations.created_by"];
          notes?: parameters["rowFilter.request_delegations.notes"];
          owner_id?: parameters["rowFilter.request_delegations.owner_id"];
          title?: parameters["rowFilter.request_delegations.title"];
          type?: parameters["rowFilter.request_delegations.type"];
          updated_by?: parameters["rowFilter.request_delegations.updated_by"];
          status?: parameters["rowFilter.request_delegations.status"];
          reason?: parameters["rowFilter.request_delegations.reason"];
          from?: parameters["rowFilter.request_delegations.from"];
          to?: parameters["rowFilter.request_delegations.to"];
        };
        body: {
          /** request_delegations */
          request_delegations?: definitions["request_delegations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_external_delegations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_external_delegations.id"];
          created_at?: parameters["rowFilter.request_external_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_external_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_external_delegations.created_by"];
          notes?: parameters["rowFilter.request_external_delegations.notes"];
          owner_id?: parameters["rowFilter.request_external_delegations.owner_id"];
          title?: parameters["rowFilter.request_external_delegations.title"];
          type?: parameters["rowFilter.request_external_delegations.type"];
          updated_by?: parameters["rowFilter.request_external_delegations.updated_by"];
          status?: parameters["rowFilter.request_external_delegations.status"];
          reason?: parameters["rowFilter.request_external_delegations.reason"];
          from?: parameters["rowFilter.request_external_delegations.from"];
          to?: parameters["rowFilter.request_external_delegations.to"];
          destination?: parameters["rowFilter.request_external_delegations.destination"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_external_delegations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_external_delegations */
          request_external_delegations?: definitions["request_external_delegations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_external_delegations.id"];
          created_at?: parameters["rowFilter.request_external_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_external_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_external_delegations.created_by"];
          notes?: parameters["rowFilter.request_external_delegations.notes"];
          owner_id?: parameters["rowFilter.request_external_delegations.owner_id"];
          title?: parameters["rowFilter.request_external_delegations.title"];
          type?: parameters["rowFilter.request_external_delegations.type"];
          updated_by?: parameters["rowFilter.request_external_delegations.updated_by"];
          status?: parameters["rowFilter.request_external_delegations.status"];
          reason?: parameters["rowFilter.request_external_delegations.reason"];
          from?: parameters["rowFilter.request_external_delegations.from"];
          to?: parameters["rowFilter.request_external_delegations.to"];
          destination?: parameters["rowFilter.request_external_delegations.destination"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_external_delegations.id"];
          created_at?: parameters["rowFilter.request_external_delegations.created_at"];
          updated_at?: parameters["rowFilter.request_external_delegations.updated_at"];
          created_by?: parameters["rowFilter.request_external_delegations.created_by"];
          notes?: parameters["rowFilter.request_external_delegations.notes"];
          owner_id?: parameters["rowFilter.request_external_delegations.owner_id"];
          title?: parameters["rowFilter.request_external_delegations.title"];
          type?: parameters["rowFilter.request_external_delegations.type"];
          updated_by?: parameters["rowFilter.request_external_delegations.updated_by"];
          status?: parameters["rowFilter.request_external_delegations.status"];
          reason?: parameters["rowFilter.request_external_delegations.reason"];
          from?: parameters["rowFilter.request_external_delegations.from"];
          to?: parameters["rowFilter.request_external_delegations.to"];
          destination?: parameters["rowFilter.request_external_delegations.destination"];
        };
        body: {
          /** request_external_delegations */
          request_external_delegations?: definitions["request_external_delegations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/base_call_for_action": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_call_for_action.id"];
          created_at?: parameters["rowFilter.base_call_for_action.created_at"];
          updated_at?: parameters["rowFilter.base_call_for_action.updated_at"];
          created_by?: parameters["rowFilter.base_call_for_action.created_by"];
          notes?: parameters["rowFilter.base_call_for_action.notes"];
          owner_id?: parameters["rowFilter.base_call_for_action.owner_id"];
          title?: parameters["rowFilter.base_call_for_action.title"];
          type?: parameters["rowFilter.base_call_for_action.type"];
          updated_by?: parameters["rowFilter.base_call_for_action.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["base_call_for_action"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** base_call_for_action */
          base_call_for_action?: definitions["base_call_for_action"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_call_for_action.id"];
          created_at?: parameters["rowFilter.base_call_for_action.created_at"];
          updated_at?: parameters["rowFilter.base_call_for_action.updated_at"];
          created_by?: parameters["rowFilter.base_call_for_action.created_by"];
          notes?: parameters["rowFilter.base_call_for_action.notes"];
          owner_id?: parameters["rowFilter.base_call_for_action.owner_id"];
          title?: parameters["rowFilter.base_call_for_action.title"];
          type?: parameters["rowFilter.base_call_for_action.type"];
          updated_by?: parameters["rowFilter.base_call_for_action.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_call_for_action.id"];
          created_at?: parameters["rowFilter.base_call_for_action.created_at"];
          updated_at?: parameters["rowFilter.base_call_for_action.updated_at"];
          created_by?: parameters["rowFilter.base_call_for_action.created_by"];
          notes?: parameters["rowFilter.base_call_for_action.notes"];
          owner_id?: parameters["rowFilter.base_call_for_action.owner_id"];
          title?: parameters["rowFilter.base_call_for_action.title"];
          type?: parameters["rowFilter.base_call_for_action.type"];
          updated_by?: parameters["rowFilter.base_call_for_action.updated_by"];
        };
        body: {
          /** base_call_for_action */
          base_call_for_action?: definitions["base_call_for_action"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/entity_types": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.entity_types.id"];
          created_at?: parameters["rowFilter.entity_types.created_at"];
          created_by?: parameters["rowFilter.entity_types.created_by"];
          updated_at?: parameters["rowFilter.entity_types.updated_at"];
          name?: parameters["rowFilter.entity_types.name"];
          category?: parameters["rowFilter.entity_types.category"];
          level?: parameters["rowFilter.entity_types.level"];
          slug?: parameters["rowFilter.entity_types.slug"];
          description?: parameters["rowFilter.entity_types.description"];
          updated_by?: parameters["rowFilter.entity_types.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["entity_types"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** entity_types */
          entity_types?: definitions["entity_types"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.entity_types.id"];
          created_at?: parameters["rowFilter.entity_types.created_at"];
          created_by?: parameters["rowFilter.entity_types.created_by"];
          updated_at?: parameters["rowFilter.entity_types.updated_at"];
          name?: parameters["rowFilter.entity_types.name"];
          category?: parameters["rowFilter.entity_types.category"];
          level?: parameters["rowFilter.entity_types.level"];
          slug?: parameters["rowFilter.entity_types.slug"];
          description?: parameters["rowFilter.entity_types.description"];
          updated_by?: parameters["rowFilter.entity_types.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.entity_types.id"];
          created_at?: parameters["rowFilter.entity_types.created_at"];
          created_by?: parameters["rowFilter.entity_types.created_by"];
          updated_at?: parameters["rowFilter.entity_types.updated_at"];
          name?: parameters["rowFilter.entity_types.name"];
          category?: parameters["rowFilter.entity_types.category"];
          level?: parameters["rowFilter.entity_types.level"];
          slug?: parameters["rowFilter.entity_types.slug"];
          description?: parameters["rowFilter.entity_types.description"];
          updated_by?: parameters["rowFilter.entity_types.updated_by"];
        };
        body: {
          /** entity_types */
          entity_types?: definitions["entity_types"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_resignations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_resignations.id"];
          created_at?: parameters["rowFilter.request_resignations.created_at"];
          updated_at?: parameters["rowFilter.request_resignations.updated_at"];
          created_by?: parameters["rowFilter.request_resignations.created_by"];
          notes?: parameters["rowFilter.request_resignations.notes"];
          owner_id?: parameters["rowFilter.request_resignations.owner_id"];
          title?: parameters["rowFilter.request_resignations.title"];
          type?: parameters["rowFilter.request_resignations.type"];
          updated_by?: parameters["rowFilter.request_resignations.updated_by"];
          status?: parameters["rowFilter.request_resignations.status"];
          reason?: parameters["rowFilter.request_resignations.reason"];
          date_of_effective_resignation?: parameters["rowFilter.request_resignations.date_of_effective_resignation"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_resignations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_resignations */
          request_resignations?: definitions["request_resignations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_resignations.id"];
          created_at?: parameters["rowFilter.request_resignations.created_at"];
          updated_at?: parameters["rowFilter.request_resignations.updated_at"];
          created_by?: parameters["rowFilter.request_resignations.created_by"];
          notes?: parameters["rowFilter.request_resignations.notes"];
          owner_id?: parameters["rowFilter.request_resignations.owner_id"];
          title?: parameters["rowFilter.request_resignations.title"];
          type?: parameters["rowFilter.request_resignations.type"];
          updated_by?: parameters["rowFilter.request_resignations.updated_by"];
          status?: parameters["rowFilter.request_resignations.status"];
          reason?: parameters["rowFilter.request_resignations.reason"];
          date_of_effective_resignation?: parameters["rowFilter.request_resignations.date_of_effective_resignation"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_resignations.id"];
          created_at?: parameters["rowFilter.request_resignations.created_at"];
          updated_at?: parameters["rowFilter.request_resignations.updated_at"];
          created_by?: parameters["rowFilter.request_resignations.created_by"];
          notes?: parameters["rowFilter.request_resignations.notes"];
          owner_id?: parameters["rowFilter.request_resignations.owner_id"];
          title?: parameters["rowFilter.request_resignations.title"];
          type?: parameters["rowFilter.request_resignations.type"];
          updated_by?: parameters["rowFilter.request_resignations.updated_by"];
          status?: parameters["rowFilter.request_resignations.status"];
          reason?: parameters["rowFilter.request_resignations.reason"];
          date_of_effective_resignation?: parameters["rowFilter.request_resignations.date_of_effective_resignation"];
        };
        body: {
          /** request_resignations */
          request_resignations?: definitions["request_resignations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/payroll_deductions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.payroll_deductions.id"];
          created_at?: parameters["rowFilter.payroll_deductions.created_at"];
          created_by?: parameters["rowFilter.payroll_deductions.created_by"];
          owner_id?: parameters["rowFilter.payroll_deductions.owner_id"];
          updated_at?: parameters["rowFilter.payroll_deductions.updated_at"];
          payroll_deduction_type_id?: parameters["rowFilter.payroll_deductions.payroll_deduction_type_id"];
          amount?: parameters["rowFilter.payroll_deductions.amount"];
          updated_by?: parameters["rowFilter.payroll_deductions.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["payroll_deductions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** payroll_deductions */
          payroll_deductions?: definitions["payroll_deductions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.payroll_deductions.id"];
          created_at?: parameters["rowFilter.payroll_deductions.created_at"];
          created_by?: parameters["rowFilter.payroll_deductions.created_by"];
          owner_id?: parameters["rowFilter.payroll_deductions.owner_id"];
          updated_at?: parameters["rowFilter.payroll_deductions.updated_at"];
          payroll_deduction_type_id?: parameters["rowFilter.payroll_deductions.payroll_deduction_type_id"];
          amount?: parameters["rowFilter.payroll_deductions.amount"];
          updated_by?: parameters["rowFilter.payroll_deductions.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.payroll_deductions.id"];
          created_at?: parameters["rowFilter.payroll_deductions.created_at"];
          created_by?: parameters["rowFilter.payroll_deductions.created_by"];
          owner_id?: parameters["rowFilter.payroll_deductions.owner_id"];
          updated_at?: parameters["rowFilter.payroll_deductions.updated_at"];
          payroll_deduction_type_id?: parameters["rowFilter.payroll_deductions.payroll_deduction_type_id"];
          amount?: parameters["rowFilter.payroll_deductions.amount"];
          updated_by?: parameters["rowFilter.payroll_deductions.updated_by"];
        };
        body: {
          /** payroll_deductions */
          payroll_deductions?: definitions["payroll_deductions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/surveys": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.surveys.id"];
          created_at?: parameters["rowFilter.surveys.created_at"];
          created_by?: parameters["rowFilter.surveys.created_by"];
          updated_at?: parameters["rowFilter.surveys.updated_at"];
          name?: parameters["rowFilter.surveys.name"];
          survey_schema?: parameters["rowFilter.surveys.survey_schema"];
          updated_by?: parameters["rowFilter.surveys.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["surveys"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** surveys */
          surveys?: definitions["surveys"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.surveys.id"];
          created_at?: parameters["rowFilter.surveys.created_at"];
          created_by?: parameters["rowFilter.surveys.created_by"];
          updated_at?: parameters["rowFilter.surveys.updated_at"];
          name?: parameters["rowFilter.surveys.name"];
          survey_schema?: parameters["rowFilter.surveys.survey_schema"];
          updated_by?: parameters["rowFilter.surveys.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.surveys.id"];
          created_at?: parameters["rowFilter.surveys.created_at"];
          created_by?: parameters["rowFilter.surveys.created_by"];
          updated_at?: parameters["rowFilter.surveys.updated_at"];
          name?: parameters["rowFilter.surveys.name"];
          survey_schema?: parameters["rowFilter.surveys.survey_schema"];
          updated_by?: parameters["rowFilter.surveys.updated_by"];
        };
        body: {
          /** surveys */
          surveys?: definitions["surveys"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/shipping_companies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shipping_companies.id"];
          created_at?: parameters["rowFilter.shipping_companies.created_at"];
          updated_at?: parameters["rowFilter.shipping_companies.updated_at"];
          employee_name?: parameters["rowFilter.shipping_companies.employee_name"];
          phone?: parameters["rowFilter.shipping_companies.phone"];
          email?: parameters["rowFilter.shipping_companies.email"];
          website?: parameters["rowFilter.shipping_companies.website"];
          updated_by?: parameters["rowFilter.shipping_companies.updated_by"];
          owner_id?: parameters["rowFilter.shipping_companies.owner_id"];
          country_id?: parameters["rowFilter.shipping_companies.country_id"];
          city_id?: parameters["rowFilter.shipping_companies.city_id"];
          street?: parameters["rowFilter.shipping_companies.street"];
          building?: parameters["rowFilter.shipping_companies.building"];
          landmark?: parameters["rowFilter.shipping_companies.landmark"];
          gps?: parameters["rowFilter.shipping_companies.gps"];
          created_by?: parameters["rowFilter.shipping_companies.created_by"];
          name?: parameters["rowFilter.shipping_companies.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["shipping_companies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** shipping_companies */
          shipping_companies?: definitions["shipping_companies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shipping_companies.id"];
          created_at?: parameters["rowFilter.shipping_companies.created_at"];
          updated_at?: parameters["rowFilter.shipping_companies.updated_at"];
          employee_name?: parameters["rowFilter.shipping_companies.employee_name"];
          phone?: parameters["rowFilter.shipping_companies.phone"];
          email?: parameters["rowFilter.shipping_companies.email"];
          website?: parameters["rowFilter.shipping_companies.website"];
          updated_by?: parameters["rowFilter.shipping_companies.updated_by"];
          owner_id?: parameters["rowFilter.shipping_companies.owner_id"];
          country_id?: parameters["rowFilter.shipping_companies.country_id"];
          city_id?: parameters["rowFilter.shipping_companies.city_id"];
          street?: parameters["rowFilter.shipping_companies.street"];
          building?: parameters["rowFilter.shipping_companies.building"];
          landmark?: parameters["rowFilter.shipping_companies.landmark"];
          gps?: parameters["rowFilter.shipping_companies.gps"];
          created_by?: parameters["rowFilter.shipping_companies.created_by"];
          name?: parameters["rowFilter.shipping_companies.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shipping_companies.id"];
          created_at?: parameters["rowFilter.shipping_companies.created_at"];
          updated_at?: parameters["rowFilter.shipping_companies.updated_at"];
          employee_name?: parameters["rowFilter.shipping_companies.employee_name"];
          phone?: parameters["rowFilter.shipping_companies.phone"];
          email?: parameters["rowFilter.shipping_companies.email"];
          website?: parameters["rowFilter.shipping_companies.website"];
          updated_by?: parameters["rowFilter.shipping_companies.updated_by"];
          owner_id?: parameters["rowFilter.shipping_companies.owner_id"];
          country_id?: parameters["rowFilter.shipping_companies.country_id"];
          city_id?: parameters["rowFilter.shipping_companies.city_id"];
          street?: parameters["rowFilter.shipping_companies.street"];
          building?: parameters["rowFilter.shipping_companies.building"];
          landmark?: parameters["rowFilter.shipping_companies.landmark"];
          gps?: parameters["rowFilter.shipping_companies.gps"];
          created_by?: parameters["rowFilter.shipping_companies.created_by"];
          name?: parameters["rowFilter.shipping_companies.name"];
        };
        body: {
          /** shipping_companies */
          shipping_companies?: definitions["shipping_companies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_department_employees": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_department_employees.created_at"];
          updated_at?: parameters["rowFilter.join_department_employees.updated_at"];
          created_by?: parameters["rowFilter.join_department_employees.created_by"];
          employee_id?: parameters["rowFilter.join_department_employees.employee_id"];
          department_id?: parameters["rowFilter.join_department_employees.department_id"];
          owner_id?: parameters["rowFilter.join_department_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_department_employees.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_department_employees"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_department_employees */
          join_department_employees?: definitions["join_department_employees"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_department_employees.created_at"];
          updated_at?: parameters["rowFilter.join_department_employees.updated_at"];
          created_by?: parameters["rowFilter.join_department_employees.created_by"];
          employee_id?: parameters["rowFilter.join_department_employees.employee_id"];
          department_id?: parameters["rowFilter.join_department_employees.department_id"];
          owner_id?: parameters["rowFilter.join_department_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_department_employees.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_department_employees.created_at"];
          updated_at?: parameters["rowFilter.join_department_employees.updated_at"];
          created_by?: parameters["rowFilter.join_department_employees.created_by"];
          employee_id?: parameters["rowFilter.join_department_employees.employee_id"];
          department_id?: parameters["rowFilter.join_department_employees.department_id"];
          owner_id?: parameters["rowFilter.join_department_employees.owner_id"];
          updated_by?: parameters["rowFilter.join_department_employees.updated_by"];
        };
        body: {
          /** join_department_employees */
          join_department_employees?: definitions["join_department_employees"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_relative_health_conditions": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_relative_health_conditions.created_at"];
          updated_at?: parameters["rowFilter.join_relative_health_conditions.updated_at"];
          created_by?: parameters["rowFilter.join_relative_health_conditions.created_by"];
          relative_id?: parameters["rowFilter.join_relative_health_conditions.relative_id"];
          condition_id?: parameters["rowFilter.join_relative_health_conditions.condition_id"];
          owner_id?: parameters["rowFilter.join_relative_health_conditions.owner_id"];
          updated_by?: parameters["rowFilter.join_relative_health_conditions.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_relative_health_conditions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_relative_health_conditions */
          join_relative_health_conditions?: definitions["join_relative_health_conditions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_relative_health_conditions.created_at"];
          updated_at?: parameters["rowFilter.join_relative_health_conditions.updated_at"];
          created_by?: parameters["rowFilter.join_relative_health_conditions.created_by"];
          relative_id?: parameters["rowFilter.join_relative_health_conditions.relative_id"];
          condition_id?: parameters["rowFilter.join_relative_health_conditions.condition_id"];
          owner_id?: parameters["rowFilter.join_relative_health_conditions.owner_id"];
          updated_by?: parameters["rowFilter.join_relative_health_conditions.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_relative_health_conditions.created_at"];
          updated_at?: parameters["rowFilter.join_relative_health_conditions.updated_at"];
          created_by?: parameters["rowFilter.join_relative_health_conditions.created_by"];
          relative_id?: parameters["rowFilter.join_relative_health_conditions.relative_id"];
          condition_id?: parameters["rowFilter.join_relative_health_conditions.condition_id"];
          owner_id?: parameters["rowFilter.join_relative_health_conditions.owner_id"];
          updated_by?: parameters["rowFilter.join_relative_health_conditions.updated_by"];
        };
        body: {
          /** join_relative_health_conditions */
          join_relative_health_conditions?: definitions["join_relative_health_conditions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/base_proposals": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_proposals.id"];
          created_at?: parameters["rowFilter.base_proposals.created_at"];
          updated_at?: parameters["rowFilter.base_proposals.updated_at"];
          created_by?: parameters["rowFilter.base_proposals.created_by"];
          notes?: parameters["rowFilter.base_proposals.notes"];
          owner_id?: parameters["rowFilter.base_proposals.owner_id"];
          title?: parameters["rowFilter.base_proposals.title"];
          type?: parameters["rowFilter.base_proposals.type"];
          updated_by?: parameters["rowFilter.base_proposals.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["base_proposals"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** base_proposals */
          base_proposals?: definitions["base_proposals"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_proposals.id"];
          created_at?: parameters["rowFilter.base_proposals.created_at"];
          updated_at?: parameters["rowFilter.base_proposals.updated_at"];
          created_by?: parameters["rowFilter.base_proposals.created_by"];
          notes?: parameters["rowFilter.base_proposals.notes"];
          owner_id?: parameters["rowFilter.base_proposals.owner_id"];
          title?: parameters["rowFilter.base_proposals.title"];
          type?: parameters["rowFilter.base_proposals.type"];
          updated_by?: parameters["rowFilter.base_proposals.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_proposals.id"];
          created_at?: parameters["rowFilter.base_proposals.created_at"];
          updated_at?: parameters["rowFilter.base_proposals.updated_at"];
          created_by?: parameters["rowFilter.base_proposals.created_by"];
          notes?: parameters["rowFilter.base_proposals.notes"];
          owner_id?: parameters["rowFilter.base_proposals.owner_id"];
          title?: parameters["rowFilter.base_proposals.title"];
          type?: parameters["rowFilter.base_proposals.type"];
          updated_by?: parameters["rowFilter.base_proposals.updated_by"];
        };
        body: {
          /** base_proposals */
          base_proposals?: definitions["base_proposals"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_vacations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_vacations.id"];
          created_at?: parameters["rowFilter.request_vacations.created_at"];
          updated_at?: parameters["rowFilter.request_vacations.updated_at"];
          created_by?: parameters["rowFilter.request_vacations.created_by"];
          notes?: parameters["rowFilter.request_vacations.notes"];
          owner_id?: parameters["rowFilter.request_vacations.owner_id"];
          title?: parameters["rowFilter.request_vacations.title"];
          type?: parameters["rowFilter.request_vacations.type"];
          updated_by?: parameters["rowFilter.request_vacations.updated_by"];
          status?: parameters["rowFilter.request_vacations.status"];
          from?: parameters["rowFilter.request_vacations.from"];
          to?: parameters["rowFilter.request_vacations.to"];
          vacation_type_id?: parameters["rowFilter.request_vacations.vacation_type_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_vacations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_vacations */
          request_vacations?: definitions["request_vacations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_vacations.id"];
          created_at?: parameters["rowFilter.request_vacations.created_at"];
          updated_at?: parameters["rowFilter.request_vacations.updated_at"];
          created_by?: parameters["rowFilter.request_vacations.created_by"];
          notes?: parameters["rowFilter.request_vacations.notes"];
          owner_id?: parameters["rowFilter.request_vacations.owner_id"];
          title?: parameters["rowFilter.request_vacations.title"];
          type?: parameters["rowFilter.request_vacations.type"];
          updated_by?: parameters["rowFilter.request_vacations.updated_by"];
          status?: parameters["rowFilter.request_vacations.status"];
          from?: parameters["rowFilter.request_vacations.from"];
          to?: parameters["rowFilter.request_vacations.to"];
          vacation_type_id?: parameters["rowFilter.request_vacations.vacation_type_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_vacations.id"];
          created_at?: parameters["rowFilter.request_vacations.created_at"];
          updated_at?: parameters["rowFilter.request_vacations.updated_at"];
          created_by?: parameters["rowFilter.request_vacations.created_by"];
          notes?: parameters["rowFilter.request_vacations.notes"];
          owner_id?: parameters["rowFilter.request_vacations.owner_id"];
          title?: parameters["rowFilter.request_vacations.title"];
          type?: parameters["rowFilter.request_vacations.type"];
          updated_by?: parameters["rowFilter.request_vacations.updated_by"];
          status?: parameters["rowFilter.request_vacations.status"];
          from?: parameters["rowFilter.request_vacations.from"];
          to?: parameters["rowFilter.request_vacations.to"];
          vacation_type_id?: parameters["rowFilter.request_vacations.vacation_type_id"];
        };
        body: {
          /** request_vacations */
          request_vacations?: definitions["request_vacations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/group_invites": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group_invites.id"];
          group_id?: parameters["rowFilter.group_invites.group_id"];
          roles?: parameters["rowFilter.group_invites.roles"];
          invited_by?: parameters["rowFilter.group_invites.invited_by"];
          created_at?: parameters["rowFilter.group_invites.created_at"];
          user_id?: parameters["rowFilter.group_invites.user_id"];
          accepted_at?: parameters["rowFilter.group_invites.accepted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["group_invites"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** group_invites */
          group_invites?: definitions["group_invites"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group_invites.id"];
          group_id?: parameters["rowFilter.group_invites.group_id"];
          roles?: parameters["rowFilter.group_invites.roles"];
          invited_by?: parameters["rowFilter.group_invites.invited_by"];
          created_at?: parameters["rowFilter.group_invites.created_at"];
          user_id?: parameters["rowFilter.group_invites.user_id"];
          accepted_at?: parameters["rowFilter.group_invites.accepted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group_invites.id"];
          group_id?: parameters["rowFilter.group_invites.group_id"];
          roles?: parameters["rowFilter.group_invites.roles"];
          invited_by?: parameters["rowFilter.group_invites.invited_by"];
          created_at?: parameters["rowFilter.group_invites.created_at"];
          user_id?: parameters["rowFilter.group_invites.user_id"];
          accepted_at?: parameters["rowFilter.group_invites.accepted_at"];
        };
        body: {
          /** group_invites */
          group_invites?: definitions["group_invites"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_work_hours_changes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_work_hours_changes.id"];
          created_at?: parameters["rowFilter.request_work_hours_changes.created_at"];
          updated_at?: parameters["rowFilter.request_work_hours_changes.updated_at"];
          created_by?: parameters["rowFilter.request_work_hours_changes.created_by"];
          notes?: parameters["rowFilter.request_work_hours_changes.notes"];
          owner_id?: parameters["rowFilter.request_work_hours_changes.owner_id"];
          title?: parameters["rowFilter.request_work_hours_changes.title"];
          type?: parameters["rowFilter.request_work_hours_changes.type"];
          updated_by?: parameters["rowFilter.request_work_hours_changes.updated_by"];
          status?: parameters["rowFilter.request_work_hours_changes.status"];
          new_work_hours_id?: parameters["rowFilter.request_work_hours_changes.new_work_hours_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_work_hours_changes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_work_hours_changes */
          request_work_hours_changes?: definitions["request_work_hours_changes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_work_hours_changes.id"];
          created_at?: parameters["rowFilter.request_work_hours_changes.created_at"];
          updated_at?: parameters["rowFilter.request_work_hours_changes.updated_at"];
          created_by?: parameters["rowFilter.request_work_hours_changes.created_by"];
          notes?: parameters["rowFilter.request_work_hours_changes.notes"];
          owner_id?: parameters["rowFilter.request_work_hours_changes.owner_id"];
          title?: parameters["rowFilter.request_work_hours_changes.title"];
          type?: parameters["rowFilter.request_work_hours_changes.type"];
          updated_by?: parameters["rowFilter.request_work_hours_changes.updated_by"];
          status?: parameters["rowFilter.request_work_hours_changes.status"];
          new_work_hours_id?: parameters["rowFilter.request_work_hours_changes.new_work_hours_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_work_hours_changes.id"];
          created_at?: parameters["rowFilter.request_work_hours_changes.created_at"];
          updated_at?: parameters["rowFilter.request_work_hours_changes.updated_at"];
          created_by?: parameters["rowFilter.request_work_hours_changes.created_by"];
          notes?: parameters["rowFilter.request_work_hours_changes.notes"];
          owner_id?: parameters["rowFilter.request_work_hours_changes.owner_id"];
          title?: parameters["rowFilter.request_work_hours_changes.title"];
          type?: parameters["rowFilter.request_work_hours_changes.type"];
          updated_by?: parameters["rowFilter.request_work_hours_changes.updated_by"];
          status?: parameters["rowFilter.request_work_hours_changes.status"];
          new_work_hours_id?: parameters["rowFilter.request_work_hours_changes.new_work_hours_id"];
        };
        body: {
          /** request_work_hours_changes */
          request_work_hours_changes?: definitions["request_work_hours_changes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_type_attributes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_type_attributes.id"];
          created_at?: parameters["rowFilter.product_type_attributes.created_at"];
          created_by?: parameters["rowFilter.product_type_attributes.created_by"];
          owner_id?: parameters["rowFilter.product_type_attributes.owner_id"];
          updated_at?: parameters["rowFilter.product_type_attributes.updated_at"];
          description?: parameters["rowFilter.product_type_attributes.description"];
          product_type_id?: parameters["rowFilter.product_type_attributes.product_type_id"];
          name?: parameters["rowFilter.product_type_attributes.name"];
          updated_by?: parameters["rowFilter.product_type_attributes.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_type_attributes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_type_attributes */
          product_type_attributes?: definitions["product_type_attributes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_type_attributes.id"];
          created_at?: parameters["rowFilter.product_type_attributes.created_at"];
          created_by?: parameters["rowFilter.product_type_attributes.created_by"];
          owner_id?: parameters["rowFilter.product_type_attributes.owner_id"];
          updated_at?: parameters["rowFilter.product_type_attributes.updated_at"];
          description?: parameters["rowFilter.product_type_attributes.description"];
          product_type_id?: parameters["rowFilter.product_type_attributes.product_type_id"];
          name?: parameters["rowFilter.product_type_attributes.name"];
          updated_by?: parameters["rowFilter.product_type_attributes.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_type_attributes.id"];
          created_at?: parameters["rowFilter.product_type_attributes.created_at"];
          created_by?: parameters["rowFilter.product_type_attributes.created_by"];
          owner_id?: parameters["rowFilter.product_type_attributes.owner_id"];
          updated_at?: parameters["rowFilter.product_type_attributes.updated_at"];
          description?: parameters["rowFilter.product_type_attributes.description"];
          product_type_id?: parameters["rowFilter.product_type_attributes.product_type_id"];
          name?: parameters["rowFilter.product_type_attributes.name"];
          updated_by?: parameters["rowFilter.product_type_attributes.updated_by"];
        };
        body: {
          /** product_type_attributes */
          product_type_attributes?: definitions["product_type_attributes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/policies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.policies.id"];
          created_at?: parameters["rowFilter.policies.created_at"];
          created_by?: parameters["rowFilter.policies.created_by"];
          owner_id?: parameters["rowFilter.policies.owner_id"];
          updated_at?: parameters["rowFilter.policies.updated_at"];
          sick_vacation?: parameters["rowFilter.policies.sick_vacation"];
          annual_vacation?: parameters["rowFilter.policies.annual_vacation"];
          parental_vacation?: parameters["rowFilter.policies.parental_vacation"];
          maternal_vacation?: parameters["rowFilter.policies.maternal_vacation"];
          death_vacation?: parameters["rowFilter.policies.death_vacation"];
          marriage_vacation?: parameters["rowFilter.policies.marriage_vacation"];
          work_hours_id?: parameters["rowFilter.policies.work_hours_id"];
          work_days?: parameters["rowFilter.policies.work_days"];
          transportation?: parameters["rowFilter.policies.transportation"];
          nda?: parameters["rowFilter.policies.nda"];
          benefits?: parameters["rowFilter.policies.benefits"];
          updated_by?: parameters["rowFilter.policies.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["policies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** policies */
          policies?: definitions["policies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.policies.id"];
          created_at?: parameters["rowFilter.policies.created_at"];
          created_by?: parameters["rowFilter.policies.created_by"];
          owner_id?: parameters["rowFilter.policies.owner_id"];
          updated_at?: parameters["rowFilter.policies.updated_at"];
          sick_vacation?: parameters["rowFilter.policies.sick_vacation"];
          annual_vacation?: parameters["rowFilter.policies.annual_vacation"];
          parental_vacation?: parameters["rowFilter.policies.parental_vacation"];
          maternal_vacation?: parameters["rowFilter.policies.maternal_vacation"];
          death_vacation?: parameters["rowFilter.policies.death_vacation"];
          marriage_vacation?: parameters["rowFilter.policies.marriage_vacation"];
          work_hours_id?: parameters["rowFilter.policies.work_hours_id"];
          work_days?: parameters["rowFilter.policies.work_days"];
          transportation?: parameters["rowFilter.policies.transportation"];
          nda?: parameters["rowFilter.policies.nda"];
          benefits?: parameters["rowFilter.policies.benefits"];
          updated_by?: parameters["rowFilter.policies.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.policies.id"];
          created_at?: parameters["rowFilter.policies.created_at"];
          created_by?: parameters["rowFilter.policies.created_by"];
          owner_id?: parameters["rowFilter.policies.owner_id"];
          updated_at?: parameters["rowFilter.policies.updated_at"];
          sick_vacation?: parameters["rowFilter.policies.sick_vacation"];
          annual_vacation?: parameters["rowFilter.policies.annual_vacation"];
          parental_vacation?: parameters["rowFilter.policies.parental_vacation"];
          maternal_vacation?: parameters["rowFilter.policies.maternal_vacation"];
          death_vacation?: parameters["rowFilter.policies.death_vacation"];
          marriage_vacation?: parameters["rowFilter.policies.marriage_vacation"];
          work_hours_id?: parameters["rowFilter.policies.work_hours_id"];
          work_days?: parameters["rowFilter.policies.work_days"];
          transportation?: parameters["rowFilter.policies.transportation"];
          nda?: parameters["rowFilter.policies.nda"];
          benefits?: parameters["rowFilter.policies.benefits"];
          updated_by?: parameters["rowFilter.policies.updated_by"];
        };
        body: {
          /** policies */
          policies?: definitions["policies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_payroll_deductions_cancels": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_payroll_deductions_cancels.id"];
          created_at?: parameters["rowFilter.request_payroll_deductions_cancels.created_at"];
          updated_at?: parameters["rowFilter.request_payroll_deductions_cancels.updated_at"];
          created_by?: parameters["rowFilter.request_payroll_deductions_cancels.created_by"];
          notes?: parameters["rowFilter.request_payroll_deductions_cancels.notes"];
          owner_id?: parameters["rowFilter.request_payroll_deductions_cancels.owner_id"];
          title?: parameters["rowFilter.request_payroll_deductions_cancels.title"];
          type?: parameters["rowFilter.request_payroll_deductions_cancels.type"];
          updated_by?: parameters["rowFilter.request_payroll_deductions_cancels.updated_by"];
          status?: parameters["rowFilter.request_payroll_deductions_cancels.status"];
          reason?: parameters["rowFilter.request_payroll_deductions_cancels.reason"];
          deduction_id?: parameters["rowFilter.request_payroll_deductions_cancels.deduction_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_payroll_deductions_cancels"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_payroll_deductions_cancels */
          request_payroll_deductions_cancels?: definitions["request_payroll_deductions_cancels"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_payroll_deductions_cancels.id"];
          created_at?: parameters["rowFilter.request_payroll_deductions_cancels.created_at"];
          updated_at?: parameters["rowFilter.request_payroll_deductions_cancels.updated_at"];
          created_by?: parameters["rowFilter.request_payroll_deductions_cancels.created_by"];
          notes?: parameters["rowFilter.request_payroll_deductions_cancels.notes"];
          owner_id?: parameters["rowFilter.request_payroll_deductions_cancels.owner_id"];
          title?: parameters["rowFilter.request_payroll_deductions_cancels.title"];
          type?: parameters["rowFilter.request_payroll_deductions_cancels.type"];
          updated_by?: parameters["rowFilter.request_payroll_deductions_cancels.updated_by"];
          status?: parameters["rowFilter.request_payroll_deductions_cancels.status"];
          reason?: parameters["rowFilter.request_payroll_deductions_cancels.reason"];
          deduction_id?: parameters["rowFilter.request_payroll_deductions_cancels.deduction_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_payroll_deductions_cancels.id"];
          created_at?: parameters["rowFilter.request_payroll_deductions_cancels.created_at"];
          updated_at?: parameters["rowFilter.request_payroll_deductions_cancels.updated_at"];
          created_by?: parameters["rowFilter.request_payroll_deductions_cancels.created_by"];
          notes?: parameters["rowFilter.request_payroll_deductions_cancels.notes"];
          owner_id?: parameters["rowFilter.request_payroll_deductions_cancels.owner_id"];
          title?: parameters["rowFilter.request_payroll_deductions_cancels.title"];
          type?: parameters["rowFilter.request_payroll_deductions_cancels.type"];
          updated_by?: parameters["rowFilter.request_payroll_deductions_cancels.updated_by"];
          status?: parameters["rowFilter.request_payroll_deductions_cancels.status"];
          reason?: parameters["rowFilter.request_payroll_deductions_cancels.reason"];
          deduction_id?: parameters["rowFilter.request_payroll_deductions_cancels.deduction_id"];
        };
        body: {
          /** request_payroll_deductions_cancels */
          request_payroll_deductions_cancels?: definitions["request_payroll_deductions_cancels"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/res_countries": {
    get: {
      parameters: {
        query: {
          name?: parameters["rowFilter.res_countries.name"];
          iso2?: parameters["rowFilter.res_countries.iso2"];
          iso3?: parameters["rowFilter.res_countries.iso3"];
          local_name?: parameters["rowFilter.res_countries.local_name"];
          id?: parameters["rowFilter.res_countries.id"];
          updated_at?: parameters["rowFilter.res_countries.updated_at"];
          created_at?: parameters["rowFilter.res_countries.created_at"];
          nationality?: parameters["rowFilter.res_countries.nationality"];
          currency_id?: parameters["rowFilter.res_countries.currency_id"];
          updated_by?: parameters["rowFilter.res_countries.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["res_countries"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** res_countries */
          res_countries?: definitions["res_countries"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          name?: parameters["rowFilter.res_countries.name"];
          iso2?: parameters["rowFilter.res_countries.iso2"];
          iso3?: parameters["rowFilter.res_countries.iso3"];
          local_name?: parameters["rowFilter.res_countries.local_name"];
          id?: parameters["rowFilter.res_countries.id"];
          updated_at?: parameters["rowFilter.res_countries.updated_at"];
          created_at?: parameters["rowFilter.res_countries.created_at"];
          nationality?: parameters["rowFilter.res_countries.nationality"];
          currency_id?: parameters["rowFilter.res_countries.currency_id"];
          updated_by?: parameters["rowFilter.res_countries.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          name?: parameters["rowFilter.res_countries.name"];
          iso2?: parameters["rowFilter.res_countries.iso2"];
          iso3?: parameters["rowFilter.res_countries.iso3"];
          local_name?: parameters["rowFilter.res_countries.local_name"];
          id?: parameters["rowFilter.res_countries.id"];
          updated_at?: parameters["rowFilter.res_countries.updated_at"];
          created_at?: parameters["rowFilter.res_countries.created_at"];
          nationality?: parameters["rowFilter.res_countries.nationality"];
          currency_id?: parameters["rowFilter.res_countries.currency_id"];
          updated_by?: parameters["rowFilter.res_countries.updated_by"];
        };
        body: {
          /** res_countries */
          res_countries?: definitions["res_countries"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_installments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_installments.id"];
          created_at?: parameters["rowFilter.request_installments.created_at"];
          updated_at?: parameters["rowFilter.request_installments.updated_at"];
          created_by?: parameters["rowFilter.request_installments.created_by"];
          notes?: parameters["rowFilter.request_installments.notes"];
          owner_id?: parameters["rowFilter.request_installments.owner_id"];
          title?: parameters["rowFilter.request_installments.title"];
          type?: parameters["rowFilter.request_installments.type"];
          updated_by?: parameters["rowFilter.request_installments.updated_by"];
          status?: parameters["rowFilter.request_installments.status"];
          amount?: parameters["rowFilter.request_installments.amount"];
          from?: parameters["rowFilter.request_installments.from"];
          to?: parameters["rowFilter.request_installments.to"];
          installment?: parameters["rowFilter.request_installments.installment"];
          installment_type_id?: parameters["rowFilter.request_installments.installment_type_id"];
          bank_account_id?: parameters["rowFilter.request_installments.bank_account_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_installments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_installments */
          request_installments?: definitions["request_installments"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_installments.id"];
          created_at?: parameters["rowFilter.request_installments.created_at"];
          updated_at?: parameters["rowFilter.request_installments.updated_at"];
          created_by?: parameters["rowFilter.request_installments.created_by"];
          notes?: parameters["rowFilter.request_installments.notes"];
          owner_id?: parameters["rowFilter.request_installments.owner_id"];
          title?: parameters["rowFilter.request_installments.title"];
          type?: parameters["rowFilter.request_installments.type"];
          updated_by?: parameters["rowFilter.request_installments.updated_by"];
          status?: parameters["rowFilter.request_installments.status"];
          amount?: parameters["rowFilter.request_installments.amount"];
          from?: parameters["rowFilter.request_installments.from"];
          to?: parameters["rowFilter.request_installments.to"];
          installment?: parameters["rowFilter.request_installments.installment"];
          installment_type_id?: parameters["rowFilter.request_installments.installment_type_id"];
          bank_account_id?: parameters["rowFilter.request_installments.bank_account_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_installments.id"];
          created_at?: parameters["rowFilter.request_installments.created_at"];
          updated_at?: parameters["rowFilter.request_installments.updated_at"];
          created_by?: parameters["rowFilter.request_installments.created_by"];
          notes?: parameters["rowFilter.request_installments.notes"];
          owner_id?: parameters["rowFilter.request_installments.owner_id"];
          title?: parameters["rowFilter.request_installments.title"];
          type?: parameters["rowFilter.request_installments.type"];
          updated_by?: parameters["rowFilter.request_installments.updated_by"];
          status?: parameters["rowFilter.request_installments.status"];
          amount?: parameters["rowFilter.request_installments.amount"];
          from?: parameters["rowFilter.request_installments.from"];
          to?: parameters["rowFilter.request_installments.to"];
          installment?: parameters["rowFilter.request_installments.installment"];
          installment_type_id?: parameters["rowFilter.request_installments.installment_type_id"];
          bank_account_id?: parameters["rowFilter.request_installments.bank_account_id"];
        };
        body: {
          /** request_installments */
          request_installments?: definitions["request_installments"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_insurance_raises": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_raises.id"];
          created_at?: parameters["rowFilter.request_insurance_raises.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_raises.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_raises.created_by"];
          notes?: parameters["rowFilter.request_insurance_raises.notes"];
          owner_id?: parameters["rowFilter.request_insurance_raises.owner_id"];
          title?: parameters["rowFilter.request_insurance_raises.title"];
          type?: parameters["rowFilter.request_insurance_raises.type"];
          updated_by?: parameters["rowFilter.request_insurance_raises.updated_by"];
          status?: parameters["rowFilter.request_insurance_raises.status"];
          new_plan_id?: parameters["rowFilter.request_insurance_raises.new_plan_id"];
          old_plan_id?: parameters["rowFilter.request_insurance_raises.old_plan_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_insurance_raises"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_insurance_raises */
          request_insurance_raises?: definitions["request_insurance_raises"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_raises.id"];
          created_at?: parameters["rowFilter.request_insurance_raises.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_raises.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_raises.created_by"];
          notes?: parameters["rowFilter.request_insurance_raises.notes"];
          owner_id?: parameters["rowFilter.request_insurance_raises.owner_id"];
          title?: parameters["rowFilter.request_insurance_raises.title"];
          type?: parameters["rowFilter.request_insurance_raises.type"];
          updated_by?: parameters["rowFilter.request_insurance_raises.updated_by"];
          status?: parameters["rowFilter.request_insurance_raises.status"];
          new_plan_id?: parameters["rowFilter.request_insurance_raises.new_plan_id"];
          old_plan_id?: parameters["rowFilter.request_insurance_raises.old_plan_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_raises.id"];
          created_at?: parameters["rowFilter.request_insurance_raises.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_raises.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_raises.created_by"];
          notes?: parameters["rowFilter.request_insurance_raises.notes"];
          owner_id?: parameters["rowFilter.request_insurance_raises.owner_id"];
          title?: parameters["rowFilter.request_insurance_raises.title"];
          type?: parameters["rowFilter.request_insurance_raises.type"];
          updated_by?: parameters["rowFilter.request_insurance_raises.updated_by"];
          status?: parameters["rowFilter.request_insurance_raises.status"];
          new_plan_id?: parameters["rowFilter.request_insurance_raises.new_plan_id"];
          old_plan_id?: parameters["rowFilter.request_insurance_raises.old_plan_id"];
        };
        body: {
          /** request_insurance_raises */
          request_insurance_raises?: definitions["request_insurance_raises"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/healthcare_service_providers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.healthcare_service_providers.id"];
          created_at?: parameters["rowFilter.healthcare_service_providers.created_at"];
          updated_at?: parameters["rowFilter.healthcare_service_providers.updated_at"];
          employee_name?: parameters["rowFilter.healthcare_service_providers.employee_name"];
          phone?: parameters["rowFilter.healthcare_service_providers.phone"];
          email?: parameters["rowFilter.healthcare_service_providers.email"];
          website?: parameters["rowFilter.healthcare_service_providers.website"];
          updated_by?: parameters["rowFilter.healthcare_service_providers.updated_by"];
          owner_id?: parameters["rowFilter.healthcare_service_providers.owner_id"];
          country_id?: parameters["rowFilter.healthcare_service_providers.country_id"];
          city_id?: parameters["rowFilter.healthcare_service_providers.city_id"];
          street?: parameters["rowFilter.healthcare_service_providers.street"];
          building?: parameters["rowFilter.healthcare_service_providers.building"];
          landmark?: parameters["rowFilter.healthcare_service_providers.landmark"];
          gps?: parameters["rowFilter.healthcare_service_providers.gps"];
          created_by?: parameters["rowFilter.healthcare_service_providers.created_by"];
          name?: parameters["rowFilter.healthcare_service_providers.name"];
          service_type?: parameters["rowFilter.healthcare_service_providers.service_type"];
          service_provider_type?: parameters["rowFilter.healthcare_service_providers.service_provider_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["healthcare_service_providers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** healthcare_service_providers */
          healthcare_service_providers?: definitions["healthcare_service_providers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.healthcare_service_providers.id"];
          created_at?: parameters["rowFilter.healthcare_service_providers.created_at"];
          updated_at?: parameters["rowFilter.healthcare_service_providers.updated_at"];
          employee_name?: parameters["rowFilter.healthcare_service_providers.employee_name"];
          phone?: parameters["rowFilter.healthcare_service_providers.phone"];
          email?: parameters["rowFilter.healthcare_service_providers.email"];
          website?: parameters["rowFilter.healthcare_service_providers.website"];
          updated_by?: parameters["rowFilter.healthcare_service_providers.updated_by"];
          owner_id?: parameters["rowFilter.healthcare_service_providers.owner_id"];
          country_id?: parameters["rowFilter.healthcare_service_providers.country_id"];
          city_id?: parameters["rowFilter.healthcare_service_providers.city_id"];
          street?: parameters["rowFilter.healthcare_service_providers.street"];
          building?: parameters["rowFilter.healthcare_service_providers.building"];
          landmark?: parameters["rowFilter.healthcare_service_providers.landmark"];
          gps?: parameters["rowFilter.healthcare_service_providers.gps"];
          created_by?: parameters["rowFilter.healthcare_service_providers.created_by"];
          name?: parameters["rowFilter.healthcare_service_providers.name"];
          service_type?: parameters["rowFilter.healthcare_service_providers.service_type"];
          service_provider_type?: parameters["rowFilter.healthcare_service_providers.service_provider_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.healthcare_service_providers.id"];
          created_at?: parameters["rowFilter.healthcare_service_providers.created_at"];
          updated_at?: parameters["rowFilter.healthcare_service_providers.updated_at"];
          employee_name?: parameters["rowFilter.healthcare_service_providers.employee_name"];
          phone?: parameters["rowFilter.healthcare_service_providers.phone"];
          email?: parameters["rowFilter.healthcare_service_providers.email"];
          website?: parameters["rowFilter.healthcare_service_providers.website"];
          updated_by?: parameters["rowFilter.healthcare_service_providers.updated_by"];
          owner_id?: parameters["rowFilter.healthcare_service_providers.owner_id"];
          country_id?: parameters["rowFilter.healthcare_service_providers.country_id"];
          city_id?: parameters["rowFilter.healthcare_service_providers.city_id"];
          street?: parameters["rowFilter.healthcare_service_providers.street"];
          building?: parameters["rowFilter.healthcare_service_providers.building"];
          landmark?: parameters["rowFilter.healthcare_service_providers.landmark"];
          gps?: parameters["rowFilter.healthcare_service_providers.gps"];
          created_by?: parameters["rowFilter.healthcare_service_providers.created_by"];
          name?: parameters["rowFilter.healthcare_service_providers.name"];
          service_type?: parameters["rowFilter.healthcare_service_providers.service_type"];
          service_provider_type?: parameters["rowFilter.healthcare_service_providers.service_provider_type"];
        };
        body: {
          /** healthcare_service_providers */
          healthcare_service_providers?: definitions["healthcare_service_providers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_insurance_financial_returns": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_financial_returns.id"];
          created_at?: parameters["rowFilter.request_insurance_financial_returns.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_financial_returns.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_financial_returns.created_by"];
          notes?: parameters["rowFilter.request_insurance_financial_returns.notes"];
          owner_id?: parameters["rowFilter.request_insurance_financial_returns.owner_id"];
          title?: parameters["rowFilter.request_insurance_financial_returns.title"];
          type?: parameters["rowFilter.request_insurance_financial_returns.type"];
          updated_by?: parameters["rowFilter.request_insurance_financial_returns.updated_by"];
          status?: parameters["rowFilter.request_insurance_financial_returns.status"];
          date_of_service?: parameters["rowFilter.request_insurance_financial_returns.date_of_service"];
          amount?: parameters["rowFilter.request_insurance_financial_returns.amount"];
          bank_account_id?: parameters["rowFilter.request_insurance_financial_returns.bank_account_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_insurance_financial_returns"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_insurance_financial_returns */
          request_insurance_financial_returns?: definitions["request_insurance_financial_returns"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_financial_returns.id"];
          created_at?: parameters["rowFilter.request_insurance_financial_returns.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_financial_returns.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_financial_returns.created_by"];
          notes?: parameters["rowFilter.request_insurance_financial_returns.notes"];
          owner_id?: parameters["rowFilter.request_insurance_financial_returns.owner_id"];
          title?: parameters["rowFilter.request_insurance_financial_returns.title"];
          type?: parameters["rowFilter.request_insurance_financial_returns.type"];
          updated_by?: parameters["rowFilter.request_insurance_financial_returns.updated_by"];
          status?: parameters["rowFilter.request_insurance_financial_returns.status"];
          date_of_service?: parameters["rowFilter.request_insurance_financial_returns.date_of_service"];
          amount?: parameters["rowFilter.request_insurance_financial_returns.amount"];
          bank_account_id?: parameters["rowFilter.request_insurance_financial_returns.bank_account_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_insurance_financial_returns.id"];
          created_at?: parameters["rowFilter.request_insurance_financial_returns.created_at"];
          updated_at?: parameters["rowFilter.request_insurance_financial_returns.updated_at"];
          created_by?: parameters["rowFilter.request_insurance_financial_returns.created_by"];
          notes?: parameters["rowFilter.request_insurance_financial_returns.notes"];
          owner_id?: parameters["rowFilter.request_insurance_financial_returns.owner_id"];
          title?: parameters["rowFilter.request_insurance_financial_returns.title"];
          type?: parameters["rowFilter.request_insurance_financial_returns.type"];
          updated_by?: parameters["rowFilter.request_insurance_financial_returns.updated_by"];
          status?: parameters["rowFilter.request_insurance_financial_returns.status"];
          date_of_service?: parameters["rowFilter.request_insurance_financial_returns.date_of_service"];
          amount?: parameters["rowFilter.request_insurance_financial_returns.amount"];
          bank_account_id?: parameters["rowFilter.request_insurance_financial_returns.bank_account_id"];
        };
        body: {
          /** request_insurance_financial_returns */
          request_insurance_financial_returns?: definitions["request_insurance_financial_returns"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/expenses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.expenses.id"];
          created_at?: parameters["rowFilter.expenses.created_at"];
          created_by?: parameters["rowFilter.expenses.created_by"];
          owner_id?: parameters["rowFilter.expenses.owner_id"];
          updated_at?: parameters["rowFilter.expenses.updated_at"];
          title?: parameters["rowFilter.expenses.title"];
          amount?: parameters["rowFilter.expenses.amount"];
          request_expense_id?: parameters["rowFilter.expenses.request_expense_id"];
          expense_type_id?: parameters["rowFilter.expenses.expense_type_id"];
          updated_by?: parameters["rowFilter.expenses.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["expenses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** expenses */
          expenses?: definitions["expenses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.expenses.id"];
          created_at?: parameters["rowFilter.expenses.created_at"];
          created_by?: parameters["rowFilter.expenses.created_by"];
          owner_id?: parameters["rowFilter.expenses.owner_id"];
          updated_at?: parameters["rowFilter.expenses.updated_at"];
          title?: parameters["rowFilter.expenses.title"];
          amount?: parameters["rowFilter.expenses.amount"];
          request_expense_id?: parameters["rowFilter.expenses.request_expense_id"];
          expense_type_id?: parameters["rowFilter.expenses.expense_type_id"];
          updated_by?: parameters["rowFilter.expenses.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.expenses.id"];
          created_at?: parameters["rowFilter.expenses.created_at"];
          created_by?: parameters["rowFilter.expenses.created_by"];
          owner_id?: parameters["rowFilter.expenses.owner_id"];
          updated_at?: parameters["rowFilter.expenses.updated_at"];
          title?: parameters["rowFilter.expenses.title"];
          amount?: parameters["rowFilter.expenses.amount"];
          request_expense_id?: parameters["rowFilter.expenses.request_expense_id"];
          expense_type_id?: parameters["rowFilter.expenses.expense_type_id"];
          updated_by?: parameters["rowFilter.expenses.updated_by"];
        };
        body: {
          /** expenses */
          expenses?: definitions["expenses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/status_histories": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.status_histories.id"];
          created_at?: parameters["rowFilter.status_histories.created_at"];
          created_by?: parameters["rowFilter.status_histories.created_by"];
          owner_id?: parameters["rowFilter.status_histories.owner_id"];
          updated_at?: parameters["rowFilter.status_histories.updated_at"];
          old_status?: parameters["rowFilter.status_histories.old_status"];
          new_status?: parameters["rowFilter.status_histories.new_status"];
          request_uuid?: parameters["rowFilter.status_histories.request_uuid"];
          message?: parameters["rowFilter.status_histories.message"];
          updated_by?: parameters["rowFilter.status_histories.updated_by"];
          request_type?: parameters["rowFilter.status_histories.request_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["status_histories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** status_histories */
          status_histories?: definitions["status_histories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.status_histories.id"];
          created_at?: parameters["rowFilter.status_histories.created_at"];
          created_by?: parameters["rowFilter.status_histories.created_by"];
          owner_id?: parameters["rowFilter.status_histories.owner_id"];
          updated_at?: parameters["rowFilter.status_histories.updated_at"];
          old_status?: parameters["rowFilter.status_histories.old_status"];
          new_status?: parameters["rowFilter.status_histories.new_status"];
          request_uuid?: parameters["rowFilter.status_histories.request_uuid"];
          message?: parameters["rowFilter.status_histories.message"];
          updated_by?: parameters["rowFilter.status_histories.updated_by"];
          request_type?: parameters["rowFilter.status_histories.request_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.status_histories.id"];
          created_at?: parameters["rowFilter.status_histories.created_at"];
          created_by?: parameters["rowFilter.status_histories.created_by"];
          owner_id?: parameters["rowFilter.status_histories.owner_id"];
          updated_at?: parameters["rowFilter.status_histories.updated_at"];
          old_status?: parameters["rowFilter.status_histories.old_status"];
          new_status?: parameters["rowFilter.status_histories.new_status"];
          request_uuid?: parameters["rowFilter.status_histories.request_uuid"];
          message?: parameters["rowFilter.status_histories.message"];
          updated_by?: parameters["rowFilter.status_histories.updated_by"];
          request_type?: parameters["rowFilter.status_histories.request_type"];
        };
        body: {
          /** status_histories */
          status_histories?: definitions["status_histories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_advances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_advances.id"];
          created_at?: parameters["rowFilter.request_advances.created_at"];
          updated_at?: parameters["rowFilter.request_advances.updated_at"];
          created_by?: parameters["rowFilter.request_advances.created_by"];
          notes?: parameters["rowFilter.request_advances.notes"];
          owner_id?: parameters["rowFilter.request_advances.owner_id"];
          title?: parameters["rowFilter.request_advances.title"];
          type?: parameters["rowFilter.request_advances.type"];
          updated_by?: parameters["rowFilter.request_advances.updated_by"];
          status?: parameters["rowFilter.request_advances.status"];
          date_of_payment?: parameters["rowFilter.request_advances.date_of_payment"];
          installments?: parameters["rowFilter.request_advances.installments"];
          amount?: parameters["rowFilter.request_advances.amount"];
          date_of_receipt?: parameters["rowFilter.request_advances.date_of_receipt"];
          advance_type_id?: parameters["rowFilter.request_advances.advance_type_id"];
          number_of_installments?: parameters["rowFilter.request_advances.number_of_installments"];
          bank_account_id?: parameters["rowFilter.request_advances.bank_account_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_advances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_advances */
          request_advances?: definitions["request_advances"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_advances.id"];
          created_at?: parameters["rowFilter.request_advances.created_at"];
          updated_at?: parameters["rowFilter.request_advances.updated_at"];
          created_by?: parameters["rowFilter.request_advances.created_by"];
          notes?: parameters["rowFilter.request_advances.notes"];
          owner_id?: parameters["rowFilter.request_advances.owner_id"];
          title?: parameters["rowFilter.request_advances.title"];
          type?: parameters["rowFilter.request_advances.type"];
          updated_by?: parameters["rowFilter.request_advances.updated_by"];
          status?: parameters["rowFilter.request_advances.status"];
          date_of_payment?: parameters["rowFilter.request_advances.date_of_payment"];
          installments?: parameters["rowFilter.request_advances.installments"];
          amount?: parameters["rowFilter.request_advances.amount"];
          date_of_receipt?: parameters["rowFilter.request_advances.date_of_receipt"];
          advance_type_id?: parameters["rowFilter.request_advances.advance_type_id"];
          number_of_installments?: parameters["rowFilter.request_advances.number_of_installments"];
          bank_account_id?: parameters["rowFilter.request_advances.bank_account_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_advances.id"];
          created_at?: parameters["rowFilter.request_advances.created_at"];
          updated_at?: parameters["rowFilter.request_advances.updated_at"];
          created_by?: parameters["rowFilter.request_advances.created_by"];
          notes?: parameters["rowFilter.request_advances.notes"];
          owner_id?: parameters["rowFilter.request_advances.owner_id"];
          title?: parameters["rowFilter.request_advances.title"];
          type?: parameters["rowFilter.request_advances.type"];
          updated_by?: parameters["rowFilter.request_advances.updated_by"];
          status?: parameters["rowFilter.request_advances.status"];
          date_of_payment?: parameters["rowFilter.request_advances.date_of_payment"];
          installments?: parameters["rowFilter.request_advances.installments"];
          amount?: parameters["rowFilter.request_advances.amount"];
          date_of_receipt?: parameters["rowFilter.request_advances.date_of_receipt"];
          advance_type_id?: parameters["rowFilter.request_advances.advance_type_id"];
          number_of_installments?: parameters["rowFilter.request_advances.number_of_installments"];
          bank_account_id?: parameters["rowFilter.request_advances.bank_account_id"];
        };
        body: {
          /** request_advances */
          request_advances?: definitions["request_advances"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_ship_line_ports": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_ship_line_ports.created_at"];
          updated_at?: parameters["rowFilter.join_ship_line_ports.updated_at"];
          created_by?: parameters["rowFilter.join_ship_line_ports.created_by"];
          ship_line_id?: parameters["rowFilter.join_ship_line_ports.ship_line_id"];
          port_id?: parameters["rowFilter.join_ship_line_ports.port_id"];
          owner_id?: parameters["rowFilter.join_ship_line_ports.owner_id"];
          updated_by?: parameters["rowFilter.join_ship_line_ports.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_ship_line_ports"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_ship_line_ports */
          join_ship_line_ports?: definitions["join_ship_line_ports"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_ship_line_ports.created_at"];
          updated_at?: parameters["rowFilter.join_ship_line_ports.updated_at"];
          created_by?: parameters["rowFilter.join_ship_line_ports.created_by"];
          ship_line_id?: parameters["rowFilter.join_ship_line_ports.ship_line_id"];
          port_id?: parameters["rowFilter.join_ship_line_ports.port_id"];
          owner_id?: parameters["rowFilter.join_ship_line_ports.owner_id"];
          updated_by?: parameters["rowFilter.join_ship_line_ports.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_ship_line_ports.created_at"];
          updated_at?: parameters["rowFilter.join_ship_line_ports.updated_at"];
          created_by?: parameters["rowFilter.join_ship_line_ports.created_by"];
          ship_line_id?: parameters["rowFilter.join_ship_line_ports.ship_line_id"];
          port_id?: parameters["rowFilter.join_ship_line_ports.port_id"];
          owner_id?: parameters["rowFilter.join_ship_line_ports.owner_id"];
          updated_by?: parameters["rowFilter.join_ship_line_ports.updated_by"];
        };
        body: {
          /** join_ship_line_ports */
          join_ship_line_ports?: definitions["join_ship_line_ports"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/addresses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.addresses.id"];
          created_at?: parameters["rowFilter.addresses.created_at"];
          updated_at?: parameters["rowFilter.addresses.updated_at"];
          country_id?: parameters["rowFilter.addresses.country_id"];
          city_id?: parameters["rowFilter.addresses.city_id"];
          street?: parameters["rowFilter.addresses.street"];
          building?: parameters["rowFilter.addresses.building"];
          landmark?: parameters["rowFilter.addresses.landmark"];
          owner_id?: parameters["rowFilter.addresses.owner_id"];
          gps?: parameters["rowFilter.addresses.gps"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["addresses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** addresses */
          addresses?: definitions["addresses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.addresses.id"];
          created_at?: parameters["rowFilter.addresses.created_at"];
          updated_at?: parameters["rowFilter.addresses.updated_at"];
          country_id?: parameters["rowFilter.addresses.country_id"];
          city_id?: parameters["rowFilter.addresses.city_id"];
          street?: parameters["rowFilter.addresses.street"];
          building?: parameters["rowFilter.addresses.building"];
          landmark?: parameters["rowFilter.addresses.landmark"];
          owner_id?: parameters["rowFilter.addresses.owner_id"];
          gps?: parameters["rowFilter.addresses.gps"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.addresses.id"];
          created_at?: parameters["rowFilter.addresses.created_at"];
          updated_at?: parameters["rowFilter.addresses.updated_at"];
          country_id?: parameters["rowFilter.addresses.country_id"];
          city_id?: parameters["rowFilter.addresses.city_id"];
          street?: parameters["rowFilter.addresses.street"];
          building?: parameters["rowFilter.addresses.building"];
          landmark?: parameters["rowFilter.addresses.landmark"];
          owner_id?: parameters["rowFilter.addresses.owner_id"];
          gps?: parameters["rowFilter.addresses.gps"];
        };
        body: {
          /** addresses */
          addresses?: definitions["addresses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/job_titles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.job_titles.id"];
          created_at?: parameters["rowFilter.job_titles.created_at"];
          updated_at?: parameters["rowFilter.job_titles.updated_at"];
          created_by?: parameters["rowFilter.job_titles.created_by"];
          owner_id?: parameters["rowFilter.job_titles.owner_id"];
          updated_by?: parameters["rowFilter.job_titles.updated_by"];
          name?: parameters["rowFilter.job_titles.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["job_titles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** job_titles */
          job_titles?: definitions["job_titles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.job_titles.id"];
          created_at?: parameters["rowFilter.job_titles.created_at"];
          updated_at?: parameters["rowFilter.job_titles.updated_at"];
          created_by?: parameters["rowFilter.job_titles.created_by"];
          owner_id?: parameters["rowFilter.job_titles.owner_id"];
          updated_by?: parameters["rowFilter.job_titles.updated_by"];
          name?: parameters["rowFilter.job_titles.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.job_titles.id"];
          created_at?: parameters["rowFilter.job_titles.created_at"];
          updated_at?: parameters["rowFilter.job_titles.updated_at"];
          created_by?: parameters["rowFilter.job_titles.created_by"];
          owner_id?: parameters["rowFilter.job_titles.owner_id"];
          updated_by?: parameters["rowFilter.job_titles.updated_by"];
          name?: parameters["rowFilter.job_titles.name"];
        };
        body: {
          /** job_titles */
          job_titles?: definitions["job_titles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_training_additions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_training_additions.id"];
          created_at?: parameters["rowFilter.request_training_additions.created_at"];
          updated_at?: parameters["rowFilter.request_training_additions.updated_at"];
          created_by?: parameters["rowFilter.request_training_additions.created_by"];
          notes?: parameters["rowFilter.request_training_additions.notes"];
          owner_id?: parameters["rowFilter.request_training_additions.owner_id"];
          title?: parameters["rowFilter.request_training_additions.title"];
          type?: parameters["rowFilter.request_training_additions.type"];
          updated_by?: parameters["rowFilter.request_training_additions.updated_by"];
          status?: parameters["rowFilter.request_training_additions.status"];
          reason?: parameters["rowFilter.request_training_additions.reason"];
          from?: parameters["rowFilter.request_training_additions.from"];
          to?: parameters["rowFilter.request_training_additions.to"];
          training_type_id?: parameters["rowFilter.request_training_additions.training_type_id"];
          training_location?: parameters["rowFilter.request_training_additions.training_location"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_training_additions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_training_additions */
          request_training_additions?: definitions["request_training_additions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_training_additions.id"];
          created_at?: parameters["rowFilter.request_training_additions.created_at"];
          updated_at?: parameters["rowFilter.request_training_additions.updated_at"];
          created_by?: parameters["rowFilter.request_training_additions.created_by"];
          notes?: parameters["rowFilter.request_training_additions.notes"];
          owner_id?: parameters["rowFilter.request_training_additions.owner_id"];
          title?: parameters["rowFilter.request_training_additions.title"];
          type?: parameters["rowFilter.request_training_additions.type"];
          updated_by?: parameters["rowFilter.request_training_additions.updated_by"];
          status?: parameters["rowFilter.request_training_additions.status"];
          reason?: parameters["rowFilter.request_training_additions.reason"];
          from?: parameters["rowFilter.request_training_additions.from"];
          to?: parameters["rowFilter.request_training_additions.to"];
          training_type_id?: parameters["rowFilter.request_training_additions.training_type_id"];
          training_location?: parameters["rowFilter.request_training_additions.training_location"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_training_additions.id"];
          created_at?: parameters["rowFilter.request_training_additions.created_at"];
          updated_at?: parameters["rowFilter.request_training_additions.updated_at"];
          created_by?: parameters["rowFilter.request_training_additions.created_by"];
          notes?: parameters["rowFilter.request_training_additions.notes"];
          owner_id?: parameters["rowFilter.request_training_additions.owner_id"];
          title?: parameters["rowFilter.request_training_additions.title"];
          type?: parameters["rowFilter.request_training_additions.type"];
          updated_by?: parameters["rowFilter.request_training_additions.updated_by"];
          status?: parameters["rowFilter.request_training_additions.status"];
          reason?: parameters["rowFilter.request_training_additions.reason"];
          from?: parameters["rowFilter.request_training_additions.from"];
          to?: parameters["rowFilter.request_training_additions.to"];
          training_type_id?: parameters["rowFilter.request_training_additions.training_type_id"];
          training_location?: parameters["rowFilter.request_training_additions.training_location"];
        };
        body: {
          /** request_training_additions */
          request_training_additions?: definitions["request_training_additions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/employee_reports": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.employee_reports.id"];
          created_at?: parameters["rowFilter.employee_reports.created_at"];
          created_by?: parameters["rowFilter.employee_reports.created_by"];
          owner_id?: parameters["rowFilter.employee_reports.owner_id"];
          updated_at?: parameters["rowFilter.employee_reports.updated_at"];
          answers?: parameters["rowFilter.employee_reports.answers"];
          employee_id?: parameters["rowFilter.employee_reports.employee_id"];
          quarter?: parameters["rowFilter.employee_reports.quarter"];
          updated_by?: parameters["rowFilter.employee_reports.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["employee_reports"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** employee_reports */
          employee_reports?: definitions["employee_reports"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.employee_reports.id"];
          created_at?: parameters["rowFilter.employee_reports.created_at"];
          created_by?: parameters["rowFilter.employee_reports.created_by"];
          owner_id?: parameters["rowFilter.employee_reports.owner_id"];
          updated_at?: parameters["rowFilter.employee_reports.updated_at"];
          answers?: parameters["rowFilter.employee_reports.answers"];
          employee_id?: parameters["rowFilter.employee_reports.employee_id"];
          quarter?: parameters["rowFilter.employee_reports.quarter"];
          updated_by?: parameters["rowFilter.employee_reports.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.employee_reports.id"];
          created_at?: parameters["rowFilter.employee_reports.created_at"];
          created_by?: parameters["rowFilter.employee_reports.created_by"];
          owner_id?: parameters["rowFilter.employee_reports.owner_id"];
          updated_at?: parameters["rowFilter.employee_reports.updated_at"];
          answers?: parameters["rowFilter.employee_reports.answers"];
          employee_id?: parameters["rowFilter.employee_reports.employee_id"];
          quarter?: parameters["rowFilter.employee_reports.quarter"];
          updated_by?: parameters["rowFilter.employee_reports.updated_by"];
        };
        body: {
          /** employee_reports */
          employee_reports?: definitions["employee_reports"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/relatives": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.relatives.id"];
          created_at?: parameters["rowFilter.relatives.created_at"];
          updated_at?: parameters["rowFilter.relatives.updated_at"];
          created_by?: parameters["rowFilter.relatives.created_by"];
          name?: parameters["rowFilter.relatives.name"];
          date_of_birth?: parameters["rowFilter.relatives.date_of_birth"];
          owner_id?: parameters["rowFilter.relatives.owner_id"];
          type?: parameters["rowFilter.relatives.type"];
          updated_by?: parameters["rowFilter.relatives.updated_by"];
          employee_id?: parameters["rowFilter.relatives.employee_id"];
          gender?: parameters["rowFilter.relatives.gender"];
          relation_types_id?: parameters["rowFilter.relatives.relation_types_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["relatives"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** relatives */
          relatives?: definitions["relatives"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.relatives.id"];
          created_at?: parameters["rowFilter.relatives.created_at"];
          updated_at?: parameters["rowFilter.relatives.updated_at"];
          created_by?: parameters["rowFilter.relatives.created_by"];
          name?: parameters["rowFilter.relatives.name"];
          date_of_birth?: parameters["rowFilter.relatives.date_of_birth"];
          owner_id?: parameters["rowFilter.relatives.owner_id"];
          type?: parameters["rowFilter.relatives.type"];
          updated_by?: parameters["rowFilter.relatives.updated_by"];
          employee_id?: parameters["rowFilter.relatives.employee_id"];
          gender?: parameters["rowFilter.relatives.gender"];
          relation_types_id?: parameters["rowFilter.relatives.relation_types_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.relatives.id"];
          created_at?: parameters["rowFilter.relatives.created_at"];
          updated_at?: parameters["rowFilter.relatives.updated_at"];
          created_by?: parameters["rowFilter.relatives.created_by"];
          name?: parameters["rowFilter.relatives.name"];
          date_of_birth?: parameters["rowFilter.relatives.date_of_birth"];
          owner_id?: parameters["rowFilter.relatives.owner_id"];
          type?: parameters["rowFilter.relatives.type"];
          updated_by?: parameters["rowFilter.relatives.updated_by"];
          employee_id?: parameters["rowFilter.relatives.employee_id"];
          gender?: parameters["rowFilter.relatives.gender"];
          relation_types_id?: parameters["rowFilter.relatives.relation_types_id"];
        };
        body: {
          /** relatives */
          relatives?: definitions["relatives"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/roles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roles.id"];
          created_at?: parameters["rowFilter.roles.created_at"];
          created_by?: parameters["rowFilter.roles.created_by"];
          owner_id?: parameters["rowFilter.roles.owner_id"];
          updated_at?: parameters["rowFilter.roles.updated_at"];
          name?: parameters["rowFilter.roles.name"];
          permissions?: parameters["rowFilter.roles.permissions"];
          description?: parameters["rowFilter.roles.description"];
          updated_by?: parameters["rowFilter.roles.updated_by"];
          level?: parameters["rowFilter.roles.level"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["roles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** roles */
          roles?: definitions["roles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roles.id"];
          created_at?: parameters["rowFilter.roles.created_at"];
          created_by?: parameters["rowFilter.roles.created_by"];
          owner_id?: parameters["rowFilter.roles.owner_id"];
          updated_at?: parameters["rowFilter.roles.updated_at"];
          name?: parameters["rowFilter.roles.name"];
          permissions?: parameters["rowFilter.roles.permissions"];
          description?: parameters["rowFilter.roles.description"];
          updated_by?: parameters["rowFilter.roles.updated_by"];
          level?: parameters["rowFilter.roles.level"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roles.id"];
          created_at?: parameters["rowFilter.roles.created_at"];
          created_by?: parameters["rowFilter.roles.created_by"];
          owner_id?: parameters["rowFilter.roles.owner_id"];
          updated_at?: parameters["rowFilter.roles.updated_at"];
          name?: parameters["rowFilter.roles.name"];
          permissions?: parameters["rowFilter.roles.permissions"];
          description?: parameters["rowFilter.roles.description"];
          updated_by?: parameters["rowFilter.roles.updated_by"];
          level?: parameters["rowFilter.roles.level"];
        };
        body: {
          /** roles */
          roles?: definitions["roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_training_bonuses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_training_bonuses.id"];
          created_at?: parameters["rowFilter.request_training_bonuses.created_at"];
          updated_at?: parameters["rowFilter.request_training_bonuses.updated_at"];
          created_by?: parameters["rowFilter.request_training_bonuses.created_by"];
          notes?: parameters["rowFilter.request_training_bonuses.notes"];
          owner_id?: parameters["rowFilter.request_training_bonuses.owner_id"];
          title?: parameters["rowFilter.request_training_bonuses.title"];
          type?: parameters["rowFilter.request_training_bonuses.type"];
          updated_by?: parameters["rowFilter.request_training_bonuses.updated_by"];
          status?: parameters["rowFilter.request_training_bonuses.status"];
          training_id?: parameters["rowFilter.request_training_bonuses.training_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_training_bonuses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_training_bonuses */
          request_training_bonuses?: definitions["request_training_bonuses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_training_bonuses.id"];
          created_at?: parameters["rowFilter.request_training_bonuses.created_at"];
          updated_at?: parameters["rowFilter.request_training_bonuses.updated_at"];
          created_by?: parameters["rowFilter.request_training_bonuses.created_by"];
          notes?: parameters["rowFilter.request_training_bonuses.notes"];
          owner_id?: parameters["rowFilter.request_training_bonuses.owner_id"];
          title?: parameters["rowFilter.request_training_bonuses.title"];
          type?: parameters["rowFilter.request_training_bonuses.type"];
          updated_by?: parameters["rowFilter.request_training_bonuses.updated_by"];
          status?: parameters["rowFilter.request_training_bonuses.status"];
          training_id?: parameters["rowFilter.request_training_bonuses.training_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_training_bonuses.id"];
          created_at?: parameters["rowFilter.request_training_bonuses.created_at"];
          updated_at?: parameters["rowFilter.request_training_bonuses.updated_at"];
          created_by?: parameters["rowFilter.request_training_bonuses.created_by"];
          notes?: parameters["rowFilter.request_training_bonuses.notes"];
          owner_id?: parameters["rowFilter.request_training_bonuses.owner_id"];
          title?: parameters["rowFilter.request_training_bonuses.title"];
          type?: parameters["rowFilter.request_training_bonuses.type"];
          updated_by?: parameters["rowFilter.request_training_bonuses.updated_by"];
          status?: parameters["rowFilter.request_training_bonuses.status"];
          training_id?: parameters["rowFilter.request_training_bonuses.training_id"];
        };
        body: {
          /** request_training_bonuses */
          request_training_bonuses?: definitions["request_training_bonuses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_employee_health_conditions": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_health_conditions.created_at"];
          updated_at?: parameters["rowFilter.join_employee_health_conditions.updated_at"];
          employee_id?: parameters["rowFilter.join_employee_health_conditions.employee_id"];
          condition_id?: parameters["rowFilter.join_employee_health_conditions.condition_id"];
          created_by?: parameters["rowFilter.join_employee_health_conditions.created_by"];
          owner_id?: parameters["rowFilter.join_employee_health_conditions.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_health_conditions.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_employee_health_conditions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_employee_health_conditions */
          join_employee_health_conditions?: definitions["join_employee_health_conditions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_health_conditions.created_at"];
          updated_at?: parameters["rowFilter.join_employee_health_conditions.updated_at"];
          employee_id?: parameters["rowFilter.join_employee_health_conditions.employee_id"];
          condition_id?: parameters["rowFilter.join_employee_health_conditions.condition_id"];
          created_by?: parameters["rowFilter.join_employee_health_conditions.created_by"];
          owner_id?: parameters["rowFilter.join_employee_health_conditions.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_health_conditions.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_employee_health_conditions.created_at"];
          updated_at?: parameters["rowFilter.join_employee_health_conditions.updated_at"];
          employee_id?: parameters["rowFilter.join_employee_health_conditions.employee_id"];
          condition_id?: parameters["rowFilter.join_employee_health_conditions.condition_id"];
          created_by?: parameters["rowFilter.join_employee_health_conditions.created_by"];
          owner_id?: parameters["rowFilter.join_employee_health_conditions.owner_id"];
          updated_by?: parameters["rowFilter.join_employee_health_conditions.updated_by"];
        };
        body: {
          /** join_employee_health_conditions */
          join_employee_health_conditions?: definitions["join_employee_health_conditions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/visas": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.visas.id"];
          created_at?: parameters["rowFilter.visas.created_at"];
          created_by?: parameters["rowFilter.visas.created_by"];
          owner_id?: parameters["rowFilter.visas.owner_id"];
          updated_at?: parameters["rowFilter.visas.updated_at"];
          from?: parameters["rowFilter.visas.from"];
          to?: parameters["rowFilter.visas.to"];
          id_number?: parameters["rowFilter.visas.id_number"];
          employee_id?: parameters["rowFilter.visas.employee_id"];
          visa_type_id?: parameters["rowFilter.visas.visa_type_id"];
          updated_by?: parameters["rowFilter.visas.updated_by"];
          country_of_issue_id?: parameters["rowFilter.visas.country_of_issue_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["visas"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** visas */
          visas?: definitions["visas"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.visas.id"];
          created_at?: parameters["rowFilter.visas.created_at"];
          created_by?: parameters["rowFilter.visas.created_by"];
          owner_id?: parameters["rowFilter.visas.owner_id"];
          updated_at?: parameters["rowFilter.visas.updated_at"];
          from?: parameters["rowFilter.visas.from"];
          to?: parameters["rowFilter.visas.to"];
          id_number?: parameters["rowFilter.visas.id_number"];
          employee_id?: parameters["rowFilter.visas.employee_id"];
          visa_type_id?: parameters["rowFilter.visas.visa_type_id"];
          updated_by?: parameters["rowFilter.visas.updated_by"];
          country_of_issue_id?: parameters["rowFilter.visas.country_of_issue_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.visas.id"];
          created_at?: parameters["rowFilter.visas.created_at"];
          created_by?: parameters["rowFilter.visas.created_by"];
          owner_id?: parameters["rowFilter.visas.owner_id"];
          updated_at?: parameters["rowFilter.visas.updated_at"];
          from?: parameters["rowFilter.visas.from"];
          to?: parameters["rowFilter.visas.to"];
          id_number?: parameters["rowFilter.visas.id_number"];
          employee_id?: parameters["rowFilter.visas.employee_id"];
          visa_type_id?: parameters["rowFilter.visas.visa_type_id"];
          updated_by?: parameters["rowFilter.visas.updated_by"];
          country_of_issue_id?: parameters["rowFilter.visas.country_of_issue_id"];
        };
        body: {
          /** visas */
          visas?: definitions["visas"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/work_hours": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.work_hours.id"];
          created_at?: parameters["rowFilter.work_hours.created_at"];
          created_by?: parameters["rowFilter.work_hours.created_by"];
          owner_id?: parameters["rowFilter.work_hours.owner_id"];
          updated_at?: parameters["rowFilter.work_hours.updated_at"];
          from?: parameters["rowFilter.work_hours.from"];
          to?: parameters["rowFilter.work_hours.to"];
          updated_by?: parameters["rowFilter.work_hours.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["work_hours"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** work_hours */
          work_hours?: definitions["work_hours"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.work_hours.id"];
          created_at?: parameters["rowFilter.work_hours.created_at"];
          created_by?: parameters["rowFilter.work_hours.created_by"];
          owner_id?: parameters["rowFilter.work_hours.owner_id"];
          updated_at?: parameters["rowFilter.work_hours.updated_at"];
          from?: parameters["rowFilter.work_hours.from"];
          to?: parameters["rowFilter.work_hours.to"];
          updated_by?: parameters["rowFilter.work_hours.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.work_hours.id"];
          created_at?: parameters["rowFilter.work_hours.created_at"];
          created_by?: parameters["rowFilter.work_hours.created_by"];
          owner_id?: parameters["rowFilter.work_hours.owner_id"];
          updated_at?: parameters["rowFilter.work_hours.updated_at"];
          from?: parameters["rowFilter.work_hours.from"];
          to?: parameters["rowFilter.work_hours.to"];
          updated_by?: parameters["rowFilter.work_hours.updated_by"];
        };
        body: {
          /** work_hours */
          work_hours?: definitions["work_hours"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_categories": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_categories.id"];
          created_at?: parameters["rowFilter.product_categories.created_at"];
          created_by?: parameters["rowFilter.product_categories.created_by"];
          owner_id?: parameters["rowFilter.product_categories.owner_id"];
          updated_at?: parameters["rowFilter.product_categories.updated_at"];
          name?: parameters["rowFilter.product_categories.name"];
          updated_by?: parameters["rowFilter.product_categories.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_categories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_categories */
          product_categories?: definitions["product_categories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_categories.id"];
          created_at?: parameters["rowFilter.product_categories.created_at"];
          created_by?: parameters["rowFilter.product_categories.created_by"];
          owner_id?: parameters["rowFilter.product_categories.owner_id"];
          updated_at?: parameters["rowFilter.product_categories.updated_at"];
          name?: parameters["rowFilter.product_categories.name"];
          updated_by?: parameters["rowFilter.product_categories.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_categories.id"];
          created_at?: parameters["rowFilter.product_categories.created_at"];
          created_by?: parameters["rowFilter.product_categories.created_by"];
          owner_id?: parameters["rowFilter.product_categories.owner_id"];
          updated_at?: parameters["rowFilter.product_categories.updated_at"];
          name?: parameters["rowFilter.product_categories.name"];
          updated_by?: parameters["rowFilter.product_categories.updated_by"];
        };
        body: {
          /** product_categories */
          product_categories?: definitions["product_categories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/passports": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.passports.id"];
          created_at?: parameters["rowFilter.passports.created_at"];
          updated_at?: parameters["rowFilter.passports.updated_at"];
          created_by?: parameters["rowFilter.passports.created_by"];
          date_of_expiry?: parameters["rowFilter.passports.date_of_expiry"];
          date_of_issue?: parameters["rowFilter.passports.date_of_issue"];
          job_title?: parameters["rowFilter.passports.job_title"];
          owner_id?: parameters["rowFilter.passports.owner_id"];
          employee_id?: parameters["rowFilter.passports.employee_id"];
          place_of_issue_id?: parameters["rowFilter.passports.place_of_issue_id"];
          updated_by?: parameters["rowFilter.passports.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["passports"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** passports */
          passports?: definitions["passports"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.passports.id"];
          created_at?: parameters["rowFilter.passports.created_at"];
          updated_at?: parameters["rowFilter.passports.updated_at"];
          created_by?: parameters["rowFilter.passports.created_by"];
          date_of_expiry?: parameters["rowFilter.passports.date_of_expiry"];
          date_of_issue?: parameters["rowFilter.passports.date_of_issue"];
          job_title?: parameters["rowFilter.passports.job_title"];
          owner_id?: parameters["rowFilter.passports.owner_id"];
          employee_id?: parameters["rowFilter.passports.employee_id"];
          place_of_issue_id?: parameters["rowFilter.passports.place_of_issue_id"];
          updated_by?: parameters["rowFilter.passports.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.passports.id"];
          created_at?: parameters["rowFilter.passports.created_at"];
          updated_at?: parameters["rowFilter.passports.updated_at"];
          created_by?: parameters["rowFilter.passports.created_by"];
          date_of_expiry?: parameters["rowFilter.passports.date_of_expiry"];
          date_of_issue?: parameters["rowFilter.passports.date_of_issue"];
          job_title?: parameters["rowFilter.passports.job_title"];
          owner_id?: parameters["rowFilter.passports.owner_id"];
          employee_id?: parameters["rowFilter.passports.employee_id"];
          place_of_issue_id?: parameters["rowFilter.passports.place_of_issue_id"];
          updated_by?: parameters["rowFilter.passports.updated_by"];
        };
        body: {
          /** passports */
          passports?: definitions["passports"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/identification_cards": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.identification_cards.id"];
          created_at?: parameters["rowFilter.identification_cards.created_at"];
          updated_at?: parameters["rowFilter.identification_cards.updated_at"];
          created_by?: parameters["rowFilter.identification_cards.created_by"];
          id_number?: parameters["rowFilter.identification_cards.id_number"];
          date_of_issue?: parameters["rowFilter.identification_cards.date_of_issue"];
          job_title?: parameters["rowFilter.identification_cards.job_title"];
          front_image_id?: parameters["rowFilter.identification_cards.front_image_id"];
          owner_id?: parameters["rowFilter.identification_cards.owner_id"];
          employee_id?: parameters["rowFilter.identification_cards.employee_id"];
          back_image_id?: parameters["rowFilter.identification_cards.back_image_id"];
          date_of_expiry?: parameters["rowFilter.identification_cards.date_of_expiry"];
          place_of_issue_id?: parameters["rowFilter.identification_cards.place_of_issue_id"];
          updated_by?: parameters["rowFilter.identification_cards.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["identification_cards"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** identification_cards */
          identification_cards?: definitions["identification_cards"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.identification_cards.id"];
          created_at?: parameters["rowFilter.identification_cards.created_at"];
          updated_at?: parameters["rowFilter.identification_cards.updated_at"];
          created_by?: parameters["rowFilter.identification_cards.created_by"];
          id_number?: parameters["rowFilter.identification_cards.id_number"];
          date_of_issue?: parameters["rowFilter.identification_cards.date_of_issue"];
          job_title?: parameters["rowFilter.identification_cards.job_title"];
          front_image_id?: parameters["rowFilter.identification_cards.front_image_id"];
          owner_id?: parameters["rowFilter.identification_cards.owner_id"];
          employee_id?: parameters["rowFilter.identification_cards.employee_id"];
          back_image_id?: parameters["rowFilter.identification_cards.back_image_id"];
          date_of_expiry?: parameters["rowFilter.identification_cards.date_of_expiry"];
          place_of_issue_id?: parameters["rowFilter.identification_cards.place_of_issue_id"];
          updated_by?: parameters["rowFilter.identification_cards.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.identification_cards.id"];
          created_at?: parameters["rowFilter.identification_cards.created_at"];
          updated_at?: parameters["rowFilter.identification_cards.updated_at"];
          created_by?: parameters["rowFilter.identification_cards.created_by"];
          id_number?: parameters["rowFilter.identification_cards.id_number"];
          date_of_issue?: parameters["rowFilter.identification_cards.date_of_issue"];
          job_title?: parameters["rowFilter.identification_cards.job_title"];
          front_image_id?: parameters["rowFilter.identification_cards.front_image_id"];
          owner_id?: parameters["rowFilter.identification_cards.owner_id"];
          employee_id?: parameters["rowFilter.identification_cards.employee_id"];
          back_image_id?: parameters["rowFilter.identification_cards.back_image_id"];
          date_of_expiry?: parameters["rowFilter.identification_cards.date_of_expiry"];
          place_of_issue_id?: parameters["rowFilter.identification_cards.place_of_issue_id"];
          updated_by?: parameters["rowFilter.identification_cards.updated_by"];
        };
        body: {
          /** identification_cards */
          identification_cards?: definitions["identification_cards"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/contact_information": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.contact_information.id"];
          created_at?: parameters["rowFilter.contact_information.created_at"];
          updated_at?: parameters["rowFilter.contact_information.updated_at"];
          employee_name?: parameters["rowFilter.contact_information.employee_name"];
          phone?: parameters["rowFilter.contact_information.phone"];
          email?: parameters["rowFilter.contact_information.email"];
          website?: parameters["rowFilter.contact_information.website"];
          updated_by?: parameters["rowFilter.contact_information.updated_by"];
          owner_id?: parameters["rowFilter.contact_information.owner_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["contact_information"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** contact_information */
          contact_information?: definitions["contact_information"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.contact_information.id"];
          created_at?: parameters["rowFilter.contact_information.created_at"];
          updated_at?: parameters["rowFilter.contact_information.updated_at"];
          employee_name?: parameters["rowFilter.contact_information.employee_name"];
          phone?: parameters["rowFilter.contact_information.phone"];
          email?: parameters["rowFilter.contact_information.email"];
          website?: parameters["rowFilter.contact_information.website"];
          updated_by?: parameters["rowFilter.contact_information.updated_by"];
          owner_id?: parameters["rowFilter.contact_information.owner_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.contact_information.id"];
          created_at?: parameters["rowFilter.contact_information.created_at"];
          updated_at?: parameters["rowFilter.contact_information.updated_at"];
          employee_name?: parameters["rowFilter.contact_information.employee_name"];
          phone?: parameters["rowFilter.contact_information.phone"];
          email?: parameters["rowFilter.contact_information.email"];
          website?: parameters["rowFilter.contact_information.website"];
          updated_by?: parameters["rowFilter.contact_information.updated_by"];
          owner_id?: parameters["rowFilter.contact_information.owner_id"];
        };
        body: {
          /** contact_information */
          contact_information?: definitions["contact_information"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/bank_accounts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.bank_accounts.id"];
          created_at?: parameters["rowFilter.bank_accounts.created_at"];
          created_by?: parameters["rowFilter.bank_accounts.created_by"];
          owner_id?: parameters["rowFilter.bank_accounts.owner_id"];
          iban?: parameters["rowFilter.bank_accounts.iban"];
          updated_at?: parameters["rowFilter.bank_accounts.updated_at"];
          bank_id?: parameters["rowFilter.bank_accounts.bank_id"];
          employee_id?: parameters["rowFilter.bank_accounts.employee_id"];
          updated_by?: parameters["rowFilter.bank_accounts.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["bank_accounts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** bank_accounts */
          bank_accounts?: definitions["bank_accounts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.bank_accounts.id"];
          created_at?: parameters["rowFilter.bank_accounts.created_at"];
          created_by?: parameters["rowFilter.bank_accounts.created_by"];
          owner_id?: parameters["rowFilter.bank_accounts.owner_id"];
          iban?: parameters["rowFilter.bank_accounts.iban"];
          updated_at?: parameters["rowFilter.bank_accounts.updated_at"];
          bank_id?: parameters["rowFilter.bank_accounts.bank_id"];
          employee_id?: parameters["rowFilter.bank_accounts.employee_id"];
          updated_by?: parameters["rowFilter.bank_accounts.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.bank_accounts.id"];
          created_at?: parameters["rowFilter.bank_accounts.created_at"];
          created_by?: parameters["rowFilter.bank_accounts.created_by"];
          owner_id?: parameters["rowFilter.bank_accounts.owner_id"];
          iban?: parameters["rowFilter.bank_accounts.iban"];
          updated_at?: parameters["rowFilter.bank_accounts.updated_at"];
          bank_id?: parameters["rowFilter.bank_accounts.bank_id"];
          employee_id?: parameters["rowFilter.bank_accounts.employee_id"];
          updated_by?: parameters["rowFilter.bank_accounts.updated_by"];
        };
        body: {
          /** bank_accounts */
          bank_accounts?: definitions["bank_accounts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/compensations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.compensations.id"];
          created_at?: parameters["rowFilter.compensations.created_at"];
          created_by?: parameters["rowFilter.compensations.created_by"];
          owner_id?: parameters["rowFilter.compensations.owner_id"];
          updated_at?: parameters["rowFilter.compensations.updated_at"];
          name?: parameters["rowFilter.compensations.name"];
          updated_by?: parameters["rowFilter.compensations.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["compensations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** compensations */
          compensations?: definitions["compensations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.compensations.id"];
          created_at?: parameters["rowFilter.compensations.created_at"];
          created_by?: parameters["rowFilter.compensations.created_by"];
          owner_id?: parameters["rowFilter.compensations.owner_id"];
          updated_at?: parameters["rowFilter.compensations.updated_at"];
          name?: parameters["rowFilter.compensations.name"];
          updated_by?: parameters["rowFilter.compensations.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.compensations.id"];
          created_at?: parameters["rowFilter.compensations.created_at"];
          created_by?: parameters["rowFilter.compensations.created_by"];
          owner_id?: parameters["rowFilter.compensations.owner_id"];
          updated_at?: parameters["rowFilter.compensations.updated_at"];
          name?: parameters["rowFilter.compensations.name"];
          updated_by?: parameters["rowFilter.compensations.updated_by"];
        };
        body: {
          /** compensations */
          compensations?: definitions["compensations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/insurance_offers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_offers.id"];
          created_at?: parameters["rowFilter.insurance_offers.created_at"];
          created_by?: parameters["rowFilter.insurance_offers.created_by"];
          owner_id?: parameters["rowFilter.insurance_offers.owner_id"];
          updated_at?: parameters["rowFilter.insurance_offers.updated_at"];
          name?: parameters["rowFilter.insurance_offers.name"];
          insurance_company_id?: parameters["rowFilter.insurance_offers.insurance_company_id"];
          notes?: parameters["rowFilter.insurance_offers.notes"];
          updated_by?: parameters["rowFilter.insurance_offers.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["insurance_offers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** insurance_offers */
          insurance_offers?: definitions["insurance_offers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_offers.id"];
          created_at?: parameters["rowFilter.insurance_offers.created_at"];
          created_by?: parameters["rowFilter.insurance_offers.created_by"];
          owner_id?: parameters["rowFilter.insurance_offers.owner_id"];
          updated_at?: parameters["rowFilter.insurance_offers.updated_at"];
          name?: parameters["rowFilter.insurance_offers.name"];
          insurance_company_id?: parameters["rowFilter.insurance_offers.insurance_company_id"];
          notes?: parameters["rowFilter.insurance_offers.notes"];
          updated_by?: parameters["rowFilter.insurance_offers.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.insurance_offers.id"];
          created_at?: parameters["rowFilter.insurance_offers.created_at"];
          created_by?: parameters["rowFilter.insurance_offers.created_by"];
          owner_id?: parameters["rowFilter.insurance_offers.owner_id"];
          updated_at?: parameters["rowFilter.insurance_offers.updated_at"];
          name?: parameters["rowFilter.insurance_offers.name"];
          insurance_company_id?: parameters["rowFilter.insurance_offers.insurance_company_id"];
          notes?: parameters["rowFilter.insurance_offers.notes"];
          updated_by?: parameters["rowFilter.insurance_offers.updated_by"];
        };
        body: {
          /** insurance_offers */
          insurance_offers?: definitions["insurance_offers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/kids": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.kids.id"];
          created_at?: parameters["rowFilter.kids.created_at"];
          updated_at?: parameters["rowFilter.kids.updated_at"];
          created_by?: parameters["rowFilter.kids.created_by"];
          name?: parameters["rowFilter.kids.name"];
          date_of_birth?: parameters["rowFilter.kids.date_of_birth"];
          owner_id?: parameters["rowFilter.kids.owner_id"];
          type?: parameters["rowFilter.kids.type"];
          updated_by?: parameters["rowFilter.kids.updated_by"];
          gender?: parameters["rowFilter.kids.gender"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["kids"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** kids */
          kids?: definitions["kids"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.kids.id"];
          created_at?: parameters["rowFilter.kids.created_at"];
          updated_at?: parameters["rowFilter.kids.updated_at"];
          created_by?: parameters["rowFilter.kids.created_by"];
          name?: parameters["rowFilter.kids.name"];
          date_of_birth?: parameters["rowFilter.kids.date_of_birth"];
          owner_id?: parameters["rowFilter.kids.owner_id"];
          type?: parameters["rowFilter.kids.type"];
          updated_by?: parameters["rowFilter.kids.updated_by"];
          gender?: parameters["rowFilter.kids.gender"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.kids.id"];
          created_at?: parameters["rowFilter.kids.created_at"];
          updated_at?: parameters["rowFilter.kids.updated_at"];
          created_by?: parameters["rowFilter.kids.created_by"];
          name?: parameters["rowFilter.kids.name"];
          date_of_birth?: parameters["rowFilter.kids.date_of_birth"];
          owner_id?: parameters["rowFilter.kids.owner_id"];
          type?: parameters["rowFilter.kids.type"];
          updated_by?: parameters["rowFilter.kids.updated_by"];
          gender?: parameters["rowFilter.kids.gender"];
        };
        body: {
          /** kids */
          kids?: definitions["kids"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_shipping_company_countries": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_shipping_company_countries.created_at"];
          updated_at?: parameters["rowFilter.join_shipping_company_countries.updated_at"];
          created_by?: parameters["rowFilter.join_shipping_company_countries.created_by"];
          shipping_company_id?: parameters["rowFilter.join_shipping_company_countries.shipping_company_id"];
          res_country_id?: parameters["rowFilter.join_shipping_company_countries.res_country_id"];
          owner_id?: parameters["rowFilter.join_shipping_company_countries.owner_id"];
          updated_by?: parameters["rowFilter.join_shipping_company_countries.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_shipping_company_countries"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_shipping_company_countries */
          join_shipping_company_countries?: definitions["join_shipping_company_countries"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_shipping_company_countries.created_at"];
          updated_at?: parameters["rowFilter.join_shipping_company_countries.updated_at"];
          created_by?: parameters["rowFilter.join_shipping_company_countries.created_by"];
          shipping_company_id?: parameters["rowFilter.join_shipping_company_countries.shipping_company_id"];
          res_country_id?: parameters["rowFilter.join_shipping_company_countries.res_country_id"];
          owner_id?: parameters["rowFilter.join_shipping_company_countries.owner_id"];
          updated_by?: parameters["rowFilter.join_shipping_company_countries.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_shipping_company_countries.created_at"];
          updated_at?: parameters["rowFilter.join_shipping_company_countries.updated_at"];
          created_by?: parameters["rowFilter.join_shipping_company_countries.created_by"];
          shipping_company_id?: parameters["rowFilter.join_shipping_company_countries.shipping_company_id"];
          res_country_id?: parameters["rowFilter.join_shipping_company_countries.res_country_id"];
          owner_id?: parameters["rowFilter.join_shipping_company_countries.owner_id"];
          updated_by?: parameters["rowFilter.join_shipping_company_countries.updated_by"];
        };
        body: {
          /** join_shipping_company_countries */
          join_shipping_company_countries?: definitions["join_shipping_company_countries"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_settlements": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_settlements.id"];
          created_at?: parameters["rowFilter.request_settlements.created_at"];
          updated_at?: parameters["rowFilter.request_settlements.updated_at"];
          created_by?: parameters["rowFilter.request_settlements.created_by"];
          notes?: parameters["rowFilter.request_settlements.notes"];
          owner_id?: parameters["rowFilter.request_settlements.owner_id"];
          title?: parameters["rowFilter.request_settlements.title"];
          type?: parameters["rowFilter.request_settlements.type"];
          updated_by?: parameters["rowFilter.request_settlements.updated_by"];
          status?: parameters["rowFilter.request_settlements.status"];
          amount?: parameters["rowFilter.request_settlements.amount"];
          settlement_type_id?: parameters["rowFilter.request_settlements.settlement_type_id"];
          date_of_settlement?: parameters["rowFilter.request_settlements.date_of_settlement"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_settlements"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_settlements */
          request_settlements?: definitions["request_settlements"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_settlements.id"];
          created_at?: parameters["rowFilter.request_settlements.created_at"];
          updated_at?: parameters["rowFilter.request_settlements.updated_at"];
          created_by?: parameters["rowFilter.request_settlements.created_by"];
          notes?: parameters["rowFilter.request_settlements.notes"];
          owner_id?: parameters["rowFilter.request_settlements.owner_id"];
          title?: parameters["rowFilter.request_settlements.title"];
          type?: parameters["rowFilter.request_settlements.type"];
          updated_by?: parameters["rowFilter.request_settlements.updated_by"];
          status?: parameters["rowFilter.request_settlements.status"];
          amount?: parameters["rowFilter.request_settlements.amount"];
          settlement_type_id?: parameters["rowFilter.request_settlements.settlement_type_id"];
          date_of_settlement?: parameters["rowFilter.request_settlements.date_of_settlement"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_settlements.id"];
          created_at?: parameters["rowFilter.request_settlements.created_at"];
          updated_at?: parameters["rowFilter.request_settlements.updated_at"];
          created_by?: parameters["rowFilter.request_settlements.created_by"];
          notes?: parameters["rowFilter.request_settlements.notes"];
          owner_id?: parameters["rowFilter.request_settlements.owner_id"];
          title?: parameters["rowFilter.request_settlements.title"];
          type?: parameters["rowFilter.request_settlements.type"];
          updated_by?: parameters["rowFilter.request_settlements.updated_by"];
          status?: parameters["rowFilter.request_settlements.status"];
          amount?: parameters["rowFilter.request_settlements.amount"];
          settlement_type_id?: parameters["rowFilter.request_settlements.settlement_type_id"];
          date_of_settlement?: parameters["rowFilter.request_settlements.date_of_settlement"];
        };
        body: {
          /** request_settlements */
          request_settlements?: definitions["request_settlements"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/request_punctuality_changes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_punctuality_changes.id"];
          created_at?: parameters["rowFilter.request_punctuality_changes.created_at"];
          updated_at?: parameters["rowFilter.request_punctuality_changes.updated_at"];
          created_by?: parameters["rowFilter.request_punctuality_changes.created_by"];
          notes?: parameters["rowFilter.request_punctuality_changes.notes"];
          owner_id?: parameters["rowFilter.request_punctuality_changes.owner_id"];
          title?: parameters["rowFilter.request_punctuality_changes.title"];
          type?: parameters["rowFilter.request_punctuality_changes.type"];
          updated_by?: parameters["rowFilter.request_punctuality_changes.updated_by"];
          status?: parameters["rowFilter.request_punctuality_changes.status"];
          advances_id?: parameters["rowFilter.request_punctuality_changes.advances_id"];
          punctuality_type_id?: parameters["rowFilter.request_punctuality_changes.punctuality_type_id"];
          date_of_old_punctuality?: parameters["rowFilter.request_punctuality_changes.date_of_old_punctuality"];
          date_of_new_punctuality?: parameters["rowFilter.request_punctuality_changes.date_of_new_punctuality"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["request_punctuality_changes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** request_punctuality_changes */
          request_punctuality_changes?: definitions["request_punctuality_changes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_punctuality_changes.id"];
          created_at?: parameters["rowFilter.request_punctuality_changes.created_at"];
          updated_at?: parameters["rowFilter.request_punctuality_changes.updated_at"];
          created_by?: parameters["rowFilter.request_punctuality_changes.created_by"];
          notes?: parameters["rowFilter.request_punctuality_changes.notes"];
          owner_id?: parameters["rowFilter.request_punctuality_changes.owner_id"];
          title?: parameters["rowFilter.request_punctuality_changes.title"];
          type?: parameters["rowFilter.request_punctuality_changes.type"];
          updated_by?: parameters["rowFilter.request_punctuality_changes.updated_by"];
          status?: parameters["rowFilter.request_punctuality_changes.status"];
          advances_id?: parameters["rowFilter.request_punctuality_changes.advances_id"];
          punctuality_type_id?: parameters["rowFilter.request_punctuality_changes.punctuality_type_id"];
          date_of_old_punctuality?: parameters["rowFilter.request_punctuality_changes.date_of_old_punctuality"];
          date_of_new_punctuality?: parameters["rowFilter.request_punctuality_changes.date_of_new_punctuality"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.request_punctuality_changes.id"];
          created_at?: parameters["rowFilter.request_punctuality_changes.created_at"];
          updated_at?: parameters["rowFilter.request_punctuality_changes.updated_at"];
          created_by?: parameters["rowFilter.request_punctuality_changes.created_by"];
          notes?: parameters["rowFilter.request_punctuality_changes.notes"];
          owner_id?: parameters["rowFilter.request_punctuality_changes.owner_id"];
          title?: parameters["rowFilter.request_punctuality_changes.title"];
          type?: parameters["rowFilter.request_punctuality_changes.type"];
          updated_by?: parameters["rowFilter.request_punctuality_changes.updated_by"];
          status?: parameters["rowFilter.request_punctuality_changes.status"];
          advances_id?: parameters["rowFilter.request_punctuality_changes.advances_id"];
          punctuality_type_id?: parameters["rowFilter.request_punctuality_changes.punctuality_type_id"];
          date_of_old_punctuality?: parameters["rowFilter.request_punctuality_changes.date_of_old_punctuality"];
          date_of_new_punctuality?: parameters["rowFilter.request_punctuality_changes.date_of_new_punctuality"];
        };
        body: {
          /** request_punctuality_changes */
          request_punctuality_changes?: definitions["request_punctuality_changes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/join_request_documents": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_request_documents.created_at"];
          updated_at?: parameters["rowFilter.join_request_documents.updated_at"];
          created_by?: parameters["rowFilter.join_request_documents.created_by"];
          request_id?: parameters["rowFilter.join_request_documents.request_id"];
          image_id?: parameters["rowFilter.join_request_documents.image_id"];
          owner_id?: parameters["rowFilter.join_request_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_request_documents.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["join_request_documents"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** join_request_documents */
          join_request_documents?: definitions["join_request_documents"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_request_documents.created_at"];
          updated_at?: parameters["rowFilter.join_request_documents.updated_at"];
          created_by?: parameters["rowFilter.join_request_documents.created_by"];
          request_id?: parameters["rowFilter.join_request_documents.request_id"];
          image_id?: parameters["rowFilter.join_request_documents.image_id"];
          owner_id?: parameters["rowFilter.join_request_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_request_documents.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.join_request_documents.created_at"];
          updated_at?: parameters["rowFilter.join_request_documents.updated_at"];
          created_by?: parameters["rowFilter.join_request_documents.created_by"];
          request_id?: parameters["rowFilter.join_request_documents.request_id"];
          image_id?: parameters["rowFilter.join_request_documents.image_id"];
          owner_id?: parameters["rowFilter.join_request_documents.owner_id"];
          updated_by?: parameters["rowFilter.join_request_documents.updated_by"];
        };
        body: {
          /** join_request_documents */
          join_request_documents?: definitions["join_request_documents"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/vacations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.vacations.id"];
          created_at?: parameters["rowFilter.vacations.created_at"];
          created_by?: parameters["rowFilter.vacations.created_by"];
          owner_id?: parameters["rowFilter.vacations.owner_id"];
          updated_at?: parameters["rowFilter.vacations.updated_at"];
          from?: parameters["rowFilter.vacations.from"];
          to?: parameters["rowFilter.vacations.to"];
          employee_id?: parameters["rowFilter.vacations.employee_id"];
          name?: parameters["rowFilter.vacations.name"];
          request_vacation_id?: parameters["rowFilter.vacations.request_vacation_id"];
          vacation_type_id?: parameters["rowFilter.vacations.vacation_type_id"];
          updated_by?: parameters["rowFilter.vacations.updated_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["vacations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** vacations */
          vacations?: definitions["vacations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.vacations.id"];
          created_at?: parameters["rowFilter.vacations.created_at"];
          created_by?: parameters["rowFilter.vacations.created_by"];
          owner_id?: parameters["rowFilter.vacations.owner_id"];
          updated_at?: parameters["rowFilter.vacations.updated_at"];
          from?: parameters["rowFilter.vacations.from"];
          to?: parameters["rowFilter.vacations.to"];
          employee_id?: parameters["rowFilter.vacations.employee_id"];
          name?: parameters["rowFilter.vacations.name"];
          request_vacation_id?: parameters["rowFilter.vacations.request_vacation_id"];
          vacation_type_id?: parameters["rowFilter.vacations.vacation_type_id"];
          updated_by?: parameters["rowFilter.vacations.updated_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.vacations.id"];
          created_at?: parameters["rowFilter.vacations.created_at"];
          created_by?: parameters["rowFilter.vacations.created_by"];
          owner_id?: parameters["rowFilter.vacations.owner_id"];
          updated_at?: parameters["rowFilter.vacations.updated_at"];
          from?: parameters["rowFilter.vacations.from"];
          to?: parameters["rowFilter.vacations.to"];
          employee_id?: parameters["rowFilter.vacations.employee_id"];
          name?: parameters["rowFilter.vacations.name"];
          request_vacation_id?: parameters["rowFilter.vacations.request_vacation_id"];
          vacation_type_id?: parameters["rowFilter.vacations.vacation_type_id"];
          updated_by?: parameters["rowFilter.vacations.updated_by"];
        };
        body: {
          /** vacations */
          vacations?: definitions["vacations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/base_requests": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_requests.id"];
          created_at?: parameters["rowFilter.base_requests.created_at"];
          updated_at?: parameters["rowFilter.base_requests.updated_at"];
          created_by?: parameters["rowFilter.base_requests.created_by"];
          notes?: parameters["rowFilter.base_requests.notes"];
          owner_id?: parameters["rowFilter.base_requests.owner_id"];
          title?: parameters["rowFilter.base_requests.title"];
          type?: parameters["rowFilter.base_requests.type"];
          updated_by?: parameters["rowFilter.base_requests.updated_by"];
          status?: parameters["rowFilter.base_requests.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["base_requests"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** base_requests */
          base_requests?: definitions["base_requests"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_requests.id"];
          created_at?: parameters["rowFilter.base_requests.created_at"];
          updated_at?: parameters["rowFilter.base_requests.updated_at"];
          created_by?: parameters["rowFilter.base_requests.created_by"];
          notes?: parameters["rowFilter.base_requests.notes"];
          owner_id?: parameters["rowFilter.base_requests.owner_id"];
          title?: parameters["rowFilter.base_requests.title"];
          type?: parameters["rowFilter.base_requests.type"];
          updated_by?: parameters["rowFilter.base_requests.updated_by"];
          status?: parameters["rowFilter.base_requests.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.base_requests.id"];
          created_at?: parameters["rowFilter.base_requests.created_at"];
          updated_at?: parameters["rowFilter.base_requests.updated_at"];
          created_by?: parameters["rowFilter.base_requests.created_by"];
          notes?: parameters["rowFilter.base_requests.notes"];
          owner_id?: parameters["rowFilter.base_requests.owner_id"];
          title?: parameters["rowFilter.base_requests.title"];
          type?: parameters["rowFilter.base_requests.type"];
          updated_by?: parameters["rowFilter.base_requests.updated_by"];
          status?: parameters["rowFilter.base_requests.status"];
        };
        body: {
          /** base_requests */
          base_requests?: definitions["base_requests"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/user_is_group_member": {
    get: {
      parameters: {
        query: {
          group_id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            group_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/created_by": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/user_has_group_role": {
    get: {
      parameters: {
        query: {
          group_id: string;
          group_role: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            group_id: string;
            /** Format: text */
            group_role: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/jsonschema_validation_errors": {
    get: {
      parameters: {
        query: {
          schema: string;
          instance: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            instance: unknown;
            /** Format: json */
            schema: unknown;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/jsonschema_is_valid": {
    get: {
      parameters: {
        query: {
          schema: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            schema: unknown;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/update_request_status": {
    get: {
      parameters: {
        query: {
          record_id: string;
          new_status_input: string;
          request_type: string;
          change_message?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            change_message?: string;
            /** Format: character varying */
            new_status_input: string;
            /** Format: uuid */
            record_id: string;
            /** Format: character varying */
            request_type: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/jwt_is_expired": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/json_matches_schema": {
    get: {
      parameters: {
        query: {
          schema: string;
          instance: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            instance: unknown;
            /** Format: json */
            schema: unknown;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/db_pre_request": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/jsonb_matches_schema": {
    get: {
      parameters: {
        query: {
          schema: string;
          instance: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: {
            /** Format: jsonb */
            instance: unknown;
            /** Format: json */
            schema: unknown;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_user_claims": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_owner": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  images: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  types: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: jsonb */
    name: unknown;
    /** Format: text */
    category: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_expense_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `expenses.id`.<fk table='expenses' column='id'/>
     */
    expense_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  insurance_plan_additions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_certification_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `certifications.id`.<fk table='certifications' column='id'/>
     */
    certification_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_insurance_additions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_insurance_additions
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_plan_additions.id`.<fk table='insurance_plan_additions' column='id'/>
     */
    insurance_plan_addition_id?: string;
  };
  request_commissions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_commissions
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: numeric */
    suggested_amount?: number;
    /** Format: text */
    reason?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    commission_type_id?: string;
  };
  request_hirings: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_hirings
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    candidate_name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `job_titles.id`.<fk table='job_titles' column='id'/>
     */
    job_title_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    document_id?: string;
  };
  medications: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: boolean */
    recurrent?: boolean;
    /** Format: numeric */
    weeks?: number;
    /** Format: numeric */
    dose?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_health_condition_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `health_conditions.id`.<fk table='health_conditions' column='id'/>
     */
    condition_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  groups: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: text
     * @default
     */
    name: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  new_database_structure: {
    /** Format: name */
    table_name?: string;
    /** Format: jsonb */
    columns?: unknown;
  };
  trainings: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: jsonb */
    name: unknown;
    /** Format: jsonb */
    description?: unknown;
    /** Format: date */
    from?: string;
    /** Format: date */
    to?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    training_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    training_type_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  proposals: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default proposals
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: text */
    description?: string;
  };
  request_promotions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_promotions
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `job_titles.id`.<fk table='job_titles' column='id'/>
     */
    new_job_title_id: string;
  };
  commissions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: numeric */
    amount?: number;
    /** Format: text */
    reason?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id?: string;
    /** Format: text */
    note?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `request_commissions.id`.<fk table='request_commissions' column='id'/>
     */
    commission_request_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    commission_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  product_tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_marriage_kids: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `marriages.id`.<fk table='marriages' column='id'/>
     */
    marriage_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `kids.id`.<fk table='kids' column='id'/>
     */
    kid_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_permissions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_permissions
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: date */
    date_of_permission?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    permission_type_id?: string;
    /** Format: timestamp with time zone */
    from?: string;
    /** Format: timestamp with time zone */
    to?: string;
  };
  brokers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    terms_and_conditions?: string;
  };
  certifications: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: text */
    specialization: string;
    /** Format: text */
    level?: string;
    /** Format: date */
    date_of_issue: string;
    /** Format: date */
    date_of_expiry?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    issuing_organization: string;
    /** Format: text */
    credential_url?: string;
    /** Format: text */
    credential_number?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  product_types: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  insurance_plans: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_offer_plans.id`.<fk table='insurance_offer_plans' column='id'/>
     */
    offer_plan_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `system_insurance_plans.id`.<fk table='system_insurance_plans' column='id'/>
     */
    system_insurance_plan_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  survey_answers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    responder_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `surveys.id`.<fk table='surveys' column='id'/>
     */
    survey_id?: string;
    /** Format: jsonb */
    answers?: unknown;
    /** Format: text */
    status?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  driver_licenses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: date */
    date_of_expiry?: string;
    /** Format: date */
    date_of_issue?: string;
    /** Format: text */
    license_number?: string;
    /** Format: text */
    type?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    blood_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  proposal_urgents: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default proposal_urgents
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: date */
    date_of_urgent?: string;
    /** Format: text */
    description?: string;
  };
  join_employee_nationalities: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    nationality_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_expenses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_expenses
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: numeric */
    amount?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    expense_type_id?: string;
  };
  base_complaints: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default base_complaints
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_training_trainees: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `trainings.id`.<fk table='trainings' column='id'/>
     */
    training_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_product_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `products.id`.<fk table='products' column='id'/>
     */
    product_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  residencies: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: date */
    from?: string;
    /** Format: date */
    to?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    issuer_id?: string;
  };
  group_users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `groups.id`.<fk table='groups' column='id'/>
     */
    group_id: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: text
     * @default
     */
    role: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  requests: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default requests
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    description?: string;
  };
  ports: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  product_brands: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  recruitment_agencies: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @default public.get_owner()
     */
    owner_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
  };
  request_sponsorship_transfers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_sponsorship_transfers
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reason?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `sponsors.id`.<fk table='sponsors' column='id'/>
     */
    sponsor_id?: string;
  };
  join_insurance_company_feedback: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `insurance_companies.id`.<fk table='insurance_companies' column='id'/>
     */
    insurance_company_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `feedback.id`.<fk table='feedback' column='id'/>
     */
    feedback_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  work_locations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    entity_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    activity_types_id?: string;
  };
  beneficiaries: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: date */
    date_of_birth?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    type?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  complaints: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default complaints
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: text */
    description?: string;
  };
  join_employee_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  product_type_attribute_values: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `product_type_attributes.id`.<fk table='product_type_attributes' column='id'/>
     */
    product_type_attribute_id: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  factories: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: numeric */
    production_capacity?: number;
    /** Format: text */
    quality_control_and_testing?: string;
    /** Format: text */
    warranty_and_return_policy?: string;
    /** Format: text */
    terms_of_contract?: string;
  };
  request_allowances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_allowances
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: numeric */
    suggested_amount?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    allowance_type_id: string;
  };
  insurance_offer_plans: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_offers.id`.<fk table='insurance_offers' column='id'/>
     */
    insurance_offer_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `system_insurance_plans.id`.<fk table='system_insurance_plans' column='id'/>
     */
    system_insurance_plan_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  res_currencies: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: text */
    symbol: string;
    /** Format: numeric */
    decimal_places: number;
    /** Format: text */
    position: string;
    /** Format: text */
    currency_unit_label: string;
    /** Format: numeric */
    rounding: number;
    /**
     * Format: boolean
     * @default false
     */
    active: boolean;
    /** Format: text */
    full_name?: string;
    /** Format: text */
    currency_subunit_label?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  res_cities: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    city_ascii?: string;
    /** Format: numeric */
    lat?: number;
    /** Format: numeric */
    lng?: number;
    /** Format: text */
    admin_name?: string;
    /** Format: text */
    capital?: string;
    /** Format: numeric */
    population?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  contracts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    duties?: string;
    /** Format: text */
    responsibilities?: string;
    /** Format: numeric */
    salary?: number;
    /** Format: text */
    benefits?: string;
    /** Format: numeric */
    probation_period?: number;
    /** Format: date */
    date_of_start?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `job_titles.id`.<fk table='job_titles' column='id'/>
     */
    job_title_id?: string;
    /** Format: numeric */
    retirement_age?: number;
    /** Format: numeric */
    maximum_retirement_renewal_age?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `work_hours.id`.<fk table='work_hours' column='id'/>
     */
    work_hour_id?: string;
    /**
     * Format: boolean
     * @default true
     */
    insurance?: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    contract_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `recruitment_agencies.id`.<fk table='recruitment_agencies' column='id'/>
     */
    recruitment_agencies_id?: string;
    /** Format: numeric */
    retirement_renewal_period?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    compensation_type_id?: string;
    /** Format: numeric */
    period?: number;
  };
  join_broker_feedback: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `brokers.id`.<fk table='brokers' column='id'/>
     */
    broker_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `feedback.id`.<fk table='feedback' column='id'/>
     */
    feedback_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_bonuses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_bonuses
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    bonus_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `bank_accounts.id`.<fk table='bank_accounts' column='id'/>
     */
    bank_account_id?: string;
  };
  allowances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: numeric */
    suggested_amount?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `request_allowances.id`.<fk table='request_allowances' column='id'/>
     */
    request_allowances_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    allowance_type_id: string;
    /** Format: date */
    date_of_received?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `bank_accounts.id`.<fk table='bank_accounts' column='id'/>
     */
    bank_account_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_retirement_age_extensions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_retirement_age_extensions
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `survey_answers.id`.<fk table='survey_answers' column='id'/>
     */
    survey_answer_id?: string;
  };
  join_entity_employees: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    entity_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_salary_raises: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_salary_raises
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reasons?: string;
    /** Format: numeric */
    amount?: number;
  };
  join_offer_plan_providers: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `insurance_offer_plans.id`.<fk table='insurance_offer_plans' column='id'/>
     */
    insurance_offer_plan_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `healthcare_service_providers.id`.<fk table='healthcare_service_providers' column='id'/>
     */
    healthcare_service_provider_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_role_employees: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `roles.id`.<fk table='roles' column='id'/>
     */
    role_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_training_trainers: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `trainings.id`.<fk table='trainings' column='id'/>
     */
    training_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  health_reports: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: numeric */
    year: number;
    /** Format: jsonb */
    answers: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_factory_feedback: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `factories.id`.<fk table='factories' column='id'/>
     */
    factory_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `feedback.id`.<fk table='feedback' column='id'/>
     */
    feedback_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  employees: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    full_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: date */
    date_of_birth?: string;
    /**
     * Format: public.genders
     * @enum {string}
     */
    gender?: "male" | "female";
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_of_birth_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id?: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: jsonb */
    preferences: unknown;
    /** Format: date */
    date_of_hiring?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_of_birth_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `sponsors.id`.<fk table='sponsors' column='id'/>
     */
    sponsor_id?: string;
    /** Format: date */
    date_of_termination?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_plans.id`.<fk table='insurance_plans' column='id'/>
     */
    insurance_plan_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  bonuses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: numeric */
    amount?: number;
    /** Format: text */
    reason?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id?: string;
    /** Format: text */
    note?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `request_bonuses.id`.<fk table='request_bonuses' column='id'/>
     */
    bonus_request_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    bonus_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `bank_accounts.id`.<fk table='bank_accounts' column='id'/>
     */
    bank_account_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  health_conditions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    health_condition_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_relative_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `relatives.id`.<fk table='relatives' column='id'/>
     */
    relative_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_health_condition_medications: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `health_conditions.id`.<fk table='health_conditions' column='id'/>
     */
    condition_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `medications.id`.<fk table='medications' column='id'/>
     */
    medication_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_provider_type: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `healthcare_service_providers.id`.<fk table='healthcare_service_providers' column='id'/>
     */
    healthcare_provider_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    healthcare_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  spouses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: date */
    date_of_birth?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: text
     * @default spouses
     */
    type?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  deductions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: numeric */
    amount?: number;
    /** Format: text */
    reason?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id?: string;
    /** Format: text */
    note?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    deduction_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_product_warehouses: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `products.id`.<fk table='products' column='id'/>
     */
    product_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `warehouses.id`.<fk table='warehouses' column='id'/>
     */
    warehouse_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  database_structure: {
    /** Format: name */
    table_name?: string;
    /** Format: jsonb */
    columns?: unknown;
  };
  products: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    slug?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    short_description?: string;
    /** Format: text */
    sku?: string;
    /** Format: text */
    price?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `product_types.id`.<fk table='product_types' column='id'/>
     */
    product_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_insurance_company_insurance_types: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `insurance_companies.id`.<fk table='insurance_companies' column='id'/>
     */
    insurance_company_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    insurance_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  jsonschema_validators: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: json */
    schema: unknown;
    /** Format: text */
    description?: string;
    /** Format: text */
    schema_name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  sponsors: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    entity_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  image_storage_view: {
    /** Format: timestamp with time zone */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    created_by?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: text */
    bucket_id?: string;
    /** Format: timestamp with time zone */
    last_accessed_at?: string;
    /** Format: jsonb */
    metadata?: unknown;
    /** Format: text */
    name?: string;
    /** Format: uuid */
    owner?: string;
    /** Format: text[] */
    path_tokens?: string[];
    /** Format: text */
    version?: string;
  };
  attendances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    op_time: string;
    /** Format: text */
    operation: string;
    /** Format: jsonb */
    location?: unknown;
  };
  feedback: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    positive_feedback?: string;
    /** Format: numeric */
    rating: number;
    /** Format: text */
    negative_feedback?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_purchases: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_purchases
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    name?: string;
    /** Format: numeric */
    amount?: number;
    /** Format: numeric */
    quantity?: number;
  };
  join_factory_countries: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `factories.id`.<fk table='factories' column='id'/>
     */
    factory_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    res_country_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  template: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_insurance_updates: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_insurance_updates
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
  };
  join_product_product_categories: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `products.id`.<fk table='products' column='id'/>
     */
    product_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `product_categories.id`.<fk table='product_categories' column='id'/>
     */
    product_category_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  ships: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    number?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `shipping_companies.id`.<fk table='shipping_companies' column='id'/>
     */
    shipping_company_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  warehouses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name?: string;
  };
  banks: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: jsonb */
    name: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  announcements: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: text */
    title: string;
    /** Format: text */
    message: string;
    /** Format: uuid[] */
    subscribers_ids?: string[];
    /** Format: text */
    level: string;
  };
  emergency_contacts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: text */
    phone: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    relation_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  options: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: jsonb */
    value?: unknown;
    /** Format: json */
    validator?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    version?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  insurance_reports: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: numeric */
    year: number;
    /** Format: jsonb */
    answers: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_health_visits: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_health_visits
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
  };
  departments: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    entity_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  marriages: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `spouses.id`.<fk table='spouses' column='id'/>
     */
    spouse_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /** Format: date */
    date_of_marriage: string;
    /** Format: text */
    notes?: string;
    /** Format: text */
    certificate_number?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: date */
    date_of_separation?: string;
    /**
     * Format: public.separation_reasons
     * @enum {string}
     */
    separation_reason?: "divorced" | "widowed";
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  ship_lines: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `ports.id`.<fk table='ports' column='id'/>
     */
    from_port_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `ports.id`.<fk table='ports' column='id'/>
     */
    to_port_id?: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_internal_delegations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_internal_delegations
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reason?: string;
    /** Format: date */
    from?: string;
    /** Format: date */
    to?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    entity_id?: string;
  };
  insurance_companies: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    logo_id?: string;
    /** Format: text */
    trading_number?: string;
    /** Format: text */
    tax_number?: string;
    /**
     * Format: boolean
     * @default true
     */
    active: boolean;
    /** Format: text */
    emergency_contacts?: string;
  };
  entities: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: text */
    trading_number?: string;
    /** Format: text */
    tax_number?: string;
    /** Format: text */
    activity?: string;
    /** Format: text */
    type?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    parent_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entity_types.id`.<fk table='entity_types' column='id'/>
     */
    entity_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    logo_id?: string;
    /** Format: text */
    slogan?: string;
    /** Format: text */
    phone?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    nationality_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    ceo_id?: string;
    /** Format: numeric */
    established?: number;
    /** Format: text */
    website?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    employee_name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_marriage_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `marriages.id`.<fk table='marriages' column='id'/>
     */
    marriage_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  factory_branches: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `factories.id`.<fk table='factories' column='id'/>
     */
    factory_id?: string;
    /** Format: text */
    name?: string;
  };
  join_product_product_type_attribute_values: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `products.id`.<fk table='products' column='id'/>
     */
    product_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `product_type_attribute_values.id`.<fk table='product_type_attribute_values' column='id'/>
     */
    product_type_attribute_value_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_transfers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_transfers
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: date */
    date_of_transfer?: string;
    /** Format: text */
    job_title?: string;
    /** Format: text */
    entity?: string;
  };
  user_roles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: text */
    group_name?: string;
    /** Format: text */
    role?: string;
    /** Format: character varying */
    email?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `groups.id`.<fk table='groups' column='id'/>
     */
    group_id?: string;
    /** Format: uuid */
    user_id?: string;
  };
  system_insurance_plans: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_plans.id`.<fk table='insurance_plans' column='id'/>
     */
    insurance_plan_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_trainer_registrations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_trainer_registrations
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `trainings.id`.<fk table='trainings' column='id'/>
     */
    training_id?: string;
    /** Format: text */
    qualifications?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    entity_id?: string;
  };
  advances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: numeric */
    amount?: number;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `request_advances.id`.<fk table='request_advances' column='id'/>
     */
    advance_request_id?: string;
    /** Format: numeric */
    installments?: number;
    /** Format: date */
    date_of_payment?: string;
    /** Format: date */
    date_of_receipt?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    advance_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `bank_accounts.id`.<fk table='bank_accounts' column='id'/>
     */
    bank_account_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  complaint_financial: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default complaint_financial
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: numeric */
    amount?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    financial_complaint_type_id?: string;
  };
  request_benefits: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_benefits
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
  };
  request_delegations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_delegations
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reason?: string;
    /** Format: date */
    from?: string;
    /** Format: date */
    to?: string;
  };
  request_external_delegations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_external_delegations
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reason?: string;
    /** Format: date */
    from?: string;
    /** Format: date */
    to?: string;
    /** Format: text */
    destination?: string;
  };
  base_call_for_action: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default base_call_for_action
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  entity_types: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: jsonb */
    name: unknown;
    /**
     * Format: text
     * @default entities
     */
    category: string;
    /**
     * Format: public.entity_level
     * @enum {string}
     */
    level: "administration" | "company" | "branch";
    /** Format: text */
    slug?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_resignations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_resignations
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reason?: string;
    /** Format: date */
    date_of_effective_resignation?: string;
  };
  payroll_deductions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    payroll_deduction_type_id?: string;
    /** Format: text */
    amount?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  surveys: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: jsonb */
    survey_schema: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  shipping_companies: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name?: string;
  };
  join_department_employees: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `departments.id`.<fk table='departments' column='id'/>
     */
    department_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  join_relative_health_conditions: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `relatives.id`.<fk table='relatives' column='id'/>
     */
    relative_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `health_conditions.id`.<fk table='health_conditions' column='id'/>
     */
    condition_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  base_proposals: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default base_proposals
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_vacations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_vacations
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: date */
    from: string;
    /** Format: date */
    to: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    vacation_type_id: string;
  };
  group_invites: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `groups.id`.<fk table='groups' column='id'/>
     */
    group_id: string;
    /** Format: text[] */
    roles: string[];
    /** Format: uuid */
    invited_by: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: uuid */
    user_id?: string;
    /** Format: timestamp with time zone */
    accepted_at?: string;
  };
  request_work_hours_changes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_work_hours_changes
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `work_hours.id`.<fk table='work_hours' column='id'/>
     */
    new_work_hours_id?: string;
  };
  product_type_attributes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `product_types.id`.<fk table='product_types' column='id'/>
     */
    product_type_id: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  policies: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: numeric */
    sick_vacation?: number;
    /** Format: numeric */
    annual_vacation?: number;
    /** Format: numeric */
    parental_vacation?: number;
    /** Format: numeric */
    maternal_vacation?: number;
    /** Format: numeric */
    death_vacation?: number;
    /** Format: numeric */
    marriage_vacation?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `work_hours.id`.<fk table='work_hours' column='id'/>
     */
    work_hours_id?: string;
    /** Format: text */
    work_days?: string;
    /** Format: text */
    transportation?: string;
    /** Format: text */
    nda?: string;
    /** Format: text */
    benefits?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_payroll_deductions_cancels: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_payroll_deductions_cancels
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reason?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `deductions.id`.<fk table='deductions' column='id'/>
     */
    deduction_id: string;
  };
  res_countries: {
    /** Format: text */
    name: string;
    /** Format: text */
    iso2: string;
    /** Format: text */
    iso3: string;
    /** Format: text */
    local_name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: text */
    nationality?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_currencies.id`.<fk table='res_currencies' column='id'/>
     */
    currency_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_installments: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_installments
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: numeric */
    amount?: number;
    /** Format: date */
    from?: string;
    /** Format: date */
    to?: string;
    /** Format: numeric */
    installment?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    installment_type_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `bank_accounts.id`.<fk table='bank_accounts' column='id'/>
     */
    bank_account_id?: string;
  };
  request_insurance_raises: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_insurance_raises
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_plans.id`.<fk table='insurance_plans' column='id'/>
     */
    new_plan_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_plans.id`.<fk table='insurance_plans' column='id'/>
     */
    old_plan_id: string;
  };
  healthcare_service_providers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /** Format: jsonb */
    gps?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /**
     * Format: public.healthcare_service_types
     * @enum {string}
     */
    service_type?: "inpatient" | "outpatient" | "emergency";
    /**
     * Format: public.healthcare_provider_types
     * @enum {string}
     */
    service_provider_type?:
      | "hospital"
      | "pharmacy"
      | "clinic"
      | "laboratory"
      | "physical_therapy_center"
      | "radiology_center"
      | "dental_clinic"
      | "optical_center"
      | "specialized_medical_center"
      | "clinics_complex"
      | "medical_association";
  };
  request_insurance_financial_returns: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_insurance_financial_returns
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: date */
    date_of_service?: string;
    /** Format: numeric */
    amount?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `bank_accounts.id`.<fk table='bank_accounts' column='id'/>
     */
    bank_account_id?: string;
  };
  expenses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    title: string;
    /** Format: numeric */
    amount: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `request_expenses.id`.<fk table='request_expenses' column='id'/>
     */
    request_expense_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    expense_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  status_histories: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    old_status: string;
    /** Format: text */
    new_status: string;
    /** Format: uuid */
    request_uuid: string;
    /** Format: text */
    message?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: text */
    request_type: string;
  };
  request_advances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_advances
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: date */
    date_of_payment?: string;
    /** Format: numeric */
    installments?: number;
    /** Format: numeric */
    amount?: number;
    /** Format: date */
    date_of_receipt?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    advance_type_id: string;
    /** Format: numeric */
    number_of_installments?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `bank_accounts.id`.<fk table='bank_accounts' column='id'/>
     */
    bank_account_id?: string;
  };
  join_ship_line_ports: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `ship_lines.id`.<fk table='ship_lines' column='id'/>
     */
    ship_line_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `ports.id`.<fk table='ports' column='id'/>
     */
    port_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  addresses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_cities.id`.<fk table='res_cities' column='id'/>
     */
    city_id?: string;
    /** Format: text */
    street?: string;
    /** Format: text */
    building?: string;
    /** Format: text */
    landmark?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id?: string;
    /** Format: jsonb */
    gps?: unknown;
  };
  job_titles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /** Format: jsonb */
    name: unknown;
  };
  request_training_additions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_training_additions
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: text */
    reason?: string;
    /** Format: date */
    from?: string;
    /** Format: date */
    to?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    training_type_id: string;
    /** Format: text */
    training_location?: string;
  };
  employee_reports: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: jsonb */
    answers: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /** Format: date */
    quarter?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  relatives: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: date */
    date_of_birth?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: text
     * @default relatives
     */
    type?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: public.genders
     * @enum {string}
     */
    gender?: "male" | "female";
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    relation_types_id?: string;
  };
  roles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: jsonb */
    permissions: unknown;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: integer
     * @default 0
     */
    level: number;
  };
  request_training_bonuses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_training_bonuses
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `trainings.id`.<fk table='trainings' column='id'/>
     */
    training_id?: string;
  };
  join_employee_health_conditions: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `health_conditions.id`.<fk table='health_conditions' column='id'/>
     */
    condition_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  visas: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: date */
    from?: string;
    /** Format: date */
    to: string;
    /** Format: text */
    id_number?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    visa_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    country_of_issue_id?: string;
  };
  work_hours: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: timestamp with time zone */
    from: string;
    /** Format: timestamp with time zone */
    to: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  product_categories: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  passports: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: date */
    date_of_expiry?: string;
    /** Format: date */
    date_of_issue?: string;
    /** Format: text */
    job_title?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    place_of_issue_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  identification_cards: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    id_number?: string;
    /** Format: date */
    date_of_issue?: string;
    /** Format: text */
    job_title?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    front_image_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    back_image_id?: string;
    /** Format: date */
    date_of_expiry?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    place_of_issue_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  contact_information: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    employee_name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     */
    owner_id?: string;
  };
  bank_accounts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    iban: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `banks.id`.<fk table='banks' column='id'/>
     */
    bank_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  compensations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  insurance_offers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `insurance_companies.id`.<fk table='insurance_companies' column='id'/>
     */
    insurance_company_id?: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  kids: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    name: string;
    /** Format: date */
    date_of_birth?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: text
     * @default kids
     */
    type?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: public.genders
     * @enum {string}
     */
    gender: "male" | "female";
  };
  join_shipping_company_countries: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `shipping_companies.id`.<fk table='shipping_companies' column='id'/>
     */
    shipping_company_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `res_countries.id`.<fk table='res_countries' column='id'/>
     */
    res_country_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  request_settlements: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_settlements
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /** Format: numeric */
    amount?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    settlement_type_id?: string;
    /** Format: date */
    date_of_settlement?: string;
  };
  request_punctuality_changes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default request_punctuality_changes
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `advances.id`.<fk table='advances' column='id'/>
     */
    advances_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    punctuality_type_id?: string;
    /** Format: date */
    date_of_old_punctuality?: string;
    /** Format: date */
    date_of_new_punctuality?: string;
  };
  join_request_documents: {
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `base_requests.id`.<fk table='base_requests' column='id'/>
     */
    request_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `images.id`.<fk table='images' column='id'/>
     */
    image_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  vacations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: date */
    from: string;
    /** Format: date */
    to: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    employee_id: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `request_vacations.id`.<fk table='request_vacations' column='id'/>
     */
    request_vacation_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `types.id`.<fk table='types' column='id'/>
     */
    vacation_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
  };
  base_requests: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     * @default public.created_by()
     */
    created_by: string;
    /** Format: text */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `entities.id`.<fk table='entities' column='id'/>
     * @default public.get_owner()
     */
    owner_id: string;
    /** Format: text */
    title: string;
    /**
     * Format: text
     * @default base_requests
     */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `employees.id`.<fk table='employees' column='id'/>
     */
    updated_by?: string;
    /**
     * Format: text
     * @default draft
     */
    status: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description images */
  "body.images": definitions["images"];
  /** Format: uuid */
  "rowFilter.images.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.images.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.images.updated_at": string;
  /** Format: uuid */
  "rowFilter.images.created_by": string;
  /** Format: text */
  "rowFilter.images.description": string;
  /** Format: uuid */
  "rowFilter.images.owner_id": string;
  /** Format: uuid */
  "rowFilter.images.updated_by": string;
  /** @description types */
  "body.types": definitions["types"];
  /** Format: uuid */
  "rowFilter.types.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.types.created_at": string;
  /** Format: uuid */
  "rowFilter.types.created_by": string;
  /** Format: uuid */
  "rowFilter.types.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.types.updated_at": string;
  /** Format: jsonb */
  "rowFilter.types.name": string;
  /** Format: text */
  "rowFilter.types.category": string;
  /** Format: uuid */
  "rowFilter.types.updated_by": string;
  /** @description join_expense_documents */
  "body.join_expense_documents": definitions["join_expense_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_expense_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_expense_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_expense_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_expense_documents.expense_id": string;
  /** Format: uuid */
  "rowFilter.join_expense_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_expense_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_expense_documents.updated_by": string;
  /** @description insurance_plan_additions */
  "body.insurance_plan_additions": definitions["insurance_plan_additions"];
  /** Format: uuid */
  "rowFilter.insurance_plan_additions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_plan_additions.created_at": string;
  /** Format: uuid */
  "rowFilter.insurance_plan_additions.created_by": string;
  /** Format: uuid */
  "rowFilter.insurance_plan_additions.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_plan_additions.updated_at": string;
  /** Format: text */
  "rowFilter.insurance_plan_additions.name": string;
  /** Format: text */
  "rowFilter.insurance_plan_additions.description": string;
  /** Format: uuid */
  "rowFilter.insurance_plan_additions.updated_by": string;
  /** @description join_certification_documents */
  "body.join_certification_documents": definitions["join_certification_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_certification_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_certification_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_certification_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_certification_documents.certification_id": string;
  /** Format: uuid */
  "rowFilter.join_certification_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_certification_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_certification_documents.updated_by": string;
  /** @description request_insurance_additions */
  "body.request_insurance_additions": definitions["request_insurance_additions"];
  /** Format: uuid */
  "rowFilter.request_insurance_additions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_additions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_additions.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_insurance_additions.created_by": string;
  /** Format: text */
  "rowFilter.request_insurance_additions.notes": string;
  /** Format: uuid */
  "rowFilter.request_insurance_additions.owner_id": string;
  /** Format: text */
  "rowFilter.request_insurance_additions.title": string;
  /** Format: text */
  "rowFilter.request_insurance_additions.type": string;
  /** Format: uuid */
  "rowFilter.request_insurance_additions.updated_by": string;
  /** Format: text */
  "rowFilter.request_insurance_additions.status": string;
  /** Format: uuid */
  "rowFilter.request_insurance_additions.insurance_plan_addition_id": string;
  /** @description request_commissions */
  "body.request_commissions": definitions["request_commissions"];
  /** Format: uuid */
  "rowFilter.request_commissions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_commissions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_commissions.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_commissions.created_by": string;
  /** Format: text */
  "rowFilter.request_commissions.notes": string;
  /** Format: uuid */
  "rowFilter.request_commissions.owner_id": string;
  /** Format: text */
  "rowFilter.request_commissions.title": string;
  /** Format: text */
  "rowFilter.request_commissions.type": string;
  /** Format: uuid */
  "rowFilter.request_commissions.updated_by": string;
  /** Format: text */
  "rowFilter.request_commissions.status": string;
  /** Format: numeric */
  "rowFilter.request_commissions.suggested_amount": string;
  /** Format: text */
  "rowFilter.request_commissions.reason": string;
  /** Format: uuid */
  "rowFilter.request_commissions.commission_type_id": string;
  /** @description request_hirings */
  "body.request_hirings": definitions["request_hirings"];
  /** Format: uuid */
  "rowFilter.request_hirings.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_hirings.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_hirings.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_hirings.created_by": string;
  /** Format: text */
  "rowFilter.request_hirings.notes": string;
  /** Format: uuid */
  "rowFilter.request_hirings.owner_id": string;
  /** Format: text */
  "rowFilter.request_hirings.title": string;
  /** Format: text */
  "rowFilter.request_hirings.type": string;
  /** Format: uuid */
  "rowFilter.request_hirings.updated_by": string;
  /** Format: text */
  "rowFilter.request_hirings.status": string;
  /** Format: text */
  "rowFilter.request_hirings.candidate_name": string;
  /** Format: uuid */
  "rowFilter.request_hirings.job_title_id": string;
  /** Format: uuid */
  "rowFilter.request_hirings.document_id": string;
  /** @description medications */
  "body.medications": definitions["medications"];
  /** Format: uuid */
  "rowFilter.medications.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.medications.created_at": string;
  /** Format: uuid */
  "rowFilter.medications.created_by": string;
  /** Format: uuid */
  "rowFilter.medications.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.medications.updated_at": string;
  /** Format: text */
  "rowFilter.medications.name": string;
  /** Format: boolean */
  "rowFilter.medications.recurrent": string;
  /** Format: numeric */
  "rowFilter.medications.weeks": string;
  /** Format: numeric */
  "rowFilter.medications.dose": string;
  /** Format: uuid */
  "rowFilter.medications.updated_by": string;
  /** @description join_health_condition_documents */
  "body.join_health_condition_documents": definitions["join_health_condition_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_health_condition_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_health_condition_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_documents.condition_id": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_documents.updated_by": string;
  /** @description groups */
  "body.groups": definitions["groups"];
  /** Format: uuid */
  "rowFilter.groups.id": string;
  /** Format: text */
  "rowFilter.groups.name": string;
  /** Format: timestamp with time zone */
  "rowFilter.groups.created_at": string;
  /** @description new_database_structure */
  "body.new_database_structure": definitions["new_database_structure"];
  /** Format: name */
  "rowFilter.new_database_structure.table_name": string;
  /** Format: jsonb */
  "rowFilter.new_database_structure.columns": string;
  /** @description trainings */
  "body.trainings": definitions["trainings"];
  /** Format: uuid */
  "rowFilter.trainings.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.trainings.created_at": string;
  /** Format: uuid */
  "rowFilter.trainings.created_by": string;
  /** Format: uuid */
  "rowFilter.trainings.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.trainings.updated_at": string;
  /** Format: jsonb */
  "rowFilter.trainings.name": string;
  /** Format: jsonb */
  "rowFilter.trainings.description": string;
  /** Format: date */
  "rowFilter.trainings.from": string;
  /** Format: date */
  "rowFilter.trainings.to": string;
  /** Format: uuid */
  "rowFilter.trainings.training_type_id": string;
  /** Format: uuid */
  "rowFilter.trainings.training_type_type_id": string;
  /** Format: uuid */
  "rowFilter.trainings.updated_by": string;
  /** @description proposals */
  "body.proposals": definitions["proposals"];
  /** Format: uuid */
  "rowFilter.proposals.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.proposals.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.proposals.updated_at": string;
  /** Format: uuid */
  "rowFilter.proposals.created_by": string;
  /** Format: text */
  "rowFilter.proposals.notes": string;
  /** Format: uuid */
  "rowFilter.proposals.owner_id": string;
  /** Format: text */
  "rowFilter.proposals.title": string;
  /** Format: text */
  "rowFilter.proposals.type": string;
  /** Format: uuid */
  "rowFilter.proposals.updated_by": string;
  /** Format: text */
  "rowFilter.proposals.description": string;
  /** @description request_promotions */
  "body.request_promotions": definitions["request_promotions"];
  /** Format: uuid */
  "rowFilter.request_promotions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_promotions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_promotions.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_promotions.created_by": string;
  /** Format: text */
  "rowFilter.request_promotions.notes": string;
  /** Format: uuid */
  "rowFilter.request_promotions.owner_id": string;
  /** Format: text */
  "rowFilter.request_promotions.title": string;
  /** Format: text */
  "rowFilter.request_promotions.type": string;
  /** Format: uuid */
  "rowFilter.request_promotions.updated_by": string;
  /** Format: text */
  "rowFilter.request_promotions.status": string;
  /** Format: uuid */
  "rowFilter.request_promotions.new_job_title_id": string;
  /** @description commissions */
  "body.commissions": definitions["commissions"];
  /** Format: uuid */
  "rowFilter.commissions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.commissions.created_at": string;
  /** Format: uuid */
  "rowFilter.commissions.created_by": string;
  /** Format: uuid */
  "rowFilter.commissions.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.commissions.updated_at": string;
  /** Format: numeric */
  "rowFilter.commissions.amount": string;
  /** Format: text */
  "rowFilter.commissions.reason": string;
  /** Format: uuid */
  "rowFilter.commissions.employee_id": string;
  /** Format: text */
  "rowFilter.commissions.note": string;
  /** Format: uuid */
  "rowFilter.commissions.commission_request_id": string;
  /** Format: uuid */
  "rowFilter.commissions.commission_type_id": string;
  /** Format: uuid */
  "rowFilter.commissions.updated_by": string;
  /** @description product_tags */
  "body.product_tags": definitions["product_tags"];
  /** Format: uuid */
  "rowFilter.product_tags.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_tags.created_at": string;
  /** Format: uuid */
  "rowFilter.product_tags.created_by": string;
  /** Format: uuid */
  "rowFilter.product_tags.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_tags.updated_at": string;
  /** Format: text */
  "rowFilter.product_tags.name": string;
  /** Format: uuid */
  "rowFilter.product_tags.updated_by": string;
  /** @description join_marriage_kids */
  "body.join_marriage_kids": definitions["join_marriage_kids"];
  /** Format: timestamp with time zone */
  "rowFilter.join_marriage_kids.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_marriage_kids.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_marriage_kids.created_by": string;
  /** Format: uuid */
  "rowFilter.join_marriage_kids.marriage_id": string;
  /** Format: uuid */
  "rowFilter.join_marriage_kids.kid_id": string;
  /** Format: uuid */
  "rowFilter.join_marriage_kids.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_marriage_kids.updated_by": string;
  /** @description request_permissions */
  "body.request_permissions": definitions["request_permissions"];
  /** Format: uuid */
  "rowFilter.request_permissions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_permissions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_permissions.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_permissions.created_by": string;
  /** Format: text */
  "rowFilter.request_permissions.notes": string;
  /** Format: uuid */
  "rowFilter.request_permissions.owner_id": string;
  /** Format: text */
  "rowFilter.request_permissions.title": string;
  /** Format: text */
  "rowFilter.request_permissions.type": string;
  /** Format: uuid */
  "rowFilter.request_permissions.updated_by": string;
  /** Format: text */
  "rowFilter.request_permissions.status": string;
  /** Format: date */
  "rowFilter.request_permissions.date_of_permission": string;
  /** Format: uuid */
  "rowFilter.request_permissions.permission_type_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_permissions.from": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_permissions.to": string;
  /** @description brokers */
  "body.brokers": definitions["brokers"];
  /** Format: uuid */
  "rowFilter.brokers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.brokers.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.brokers.updated_at": string;
  /** Format: text */
  "rowFilter.brokers.employee_name": string;
  /** Format: text */
  "rowFilter.brokers.phone": string;
  /** Format: text */
  "rowFilter.brokers.email": string;
  /** Format: text */
  "rowFilter.brokers.website": string;
  /** Format: uuid */
  "rowFilter.brokers.updated_by": string;
  /** Format: uuid */
  "rowFilter.brokers.owner_id": string;
  /** Format: uuid */
  "rowFilter.brokers.country_id": string;
  /** Format: uuid */
  "rowFilter.brokers.city_id": string;
  /** Format: text */
  "rowFilter.brokers.street": string;
  /** Format: text */
  "rowFilter.brokers.building": string;
  /** Format: text */
  "rowFilter.brokers.landmark": string;
  /** Format: jsonb */
  "rowFilter.brokers.gps": string;
  /** Format: uuid */
  "rowFilter.brokers.created_by": string;
  /** Format: text */
  "rowFilter.brokers.name": string;
  /** Format: text */
  "rowFilter.brokers.terms_and_conditions": string;
  /** @description certifications */
  "body.certifications": definitions["certifications"];
  /** Format: uuid */
  "rowFilter.certifications.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.certifications.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.certifications.updated_at": string;
  /** Format: uuid */
  "rowFilter.certifications.created_by": string;
  /** Format: text */
  "rowFilter.certifications.name": string;
  /** Format: text */
  "rowFilter.certifications.specialization": string;
  /** Format: text */
  "rowFilter.certifications.level": string;
  /** Format: date */
  "rowFilter.certifications.date_of_issue": string;
  /** Format: date */
  "rowFilter.certifications.date_of_expiry": string;
  /** Format: uuid */
  "rowFilter.certifications.employee_id": string;
  /** Format: uuid */
  "rowFilter.certifications.owner_id": string;
  /** Format: text */
  "rowFilter.certifications.issuing_organization": string;
  /** Format: text */
  "rowFilter.certifications.credential_url": string;
  /** Format: text */
  "rowFilter.certifications.credential_number": string;
  /** Format: uuid */
  "rowFilter.certifications.updated_by": string;
  /** @description product_types */
  "body.product_types": definitions["product_types"];
  /** Format: uuid */
  "rowFilter.product_types.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_types.created_at": string;
  /** Format: uuid */
  "rowFilter.product_types.created_by": string;
  /** Format: uuid */
  "rowFilter.product_types.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_types.updated_at": string;
  /** Format: text */
  "rowFilter.product_types.description": string;
  /** Format: text */
  "rowFilter.product_types.name": string;
  /** Format: uuid */
  "rowFilter.product_types.updated_by": string;
  /** @description insurance_plans */
  "body.insurance_plans": definitions["insurance_plans"];
  /** Format: uuid */
  "rowFilter.insurance_plans.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_plans.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_plans.updated_at": string;
  /** Format: uuid */
  "rowFilter.insurance_plans.created_by": string;
  /** Format: text */
  "rowFilter.insurance_plans.name": string;
  /** Format: uuid */
  "rowFilter.insurance_plans.owner_id": string;
  /** Format: uuid */
  "rowFilter.insurance_plans.offer_plan_id": string;
  /** Format: uuid */
  "rowFilter.insurance_plans.system_insurance_plan_id": string;
  /** Format: uuid */
  "rowFilter.insurance_plans.updated_by": string;
  /** @description survey_answers */
  "body.survey_answers": definitions["survey_answers"];
  /** Format: uuid */
  "rowFilter.survey_answers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.survey_answers.created_at": string;
  /** Format: uuid */
  "rowFilter.survey_answers.created_by": string;
  /** Format: uuid */
  "rowFilter.survey_answers.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.survey_answers.updated_at": string;
  /** Format: uuid */
  "rowFilter.survey_answers.responder_id": string;
  /** Format: uuid */
  "rowFilter.survey_answers.survey_id": string;
  /** Format: jsonb */
  "rowFilter.survey_answers.answers": string;
  /** Format: text */
  "rowFilter.survey_answers.status": string;
  /** Format: uuid */
  "rowFilter.survey_answers.updated_by": string;
  /** @description driver_licenses */
  "body.driver_licenses": definitions["driver_licenses"];
  /** Format: uuid */
  "rowFilter.driver_licenses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.driver_licenses.created_at": string;
  /** Format: uuid */
  "rowFilter.driver_licenses.created_by": string;
  /** Format: uuid */
  "rowFilter.driver_licenses.owner_id": string;
  /** Format: date */
  "rowFilter.driver_licenses.date_of_expiry": string;
  /** Format: date */
  "rowFilter.driver_licenses.date_of_issue": string;
  /** Format: text */
  "rowFilter.driver_licenses.license_number": string;
  /** Format: text */
  "rowFilter.driver_licenses.type": string;
  /** Format: uuid */
  "rowFilter.driver_licenses.employee_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.driver_licenses.updated_at": string;
  /** Format: uuid */
  "rowFilter.driver_licenses.blood_type_id": string;
  /** Format: uuid */
  "rowFilter.driver_licenses.updated_by": string;
  /** @description proposal_urgents */
  "body.proposal_urgents": definitions["proposal_urgents"];
  /** Format: uuid */
  "rowFilter.proposal_urgents.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.proposal_urgents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.proposal_urgents.updated_at": string;
  /** Format: uuid */
  "rowFilter.proposal_urgents.created_by": string;
  /** Format: text */
  "rowFilter.proposal_urgents.notes": string;
  /** Format: uuid */
  "rowFilter.proposal_urgents.owner_id": string;
  /** Format: text */
  "rowFilter.proposal_urgents.title": string;
  /** Format: text */
  "rowFilter.proposal_urgents.type": string;
  /** Format: uuid */
  "rowFilter.proposal_urgents.updated_by": string;
  /** Format: date */
  "rowFilter.proposal_urgents.date_of_urgent": string;
  /** Format: text */
  "rowFilter.proposal_urgents.description": string;
  /** @description join_employee_nationalities */
  "body.join_employee_nationalities": definitions["join_employee_nationalities"];
  /** Format: timestamp with time zone */
  "rowFilter.join_employee_nationalities.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_employee_nationalities.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_employee_nationalities.created_by": string;
  /** Format: uuid */
  "rowFilter.join_employee_nationalities.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_nationalities.nationality_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_nationalities.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_nationalities.updated_by": string;
  /** @description request_expenses */
  "body.request_expenses": definitions["request_expenses"];
  /** Format: uuid */
  "rowFilter.request_expenses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_expenses.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_expenses.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_expenses.created_by": string;
  /** Format: text */
  "rowFilter.request_expenses.notes": string;
  /** Format: uuid */
  "rowFilter.request_expenses.owner_id": string;
  /** Format: text */
  "rowFilter.request_expenses.title": string;
  /** Format: text */
  "rowFilter.request_expenses.type": string;
  /** Format: uuid */
  "rowFilter.request_expenses.updated_by": string;
  /** Format: text */
  "rowFilter.request_expenses.status": string;
  /** Format: numeric */
  "rowFilter.request_expenses.amount": string;
  /** Format: uuid */
  "rowFilter.request_expenses.expense_type_id": string;
  /** @description base_complaints */
  "body.base_complaints": definitions["base_complaints"];
  /** Format: uuid */
  "rowFilter.base_complaints.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_complaints.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_complaints.updated_at": string;
  /** Format: uuid */
  "rowFilter.base_complaints.created_by": string;
  /** Format: text */
  "rowFilter.base_complaints.notes": string;
  /** Format: uuid */
  "rowFilter.base_complaints.owner_id": string;
  /** Format: text */
  "rowFilter.base_complaints.title": string;
  /** Format: text */
  "rowFilter.base_complaints.type": string;
  /** Format: uuid */
  "rowFilter.base_complaints.updated_by": string;
  /** @description join_training_trainees */
  "body.join_training_trainees": definitions["join_training_trainees"];
  /** Format: timestamp with time zone */
  "rowFilter.join_training_trainees.created_at": string;
  /** Format: uuid */
  "rowFilter.join_training_trainees.created_by": string;
  /** Format: uuid */
  "rowFilter.join_training_trainees.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_training_trainees.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_training_trainees.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_training_trainees.training_id": string;
  /** Format: uuid */
  "rowFilter.join_training_trainees.updated_by": string;
  /** @description join_product_documents */
  "body.join_product_documents": definitions["join_product_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_product_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_product_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_product_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_product_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_product_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_product_documents.product_id": string;
  /** Format: uuid */
  "rowFilter.join_product_documents.updated_by": string;
  /** @description residencies */
  "body.residencies": definitions["residencies"];
  /** Format: uuid */
  "rowFilter.residencies.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.residencies.created_at": string;
  /** Format: uuid */
  "rowFilter.residencies.created_by": string;
  /** Format: uuid */
  "rowFilter.residencies.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.residencies.updated_at": string;
  /** Format: date */
  "rowFilter.residencies.from": string;
  /** Format: date */
  "rowFilter.residencies.to": string;
  /** Format: uuid */
  "rowFilter.residencies.employee_id": string;
  /** Format: uuid */
  "rowFilter.residencies.updated_by": string;
  /** Format: uuid */
  "rowFilter.residencies.issuer_id": string;
  /** @description group_users */
  "body.group_users": definitions["group_users"];
  /** Format: uuid */
  "rowFilter.group_users.id": string;
  /** Format: uuid */
  "rowFilter.group_users.group_id": string;
  /** Format: uuid */
  "rowFilter.group_users.user_id": string;
  /** Format: text */
  "rowFilter.group_users.role": string;
  /** Format: timestamp with time zone */
  "rowFilter.group_users.created_at": string;
  /** @description requests */
  "body.requests": definitions["requests"];
  /** Format: uuid */
  "rowFilter.requests.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.requests.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.requests.updated_at": string;
  /** Format: uuid */
  "rowFilter.requests.created_by": string;
  /** Format: text */
  "rowFilter.requests.notes": string;
  /** Format: uuid */
  "rowFilter.requests.owner_id": string;
  /** Format: text */
  "rowFilter.requests.title": string;
  /** Format: text */
  "rowFilter.requests.type": string;
  /** Format: uuid */
  "rowFilter.requests.updated_by": string;
  /** Format: text */
  "rowFilter.requests.status": string;
  /** Format: text */
  "rowFilter.requests.description": string;
  /** @description ports */
  "body.ports": definitions["ports"];
  /** Format: uuid */
  "rowFilter.ports.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ports.created_at": string;
  /** Format: uuid */
  "rowFilter.ports.created_by": string;
  /** Format: uuid */
  "rowFilter.ports.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ports.updated_at": string;
  /** Format: text */
  "rowFilter.ports.name": string;
  /** Format: uuid */
  "rowFilter.ports.country_id": string;
  /** Format: uuid */
  "rowFilter.ports.city_id": string;
  /** Format: uuid */
  "rowFilter.ports.updated_by": string;
  /** @description product_brands */
  "body.product_brands": definitions["product_brands"];
  /** Format: uuid */
  "rowFilter.product_brands.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_brands.created_at": string;
  /** Format: uuid */
  "rowFilter.product_brands.created_by": string;
  /** Format: uuid */
  "rowFilter.product_brands.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_brands.updated_at": string;
  /** Format: text */
  "rowFilter.product_brands.name": string;
  /** Format: uuid */
  "rowFilter.product_brands.updated_by": string;
  /** @description recruitment_agencies */
  "body.recruitment_agencies": definitions["recruitment_agencies"];
  /** Format: uuid */
  "rowFilter.recruitment_agencies.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.recruitment_agencies.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.recruitment_agencies.updated_at": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.employee_name": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.phone": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.email": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.website": string;
  /** Format: uuid */
  "rowFilter.recruitment_agencies.updated_by": string;
  /** Format: uuid */
  "rowFilter.recruitment_agencies.owner_id": string;
  /** Format: uuid */
  "rowFilter.recruitment_agencies.country_id": string;
  /** Format: uuid */
  "rowFilter.recruitment_agencies.city_id": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.street": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.building": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.landmark": string;
  /** Format: jsonb */
  "rowFilter.recruitment_agencies.gps": string;
  /** Format: uuid */
  "rowFilter.recruitment_agencies.created_by": string;
  /** Format: text */
  "rowFilter.recruitment_agencies.name": string;
  /** @description request_sponsorship_transfers */
  "body.request_sponsorship_transfers": definitions["request_sponsorship_transfers"];
  /** Format: uuid */
  "rowFilter.request_sponsorship_transfers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_sponsorship_transfers.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_sponsorship_transfers.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_sponsorship_transfers.created_by": string;
  /** Format: text */
  "rowFilter.request_sponsorship_transfers.notes": string;
  /** Format: uuid */
  "rowFilter.request_sponsorship_transfers.owner_id": string;
  /** Format: text */
  "rowFilter.request_sponsorship_transfers.title": string;
  /** Format: text */
  "rowFilter.request_sponsorship_transfers.type": string;
  /** Format: uuid */
  "rowFilter.request_sponsorship_transfers.updated_by": string;
  /** Format: text */
  "rowFilter.request_sponsorship_transfers.status": string;
  /** Format: text */
  "rowFilter.request_sponsorship_transfers.reason": string;
  /** Format: uuid */
  "rowFilter.request_sponsorship_transfers.sponsor_id": string;
  /** @description join_insurance_company_feedback */
  "body.join_insurance_company_feedback": definitions["join_insurance_company_feedback"];
  /** Format: timestamp with time zone */
  "rowFilter.join_insurance_company_feedback.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_insurance_company_feedback.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_feedback.created_by": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_feedback.insurance_company_id": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_feedback.feedback_id": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_feedback.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_feedback.updated_by": string;
  /** @description work_locations */
  "body.work_locations": definitions["work_locations"];
  /** Format: uuid */
  "rowFilter.work_locations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.work_locations.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.work_locations.updated_at": string;
  /** Format: text */
  "rowFilter.work_locations.employee_name": string;
  /** Format: text */
  "rowFilter.work_locations.phone": string;
  /** Format: text */
  "rowFilter.work_locations.email": string;
  /** Format: text */
  "rowFilter.work_locations.website": string;
  /** Format: uuid */
  "rowFilter.work_locations.updated_by": string;
  /** Format: uuid */
  "rowFilter.work_locations.owner_id": string;
  /** Format: uuid */
  "rowFilter.work_locations.country_id": string;
  /** Format: uuid */
  "rowFilter.work_locations.city_id": string;
  /** Format: text */
  "rowFilter.work_locations.street": string;
  /** Format: text */
  "rowFilter.work_locations.building": string;
  /** Format: text */
  "rowFilter.work_locations.landmark": string;
  /** Format: jsonb */
  "rowFilter.work_locations.gps": string;
  /** Format: uuid */
  "rowFilter.work_locations.created_by": string;
  /** Format: text */
  "rowFilter.work_locations.name": string;
  /** Format: uuid */
  "rowFilter.work_locations.entity_id": string;
  /** Format: uuid */
  "rowFilter.work_locations.activity_types_id": string;
  /** @description beneficiaries */
  "body.beneficiaries": definitions["beneficiaries"];
  /** Format: uuid */
  "rowFilter.beneficiaries.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.beneficiaries.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.beneficiaries.updated_at": string;
  /** Format: uuid */
  "rowFilter.beneficiaries.created_by": string;
  /** Format: text */
  "rowFilter.beneficiaries.name": string;
  /** Format: date */
  "rowFilter.beneficiaries.date_of_birth": string;
  /** Format: uuid */
  "rowFilter.beneficiaries.owner_id": string;
  /** Format: text */
  "rowFilter.beneficiaries.type": string;
  /** Format: uuid */
  "rowFilter.beneficiaries.updated_by": string;
  /** @description complaints */
  "body.complaints": definitions["complaints"];
  /** Format: uuid */
  "rowFilter.complaints.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.complaints.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.complaints.updated_at": string;
  /** Format: uuid */
  "rowFilter.complaints.created_by": string;
  /** Format: text */
  "rowFilter.complaints.notes": string;
  /** Format: uuid */
  "rowFilter.complaints.owner_id": string;
  /** Format: text */
  "rowFilter.complaints.title": string;
  /** Format: text */
  "rowFilter.complaints.type": string;
  /** Format: uuid */
  "rowFilter.complaints.updated_by": string;
  /** Format: text */
  "rowFilter.complaints.description": string;
  /** @description join_employee_documents */
  "body.join_employee_documents": definitions["join_employee_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_employee_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_employee_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_employee_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_employee_documents.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_documents.updated_by": string;
  /** @description product_type_attribute_values */
  "body.product_type_attribute_values": definitions["product_type_attribute_values"];
  /** Format: uuid */
  "rowFilter.product_type_attribute_values.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_type_attribute_values.created_at": string;
  /** Format: uuid */
  "rowFilter.product_type_attribute_values.created_by": string;
  /** Format: uuid */
  "rowFilter.product_type_attribute_values.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_type_attribute_values.updated_at": string;
  /** Format: text */
  "rowFilter.product_type_attribute_values.description": string;
  /** Format: uuid */
  "rowFilter.product_type_attribute_values.product_type_attribute_id": string;
  /** Format: text */
  "rowFilter.product_type_attribute_values.name": string;
  /** Format: uuid */
  "rowFilter.product_type_attribute_values.updated_by": string;
  /** @description factories */
  "body.factories": definitions["factories"];
  /** Format: uuid */
  "rowFilter.factories.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.factories.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.factories.updated_at": string;
  /** Format: text */
  "rowFilter.factories.employee_name": string;
  /** Format: text */
  "rowFilter.factories.phone": string;
  /** Format: text */
  "rowFilter.factories.email": string;
  /** Format: text */
  "rowFilter.factories.website": string;
  /** Format: uuid */
  "rowFilter.factories.updated_by": string;
  /** Format: uuid */
  "rowFilter.factories.owner_id": string;
  /** Format: uuid */
  "rowFilter.factories.country_id": string;
  /** Format: uuid */
  "rowFilter.factories.city_id": string;
  /** Format: text */
  "rowFilter.factories.street": string;
  /** Format: text */
  "rowFilter.factories.building": string;
  /** Format: text */
  "rowFilter.factories.landmark": string;
  /** Format: jsonb */
  "rowFilter.factories.gps": string;
  /** Format: uuid */
  "rowFilter.factories.created_by": string;
  /** Format: text */
  "rowFilter.factories.name": string;
  /** Format: numeric */
  "rowFilter.factories.production_capacity": string;
  /** Format: text */
  "rowFilter.factories.quality_control_and_testing": string;
  /** Format: text */
  "rowFilter.factories.warranty_and_return_policy": string;
  /** Format: text */
  "rowFilter.factories.terms_of_contract": string;
  /** @description request_allowances */
  "body.request_allowances": definitions["request_allowances"];
  /** Format: uuid */
  "rowFilter.request_allowances.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_allowances.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_allowances.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_allowances.created_by": string;
  /** Format: text */
  "rowFilter.request_allowances.notes": string;
  /** Format: uuid */
  "rowFilter.request_allowances.owner_id": string;
  /** Format: text */
  "rowFilter.request_allowances.title": string;
  /** Format: text */
  "rowFilter.request_allowances.type": string;
  /** Format: uuid */
  "rowFilter.request_allowances.updated_by": string;
  /** Format: text */
  "rowFilter.request_allowances.status": string;
  /** Format: numeric */
  "rowFilter.request_allowances.suggested_amount": string;
  /** Format: uuid */
  "rowFilter.request_allowances.allowance_type_id": string;
  /** @description insurance_offer_plans */
  "body.insurance_offer_plans": definitions["insurance_offer_plans"];
  /** Format: uuid */
  "rowFilter.insurance_offer_plans.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_offer_plans.created_at": string;
  /** Format: uuid */
  "rowFilter.insurance_offer_plans.created_by": string;
  /** Format: uuid */
  "rowFilter.insurance_offer_plans.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_offer_plans.updated_at": string;
  /** Format: text */
  "rowFilter.insurance_offer_plans.name": string;
  /** Format: uuid */
  "rowFilter.insurance_offer_plans.insurance_offer_id": string;
  /** Format: uuid */
  "rowFilter.insurance_offer_plans.system_insurance_plan_id": string;
  /** Format: uuid */
  "rowFilter.insurance_offer_plans.updated_by": string;
  /** @description res_currencies */
  "body.res_currencies": definitions["res_currencies"];
  /** Format: uuid */
  "rowFilter.res_currencies.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.res_currencies.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.res_currencies.updated_at": string;
  /** Format: text */
  "rowFilter.res_currencies.name": string;
  /** Format: text */
  "rowFilter.res_currencies.symbol": string;
  /** Format: numeric */
  "rowFilter.res_currencies.decimal_places": string;
  /** Format: text */
  "rowFilter.res_currencies.position": string;
  /** Format: text */
  "rowFilter.res_currencies.currency_unit_label": string;
  /** Format: numeric */
  "rowFilter.res_currencies.rounding": string;
  /** Format: boolean */
  "rowFilter.res_currencies.active": string;
  /** Format: text */
  "rowFilter.res_currencies.full_name": string;
  /** Format: text */
  "rowFilter.res_currencies.currency_subunit_label": string;
  /** Format: uuid */
  "rowFilter.res_currencies.updated_by": string;
  /** @description res_cities */
  "body.res_cities": definitions["res_cities"];
  /** Format: uuid */
  "rowFilter.res_cities.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.res_cities.created_at": string;
  /** Format: text */
  "rowFilter.res_cities.name": string;
  /** Format: text */
  "rowFilter.res_cities.city_ascii": string;
  /** Format: numeric */
  "rowFilter.res_cities.lat": string;
  /** Format: numeric */
  "rowFilter.res_cities.lng": string;
  /** Format: text */
  "rowFilter.res_cities.admin_name": string;
  /** Format: text */
  "rowFilter.res_cities.capital": string;
  /** Format: numeric */
  "rowFilter.res_cities.population": string;
  /** Format: uuid */
  "rowFilter.res_cities.country_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.res_cities.updated_at": string;
  /** Format: uuid */
  "rowFilter.res_cities.updated_by": string;
  /** @description contracts */
  "body.contracts": definitions["contracts"];
  /** Format: uuid */
  "rowFilter.contracts.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.contracts.created_at": string;
  /** Format: uuid */
  "rowFilter.contracts.created_by": string;
  /** Format: uuid */
  "rowFilter.contracts.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.contracts.updated_at": string;
  /** Format: text */
  "rowFilter.contracts.duties": string;
  /** Format: text */
  "rowFilter.contracts.responsibilities": string;
  /** Format: numeric */
  "rowFilter.contracts.salary": string;
  /** Format: text */
  "rowFilter.contracts.benefits": string;
  /** Format: numeric */
  "rowFilter.contracts.probation_period": string;
  /** Format: date */
  "rowFilter.contracts.date_of_start": string;
  /** Format: uuid */
  "rowFilter.contracts.job_title_id": string;
  /** Format: numeric */
  "rowFilter.contracts.retirement_age": string;
  /** Format: numeric */
  "rowFilter.contracts.maximum_retirement_renewal_age": string;
  /** Format: uuid */
  "rowFilter.contracts.work_hour_id": string;
  /** Format: boolean */
  "rowFilter.contracts.insurance": string;
  /** Format: uuid */
  "rowFilter.contracts.contract_type_id": string;
  /** Format: uuid */
  "rowFilter.contracts.employee_id": string;
  /** Format: uuid */
  "rowFilter.contracts.recruitment_agencies_id": string;
  /** Format: numeric */
  "rowFilter.contracts.retirement_renewal_period": string;
  /** Format: uuid */
  "rowFilter.contracts.updated_by": string;
  /** Format: uuid */
  "rowFilter.contracts.compensation_type_id": string;
  /** Format: numeric */
  "rowFilter.contracts.period": string;
  /** @description join_broker_feedback */
  "body.join_broker_feedback": definitions["join_broker_feedback"];
  /** Format: timestamp with time zone */
  "rowFilter.join_broker_feedback.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_broker_feedback.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_broker_feedback.created_by": string;
  /** Format: uuid */
  "rowFilter.join_broker_feedback.broker_id": string;
  /** Format: uuid */
  "rowFilter.join_broker_feedback.feedback_id": string;
  /** Format: uuid */
  "rowFilter.join_broker_feedback.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_broker_feedback.updated_by": string;
  /** @description request_bonuses */
  "body.request_bonuses": definitions["request_bonuses"];
  /** Format: uuid */
  "rowFilter.request_bonuses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_bonuses.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_bonuses.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_bonuses.created_by": string;
  /** Format: text */
  "rowFilter.request_bonuses.notes": string;
  /** Format: uuid */
  "rowFilter.request_bonuses.owner_id": string;
  /** Format: text */
  "rowFilter.request_bonuses.title": string;
  /** Format: text */
  "rowFilter.request_bonuses.type": string;
  /** Format: uuid */
  "rowFilter.request_bonuses.updated_by": string;
  /** Format: text */
  "rowFilter.request_bonuses.status": string;
  /** Format: uuid */
  "rowFilter.request_bonuses.bonus_type_id": string;
  /** Format: uuid */
  "rowFilter.request_bonuses.bank_account_id": string;
  /** @description allowances */
  "body.allowances": definitions["allowances"];
  /** Format: uuid */
  "rowFilter.allowances.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.allowances.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.allowances.updated_at": string;
  /** Format: uuid */
  "rowFilter.allowances.created_by": string;
  /** Format: text */
  "rowFilter.allowances.notes": string;
  /** Format: uuid */
  "rowFilter.allowances.owner_id": string;
  /** Format: numeric */
  "rowFilter.allowances.suggested_amount": string;
  /** Format: uuid */
  "rowFilter.allowances.request_allowances_id": string;
  /** Format: uuid */
  "rowFilter.allowances.employee_id": string;
  /** Format: uuid */
  "rowFilter.allowances.allowance_type_id": string;
  /** Format: date */
  "rowFilter.allowances.date_of_received": string;
  /** Format: uuid */
  "rowFilter.allowances.bank_account_id": string;
  /** Format: uuid */
  "rowFilter.allowances.updated_by": string;
  /** @description request_retirement_age_extensions */
  "body.request_retirement_age_extensions": definitions["request_retirement_age_extensions"];
  /** Format: uuid */
  "rowFilter.request_retirement_age_extensions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_retirement_age_extensions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_retirement_age_extensions.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_retirement_age_extensions.created_by": string;
  /** Format: text */
  "rowFilter.request_retirement_age_extensions.notes": string;
  /** Format: uuid */
  "rowFilter.request_retirement_age_extensions.owner_id": string;
  /** Format: text */
  "rowFilter.request_retirement_age_extensions.title": string;
  /** Format: text */
  "rowFilter.request_retirement_age_extensions.type": string;
  /** Format: uuid */
  "rowFilter.request_retirement_age_extensions.updated_by": string;
  /** Format: text */
  "rowFilter.request_retirement_age_extensions.status": string;
  /** Format: uuid */
  "rowFilter.request_retirement_age_extensions.survey_answer_id": string;
  /** @description join_entity_employees */
  "body.join_entity_employees": definitions["join_entity_employees"];
  /** Format: timestamp with time zone */
  "rowFilter.join_entity_employees.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_entity_employees.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_entity_employees.created_by": string;
  /** Format: uuid */
  "rowFilter.join_entity_employees.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_entity_employees.entity_id": string;
  /** Format: uuid */
  "rowFilter.join_entity_employees.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_entity_employees.updated_by": string;
  /** @description request_salary_raises */
  "body.request_salary_raises": definitions["request_salary_raises"];
  /** Format: uuid */
  "rowFilter.request_salary_raises.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_salary_raises.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_salary_raises.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_salary_raises.created_by": string;
  /** Format: text */
  "rowFilter.request_salary_raises.notes": string;
  /** Format: uuid */
  "rowFilter.request_salary_raises.owner_id": string;
  /** Format: text */
  "rowFilter.request_salary_raises.title": string;
  /** Format: text */
  "rowFilter.request_salary_raises.type": string;
  /** Format: uuid */
  "rowFilter.request_salary_raises.updated_by": string;
  /** Format: text */
  "rowFilter.request_salary_raises.status": string;
  /** Format: text */
  "rowFilter.request_salary_raises.reasons": string;
  /** Format: numeric */
  "rowFilter.request_salary_raises.amount": string;
  /** @description join_offer_plan_providers */
  "body.join_offer_plan_providers": definitions["join_offer_plan_providers"];
  /** Format: timestamp with time zone */
  "rowFilter.join_offer_plan_providers.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_offer_plan_providers.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_offer_plan_providers.created_by": string;
  /** Format: uuid */
  "rowFilter.join_offer_plan_providers.insurance_offer_plan_id": string;
  /** Format: uuid */
  "rowFilter.join_offer_plan_providers.healthcare_service_provider_id": string;
  /** Format: uuid */
  "rowFilter.join_offer_plan_providers.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_offer_plan_providers.updated_by": string;
  /** @description join_role_employees */
  "body.join_role_employees": definitions["join_role_employees"];
  /** Format: timestamp with time zone */
  "rowFilter.join_role_employees.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_role_employees.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_role_employees.created_by": string;
  /** Format: uuid */
  "rowFilter.join_role_employees.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_role_employees.role_id": string;
  /** Format: uuid */
  "rowFilter.join_role_employees.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_role_employees.updated_by": string;
  /** @description join_training_trainers */
  "body.join_training_trainers": definitions["join_training_trainers"];
  /** Format: timestamp with time zone */
  "rowFilter.join_training_trainers.created_at": string;
  /** Format: uuid */
  "rowFilter.join_training_trainers.created_by": string;
  /** Format: uuid */
  "rowFilter.join_training_trainers.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_training_trainers.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_training_trainers.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_training_trainers.training_id": string;
  /** Format: uuid */
  "rowFilter.join_training_trainers.updated_by": string;
  /** @description health_reports */
  "body.health_reports": definitions["health_reports"];
  /** Format: uuid */
  "rowFilter.health_reports.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.health_reports.created_at": string;
  /** Format: uuid */
  "rowFilter.health_reports.created_by": string;
  /** Format: uuid */
  "rowFilter.health_reports.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.health_reports.updated_at": string;
  /** Format: numeric */
  "rowFilter.health_reports.year": string;
  /** Format: jsonb */
  "rowFilter.health_reports.answers": string;
  /** Format: uuid */
  "rowFilter.health_reports.updated_by": string;
  /** @description join_factory_feedback */
  "body.join_factory_feedback": definitions["join_factory_feedback"];
  /** Format: timestamp with time zone */
  "rowFilter.join_factory_feedback.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_factory_feedback.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_factory_feedback.created_by": string;
  /** Format: uuid */
  "rowFilter.join_factory_feedback.factory_id": string;
  /** Format: uuid */
  "rowFilter.join_factory_feedback.feedback_id": string;
  /** Format: uuid */
  "rowFilter.join_factory_feedback.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_factory_feedback.updated_by": string;
  /** @description employees */
  "body.employees": definitions["employees"];
  /** Format: uuid */
  "rowFilter.employees.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.employees.updated_at": string;
  /** Format: text */
  "rowFilter.employees.username": string;
  /** Format: text */
  "rowFilter.employees.full_name": string;
  /** Format: text */
  "rowFilter.employees.phone": string;
  /** Format: date */
  "rowFilter.employees.date_of_birth": string;
  /** Format: public.genders */
  "rowFilter.employees.gender": string;
  /** Format: uuid */
  "rowFilter.employees.country_of_birth_id": string;
  /** Format: uuid */
  "rowFilter.employees.image_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.employees.created_at": string;
  /** Format: jsonb */
  "rowFilter.employees.preferences": string;
  /** Format: date */
  "rowFilter.employees.date_of_hiring": string;
  /** Format: uuid */
  "rowFilter.employees.city_of_birth_id": string;
  /** Format: uuid */
  "rowFilter.employees.sponsor_id": string;
  /** Format: date */
  "rowFilter.employees.date_of_termination": string;
  /** Format: uuid */
  "rowFilter.employees.insurance_plan_id": string;
  /** Format: uuid */
  "rowFilter.employees.country_id": string;
  /** Format: uuid */
  "rowFilter.employees.city_id": string;
  /** Format: text */
  "rowFilter.employees.street": string;
  /** Format: text */
  "rowFilter.employees.building": string;
  /** Format: text */
  "rowFilter.employees.landmark": string;
  /** Format: uuid */
  "rowFilter.employees.updated_by": string;
  /** @description bonuses */
  "body.bonuses": definitions["bonuses"];
  /** Format: uuid */
  "rowFilter.bonuses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.bonuses.created_at": string;
  /** Format: uuid */
  "rowFilter.bonuses.created_by": string;
  /** Format: uuid */
  "rowFilter.bonuses.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.bonuses.updated_at": string;
  /** Format: numeric */
  "rowFilter.bonuses.amount": string;
  /** Format: text */
  "rowFilter.bonuses.reason": string;
  /** Format: uuid */
  "rowFilter.bonuses.employee_id": string;
  /** Format: text */
  "rowFilter.bonuses.note": string;
  /** Format: uuid */
  "rowFilter.bonuses.bonus_request_id": string;
  /** Format: uuid */
  "rowFilter.bonuses.bonus_type_id": string;
  /** Format: uuid */
  "rowFilter.bonuses.bank_account_id": string;
  /** Format: uuid */
  "rowFilter.bonuses.updated_by": string;
  /** @description health_conditions */
  "body.health_conditions": definitions["health_conditions"];
  /** Format: uuid */
  "rowFilter.health_conditions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.health_conditions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.health_conditions.updated_at": string;
  /** Format: uuid */
  "rowFilter.health_conditions.created_by": string;
  /** Format: text */
  "rowFilter.health_conditions.name": string;
  /** Format: uuid */
  "rowFilter.health_conditions.owner_id": string;
  /** Format: uuid */
  "rowFilter.health_conditions.health_condition_type_id": string;
  /** Format: uuid */
  "rowFilter.health_conditions.updated_by": string;
  /** @description join_relative_documents */
  "body.join_relative_documents": definitions["join_relative_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_relative_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_relative_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_relative_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_relative_documents.relative_id": string;
  /** Format: uuid */
  "rowFilter.join_relative_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_relative_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_relative_documents.updated_by": string;
  /** @description join_health_condition_medications */
  "body.join_health_condition_medications": definitions["join_health_condition_medications"];
  /** Format: timestamp with time zone */
  "rowFilter.join_health_condition_medications.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_health_condition_medications.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_medications.created_by": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_medications.condition_id": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_medications.medication_id": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_medications.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_health_condition_medications.updated_by": string;
  /** @description join_provider_type */
  "body.join_provider_type": definitions["join_provider_type"];
  /** Format: timestamp with time zone */
  "rowFilter.join_provider_type.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_provider_type.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_provider_type.created_by": string;
  /** Format: uuid */
  "rowFilter.join_provider_type.healthcare_provider_id": string;
  /** Format: uuid */
  "rowFilter.join_provider_type.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_provider_type.healthcare_type_id": string;
  /** Format: uuid */
  "rowFilter.join_provider_type.updated_by": string;
  /** @description spouses */
  "body.spouses": definitions["spouses"];
  /** Format: uuid */
  "rowFilter.spouses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.spouses.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.spouses.updated_at": string;
  /** Format: uuid */
  "rowFilter.spouses.created_by": string;
  /** Format: text */
  "rowFilter.spouses.name": string;
  /** Format: date */
  "rowFilter.spouses.date_of_birth": string;
  /** Format: uuid */
  "rowFilter.spouses.owner_id": string;
  /** Format: text */
  "rowFilter.spouses.type": string;
  /** Format: uuid */
  "rowFilter.spouses.updated_by": string;
  /** @description deductions */
  "body.deductions": definitions["deductions"];
  /** Format: uuid */
  "rowFilter.deductions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.deductions.created_at": string;
  /** Format: uuid */
  "rowFilter.deductions.created_by": string;
  /** Format: uuid */
  "rowFilter.deductions.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.deductions.updated_at": string;
  /** Format: numeric */
  "rowFilter.deductions.amount": string;
  /** Format: text */
  "rowFilter.deductions.reason": string;
  /** Format: uuid */
  "rowFilter.deductions.employee_id": string;
  /** Format: text */
  "rowFilter.deductions.note": string;
  /** Format: uuid */
  "rowFilter.deductions.deduction_type_id": string;
  /** Format: uuid */
  "rowFilter.deductions.updated_by": string;
  /** @description join_product_warehouses */
  "body.join_product_warehouses": definitions["join_product_warehouses"];
  /** Format: timestamp with time zone */
  "rowFilter.join_product_warehouses.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_product_warehouses.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_product_warehouses.created_by": string;
  /** Format: uuid */
  "rowFilter.join_product_warehouses.product_id": string;
  /** Format: uuid */
  "rowFilter.join_product_warehouses.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_product_warehouses.warehouse_id": string;
  /** Format: uuid */
  "rowFilter.join_product_warehouses.updated_by": string;
  /** @description database_structure */
  "body.database_structure": definitions["database_structure"];
  /** Format: name */
  "rowFilter.database_structure.table_name": string;
  /** Format: jsonb */
  "rowFilter.database_structure.columns": string;
  /** @description products */
  "body.products": definitions["products"];
  /** Format: uuid */
  "rowFilter.products.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.products.created_at": string;
  /** Format: uuid */
  "rowFilter.products.created_by": string;
  /** Format: uuid */
  "rowFilter.products.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.products.updated_at": string;
  /** Format: text */
  "rowFilter.products.name": string;
  /** Format: text */
  "rowFilter.products.slug": string;
  /** Format: text */
  "rowFilter.products.description": string;
  /** Format: text */
  "rowFilter.products.short_description": string;
  /** Format: text */
  "rowFilter.products.sku": string;
  /** Format: text */
  "rowFilter.products.price": string;
  /** Format: uuid */
  "rowFilter.products.product_type_id": string;
  /** Format: uuid */
  "rowFilter.products.updated_by": string;
  /** @description join_insurance_company_insurance_types */
  "body.join_insurance_company_insurance_types": definitions["join_insurance_company_insurance_types"];
  /** Format: timestamp with time zone */
  "rowFilter.join_insurance_company_insurance_types.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_insurance_company_insurance_types.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_insurance_types.created_by": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_insurance_types.insurance_company_id": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_insurance_types.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_insurance_types.insurance_type_id": string;
  /** Format: uuid */
  "rowFilter.join_insurance_company_insurance_types.updated_by": string;
  /** @description jsonschema_validators */
  "body.jsonschema_validators": definitions["jsonschema_validators"];
  /** Format: uuid */
  "rowFilter.jsonschema_validators.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.jsonschema_validators.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.jsonschema_validators.updated_at": string;
  /** Format: uuid */
  "rowFilter.jsonschema_validators.created_by": string;
  /** Format: json */
  "rowFilter.jsonschema_validators.schema": string;
  /** Format: text */
  "rowFilter.jsonschema_validators.description": string;
  /** Format: text */
  "rowFilter.jsonschema_validators.schema_name": string;
  /** Format: uuid */
  "rowFilter.jsonschema_validators.updated_by": string;
  /** @description sponsors */
  "body.sponsors": definitions["sponsors"];
  /** Format: uuid */
  "rowFilter.sponsors.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.sponsors.created_at": string;
  /** Format: uuid */
  "rowFilter.sponsors.created_by": string;
  /** Format: uuid */
  "rowFilter.sponsors.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.sponsors.updated_at": string;
  /** Format: uuid */
  "rowFilter.sponsors.employee_id": string;
  /** Format: uuid */
  "rowFilter.sponsors.entity_id": string;
  /** Format: uuid */
  "rowFilter.sponsors.updated_by": string;
  /** @description image_storage_view */
  "body.image_storage_view": definitions["image_storage_view"];
  /** Format: timestamp with time zone */
  "rowFilter.image_storage_view.created_at": string;
  /** Format: uuid */
  "rowFilter.image_storage_view.created_by": string;
  /** Format: text */
  "rowFilter.image_storage_view.description": string;
  /** Format: uuid */
  "rowFilter.image_storage_view.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.image_storage_view.updated_at": string;
  /** Format: uuid */
  "rowFilter.image_storage_view.updated_by": string;
  /** Format: text */
  "rowFilter.image_storage_view.bucket_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.image_storage_view.last_accessed_at": string;
  /** Format: jsonb */
  "rowFilter.image_storage_view.metadata": string;
  /** Format: text */
  "rowFilter.image_storage_view.name": string;
  /** Format: uuid */
  "rowFilter.image_storage_view.owner": string;
  /** Format: text[] */
  "rowFilter.image_storage_view.path_tokens": string;
  /** Format: text */
  "rowFilter.image_storage_view.version": string;
  /** @description attendances */
  "body.attendances": definitions["attendances"];
  /** Format: uuid */
  "rowFilter.attendances.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.attendances.created_at": string;
  /** Format: uuid */
  "rowFilter.attendances.created_by": string;
  /** Format: uuid */
  "rowFilter.attendances.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.attendances.updated_at": string;
  /** Format: uuid */
  "rowFilter.attendances.updated_by": string;
  /** Format: timestamp with time zone */
  "rowFilter.attendances.op_time": string;
  /** Format: text */
  "rowFilter.attendances.operation": string;
  /** Format: jsonb */
  "rowFilter.attendances.location": string;
  /** @description feedback */
  "body.feedback": definitions["feedback"];
  /** Format: uuid */
  "rowFilter.feedback.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.feedback.created_at": string;
  /** Format: uuid */
  "rowFilter.feedback.created_by": string;
  /** Format: uuid */
  "rowFilter.feedback.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.feedback.updated_at": string;
  /** Format: text */
  "rowFilter.feedback.positive_feedback": string;
  /** Format: numeric */
  "rowFilter.feedback.rating": string;
  /** Format: text */
  "rowFilter.feedback.negative_feedback": string;
  /** Format: uuid */
  "rowFilter.feedback.updated_by": string;
  /** @description request_purchases */
  "body.request_purchases": definitions["request_purchases"];
  /** Format: uuid */
  "rowFilter.request_purchases.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_purchases.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_purchases.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_purchases.created_by": string;
  /** Format: text */
  "rowFilter.request_purchases.notes": string;
  /** Format: uuid */
  "rowFilter.request_purchases.owner_id": string;
  /** Format: text */
  "rowFilter.request_purchases.title": string;
  /** Format: text */
  "rowFilter.request_purchases.type": string;
  /** Format: uuid */
  "rowFilter.request_purchases.updated_by": string;
  /** Format: text */
  "rowFilter.request_purchases.status": string;
  /** Format: text */
  "rowFilter.request_purchases.name": string;
  /** Format: numeric */
  "rowFilter.request_purchases.amount": string;
  /** Format: numeric */
  "rowFilter.request_purchases.quantity": string;
  /** @description join_factory_countries */
  "body.join_factory_countries": definitions["join_factory_countries"];
  /** Format: timestamp with time zone */
  "rowFilter.join_factory_countries.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_factory_countries.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_factory_countries.created_by": string;
  /** Format: uuid */
  "rowFilter.join_factory_countries.factory_id": string;
  /** Format: uuid */
  "rowFilter.join_factory_countries.res_country_id": string;
  /** Format: uuid */
  "rowFilter.join_factory_countries.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_factory_countries.updated_by": string;
  /** @description template */
  "body.template": definitions["template"];
  /** Format: uuid */
  "rowFilter.template.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.template.created_at": string;
  /** Format: uuid */
  "rowFilter.template.created_by": string;
  /** Format: uuid */
  "rowFilter.template.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.template.updated_at": string;
  /** Format: uuid */
  "rowFilter.template.updated_by": string;
  /** @description request_insurance_updates */
  "body.request_insurance_updates": definitions["request_insurance_updates"];
  /** Format: uuid */
  "rowFilter.request_insurance_updates.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_updates.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_updates.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_insurance_updates.created_by": string;
  /** Format: text */
  "rowFilter.request_insurance_updates.notes": string;
  /** Format: uuid */
  "rowFilter.request_insurance_updates.owner_id": string;
  /** Format: text */
  "rowFilter.request_insurance_updates.title": string;
  /** Format: text */
  "rowFilter.request_insurance_updates.type": string;
  /** Format: uuid */
  "rowFilter.request_insurance_updates.updated_by": string;
  /** Format: text */
  "rowFilter.request_insurance_updates.status": string;
  /** @description join_product_product_categories */
  "body.join_product_product_categories": definitions["join_product_product_categories"];
  /** Format: timestamp with time zone */
  "rowFilter.join_product_product_categories.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_product_product_categories.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_product_product_categories.created_by": string;
  /** Format: uuid */
  "rowFilter.join_product_product_categories.product_id": string;
  /** Format: uuid */
  "rowFilter.join_product_product_categories.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_product_product_categories.product_category_id": string;
  /** Format: uuid */
  "rowFilter.join_product_product_categories.updated_by": string;
  /** @description ships */
  "body.ships": definitions["ships"];
  /** Format: uuid */
  "rowFilter.ships.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ships.created_at": string;
  /** Format: uuid */
  "rowFilter.ships.created_by": string;
  /** Format: uuid */
  "rowFilter.ships.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ships.updated_at": string;
  /** Format: text */
  "rowFilter.ships.name": string;
  /** Format: text */
  "rowFilter.ships.number": string;
  /** Format: uuid */
  "rowFilter.ships.shipping_company_id": string;
  /** Format: uuid */
  "rowFilter.ships.updated_by": string;
  /** @description warehouses */
  "body.warehouses": definitions["warehouses"];
  /** Format: uuid */
  "rowFilter.warehouses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.warehouses.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.warehouses.updated_at": string;
  /** Format: text */
  "rowFilter.warehouses.employee_name": string;
  /** Format: text */
  "rowFilter.warehouses.phone": string;
  /** Format: text */
  "rowFilter.warehouses.email": string;
  /** Format: text */
  "rowFilter.warehouses.website": string;
  /** Format: uuid */
  "rowFilter.warehouses.updated_by": string;
  /** Format: uuid */
  "rowFilter.warehouses.owner_id": string;
  /** Format: uuid */
  "rowFilter.warehouses.country_id": string;
  /** Format: uuid */
  "rowFilter.warehouses.city_id": string;
  /** Format: text */
  "rowFilter.warehouses.street": string;
  /** Format: text */
  "rowFilter.warehouses.building": string;
  /** Format: text */
  "rowFilter.warehouses.landmark": string;
  /** Format: jsonb */
  "rowFilter.warehouses.gps": string;
  /** Format: uuid */
  "rowFilter.warehouses.created_by": string;
  /** Format: text */
  "rowFilter.warehouses.name": string;
  /** @description banks */
  "body.banks": definitions["banks"];
  /** Format: uuid */
  "rowFilter.banks.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.banks.created_at": string;
  /** Format: uuid */
  "rowFilter.banks.created_by": string;
  /** Format: uuid */
  "rowFilter.banks.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.banks.updated_at": string;
  /** Format: jsonb */
  "rowFilter.banks.name": string;
  /** Format: uuid */
  "rowFilter.banks.updated_by": string;
  /** @description announcements */
  "body.announcements": definitions["announcements"];
  /** Format: uuid */
  "rowFilter.announcements.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.announcements.created_at": string;
  /** Format: uuid */
  "rowFilter.announcements.created_by": string;
  /** Format: uuid */
  "rowFilter.announcements.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.announcements.updated_at": string;
  /** Format: uuid */
  "rowFilter.announcements.updated_by": string;
  /** Format: text */
  "rowFilter.announcements.title": string;
  /** Format: text */
  "rowFilter.announcements.message": string;
  /** Format: uuid[] */
  "rowFilter.announcements.subscribers_ids": string;
  /** Format: text */
  "rowFilter.announcements.level": string;
  /** @description emergency_contacts */
  "body.emergency_contacts": definitions["emergency_contacts"];
  /** Format: uuid */
  "rowFilter.emergency_contacts.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.emergency_contacts.created_at": string;
  /** Format: uuid */
  "rowFilter.emergency_contacts.created_by": string;
  /** Format: uuid */
  "rowFilter.emergency_contacts.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.emergency_contacts.updated_at": string;
  /** Format: text */
  "rowFilter.emergency_contacts.name": string;
  /** Format: text */
  "rowFilter.emergency_contacts.phone": string;
  /** Format: uuid */
  "rowFilter.emergency_contacts.employee_id": string;
  /** Format: uuid */
  "rowFilter.emergency_contacts.relation_type_id": string;
  /** Format: uuid */
  "rowFilter.emergency_contacts.updated_by": string;
  /** @description options */
  "body.options": definitions["options"];
  /** Format: uuid */
  "rowFilter.options.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.options.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.options.updated_at": string;
  /** Format: uuid */
  "rowFilter.options.created_by": string;
  /** Format: text */
  "rowFilter.options.name": string;
  /** Format: jsonb */
  "rowFilter.options.value": string;
  /** Format: json */
  "rowFilter.options.validator": string;
  /** Format: uuid */
  "rowFilter.options.owner_id": string;
  /** Format: text */
  "rowFilter.options.version": string;
  /** Format: uuid */
  "rowFilter.options.updated_by": string;
  /** @description insurance_reports */
  "body.insurance_reports": definitions["insurance_reports"];
  /** Format: uuid */
  "rowFilter.insurance_reports.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_reports.created_at": string;
  /** Format: uuid */
  "rowFilter.insurance_reports.created_by": string;
  /** Format: uuid */
  "rowFilter.insurance_reports.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_reports.updated_at": string;
  /** Format: numeric */
  "rowFilter.insurance_reports.year": string;
  /** Format: jsonb */
  "rowFilter.insurance_reports.answers": string;
  /** Format: uuid */
  "rowFilter.insurance_reports.updated_by": string;
  /** @description request_health_visits */
  "body.request_health_visits": definitions["request_health_visits"];
  /** Format: uuid */
  "rowFilter.request_health_visits.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_health_visits.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_health_visits.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_health_visits.created_by": string;
  /** Format: text */
  "rowFilter.request_health_visits.notes": string;
  /** Format: uuid */
  "rowFilter.request_health_visits.owner_id": string;
  /** Format: text */
  "rowFilter.request_health_visits.title": string;
  /** Format: text */
  "rowFilter.request_health_visits.type": string;
  /** Format: uuid */
  "rowFilter.request_health_visits.updated_by": string;
  /** Format: text */
  "rowFilter.request_health_visits.status": string;
  /** @description departments */
  "body.departments": definitions["departments"];
  /** Format: uuid */
  "rowFilter.departments.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.departments.created_at": string;
  /** Format: uuid */
  "rowFilter.departments.created_by": string;
  /** Format: uuid */
  "rowFilter.departments.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.departments.updated_at": string;
  /** Format: text */
  "rowFilter.departments.name": string;
  /** Format: text */
  "rowFilter.departments.description": string;
  /** Format: uuid */
  "rowFilter.departments.entity_id": string;
  /** Format: uuid */
  "rowFilter.departments.updated_by": string;
  /** @description marriages */
  "body.marriages": definitions["marriages"];
  /** Format: timestamp with time zone */
  "rowFilter.marriages.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.marriages.updated_at": string;
  /** Format: uuid */
  "rowFilter.marriages.created_by": string;
  /** Format: uuid */
  "rowFilter.marriages.employee_id": string;
  /** Format: uuid */
  "rowFilter.marriages.spouse_id": string;
  /** Format: uuid */
  "rowFilter.marriages.id": string;
  /** Format: date */
  "rowFilter.marriages.date_of_marriage": string;
  /** Format: text */
  "rowFilter.marriages.notes": string;
  /** Format: text */
  "rowFilter.marriages.certificate_number": string;
  /** Format: uuid */
  "rowFilter.marriages.owner_id": string;
  /** Format: date */
  "rowFilter.marriages.date_of_separation": string;
  /** Format: public.separation_reasons */
  "rowFilter.marriages.separation_reason": string;
  /** Format: uuid */
  "rowFilter.marriages.updated_by": string;
  /** @description ship_lines */
  "body.ship_lines": definitions["ship_lines"];
  /** Format: uuid */
  "rowFilter.ship_lines.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ship_lines.created_at": string;
  /** Format: uuid */
  "rowFilter.ship_lines.created_by": string;
  /** Format: uuid */
  "rowFilter.ship_lines.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.ship_lines.updated_at": string;
  /** Format: uuid */
  "rowFilter.ship_lines.from_port_id": string;
  /** Format: uuid */
  "rowFilter.ship_lines.to_port_id": string;
  /** Format: text */
  "rowFilter.ship_lines.name": string;
  /** Format: uuid */
  "rowFilter.ship_lines.updated_by": string;
  /** @description request_internal_delegations */
  "body.request_internal_delegations": definitions["request_internal_delegations"];
  /** Format: uuid */
  "rowFilter.request_internal_delegations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_internal_delegations.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_internal_delegations.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_internal_delegations.created_by": string;
  /** Format: text */
  "rowFilter.request_internal_delegations.notes": string;
  /** Format: uuid */
  "rowFilter.request_internal_delegations.owner_id": string;
  /** Format: text */
  "rowFilter.request_internal_delegations.title": string;
  /** Format: text */
  "rowFilter.request_internal_delegations.type": string;
  /** Format: uuid */
  "rowFilter.request_internal_delegations.updated_by": string;
  /** Format: text */
  "rowFilter.request_internal_delegations.status": string;
  /** Format: text */
  "rowFilter.request_internal_delegations.reason": string;
  /** Format: date */
  "rowFilter.request_internal_delegations.from": string;
  /** Format: date */
  "rowFilter.request_internal_delegations.to": string;
  /** Format: uuid */
  "rowFilter.request_internal_delegations.entity_id": string;
  /** @description insurance_companies */
  "body.insurance_companies": definitions["insurance_companies"];
  /** Format: uuid */
  "rowFilter.insurance_companies.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_companies.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_companies.updated_at": string;
  /** Format: text */
  "rowFilter.insurance_companies.employee_name": string;
  /** Format: text */
  "rowFilter.insurance_companies.phone": string;
  /** Format: text */
  "rowFilter.insurance_companies.email": string;
  /** Format: text */
  "rowFilter.insurance_companies.website": string;
  /** Format: uuid */
  "rowFilter.insurance_companies.updated_by": string;
  /** Format: uuid */
  "rowFilter.insurance_companies.owner_id": string;
  /** Format: uuid */
  "rowFilter.insurance_companies.country_id": string;
  /** Format: uuid */
  "rowFilter.insurance_companies.city_id": string;
  /** Format: text */
  "rowFilter.insurance_companies.street": string;
  /** Format: text */
  "rowFilter.insurance_companies.building": string;
  /** Format: text */
  "rowFilter.insurance_companies.landmark": string;
  /** Format: jsonb */
  "rowFilter.insurance_companies.gps": string;
  /** Format: uuid */
  "rowFilter.insurance_companies.created_by": string;
  /** Format: text */
  "rowFilter.insurance_companies.name": string;
  /** Format: uuid */
  "rowFilter.insurance_companies.logo_id": string;
  /** Format: text */
  "rowFilter.insurance_companies.trading_number": string;
  /** Format: text */
  "rowFilter.insurance_companies.tax_number": string;
  /** Format: boolean */
  "rowFilter.insurance_companies.active": string;
  /** Format: text */
  "rowFilter.insurance_companies.emergency_contacts": string;
  /** @description entities */
  "body.entities": definitions["entities"];
  /** Format: uuid */
  "rowFilter.entities.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.entities.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.entities.updated_at": string;
  /** Format: uuid */
  "rowFilter.entities.created_by": string;
  /** Format: text */
  "rowFilter.entities.name": string;
  /** Format: text */
  "rowFilter.entities.trading_number": string;
  /** Format: text */
  "rowFilter.entities.tax_number": string;
  /** Format: text */
  "rowFilter.entities.activity": string;
  /** Format: text */
  "rowFilter.entities.type": string;
  /** Format: uuid */
  "rowFilter.entities.parent_id": string;
  /** Format: uuid */
  "rowFilter.entities.entity_type_id": string;
  /** Format: uuid */
  "rowFilter.entities.logo_id": string;
  /** Format: text */
  "rowFilter.entities.slogan": string;
  /** Format: text */
  "rowFilter.entities.phone": string;
  /** Format: uuid */
  "rowFilter.entities.nationality_id": string;
  /** Format: uuid */
  "rowFilter.entities.ceo_id": string;
  /** Format: numeric */
  "rowFilter.entities.established": string;
  /** Format: text */
  "rowFilter.entities.website": string;
  /** Format: text */
  "rowFilter.entities.email": string;
  /** Format: text */
  "rowFilter.entities.employee_name": string;
  /** Format: uuid */
  "rowFilter.entities.country_id": string;
  /** Format: uuid */
  "rowFilter.entities.city_id": string;
  /** Format: text */
  "rowFilter.entities.street": string;
  /** Format: text */
  "rowFilter.entities.building": string;
  /** Format: text */
  "rowFilter.entities.landmark": string;
  /** Format: uuid */
  "rowFilter.entities.updated_by": string;
  /** @description join_marriage_documents */
  "body.join_marriage_documents": definitions["join_marriage_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_marriage_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_marriage_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_marriage_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_marriage_documents.marriage_id": string;
  /** Format: uuid */
  "rowFilter.join_marriage_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_marriage_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_marriage_documents.updated_by": string;
  /** @description factory_branches */
  "body.factory_branches": definitions["factory_branches"];
  /** Format: uuid */
  "rowFilter.factory_branches.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.factory_branches.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.factory_branches.updated_at": string;
  /** Format: text */
  "rowFilter.factory_branches.employee_name": string;
  /** Format: text */
  "rowFilter.factory_branches.phone": string;
  /** Format: text */
  "rowFilter.factory_branches.email": string;
  /** Format: text */
  "rowFilter.factory_branches.website": string;
  /** Format: uuid */
  "rowFilter.factory_branches.updated_by": string;
  /** Format: uuid */
  "rowFilter.factory_branches.owner_id": string;
  /** Format: uuid */
  "rowFilter.factory_branches.country_id": string;
  /** Format: uuid */
  "rowFilter.factory_branches.city_id": string;
  /** Format: text */
  "rowFilter.factory_branches.street": string;
  /** Format: text */
  "rowFilter.factory_branches.building": string;
  /** Format: text */
  "rowFilter.factory_branches.landmark": string;
  /** Format: jsonb */
  "rowFilter.factory_branches.gps": string;
  /** Format: uuid */
  "rowFilter.factory_branches.created_by": string;
  /** Format: uuid */
  "rowFilter.factory_branches.factory_id": string;
  /** Format: text */
  "rowFilter.factory_branches.name": string;
  /** @description join_product_product_type_attribute_values */
  "body.join_product_product_type_attribute_values": definitions["join_product_product_type_attribute_values"];
  /** Format: timestamp with time zone */
  "rowFilter.join_product_product_type_attribute_values.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_product_product_type_attribute_values.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_product_product_type_attribute_values.created_by": string;
  /** Format: uuid */
  "rowFilter.join_product_product_type_attribute_values.product_id": string;
  /** Format: uuid */
  "rowFilter.join_product_product_type_attribute_values.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_product_product_type_attribute_values.product_type_attribute_value_id": string;
  /** Format: uuid */
  "rowFilter.join_product_product_type_attribute_values.updated_by": string;
  /** @description request_transfers */
  "body.request_transfers": definitions["request_transfers"];
  /** Format: uuid */
  "rowFilter.request_transfers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_transfers.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_transfers.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_transfers.created_by": string;
  /** Format: text */
  "rowFilter.request_transfers.notes": string;
  /** Format: uuid */
  "rowFilter.request_transfers.owner_id": string;
  /** Format: text */
  "rowFilter.request_transfers.title": string;
  /** Format: text */
  "rowFilter.request_transfers.type": string;
  /** Format: uuid */
  "rowFilter.request_transfers.updated_by": string;
  /** Format: text */
  "rowFilter.request_transfers.status": string;
  /** Format: date */
  "rowFilter.request_transfers.date_of_transfer": string;
  /** Format: text */
  "rowFilter.request_transfers.job_title": string;
  /** Format: text */
  "rowFilter.request_transfers.entity": string;
  /** @description user_roles */
  "body.user_roles": definitions["user_roles"];
  /** Format: uuid */
  "rowFilter.user_roles.id": string;
  /** Format: text */
  "rowFilter.user_roles.group_name": string;
  /** Format: text */
  "rowFilter.user_roles.role": string;
  /** Format: character varying */
  "rowFilter.user_roles.email": string;
  /** Format: uuid */
  "rowFilter.user_roles.group_id": string;
  /** Format: uuid */
  "rowFilter.user_roles.user_id": string;
  /** @description system_insurance_plans */
  "body.system_insurance_plans": definitions["system_insurance_plans"];
  /** Format: uuid */
  "rowFilter.system_insurance_plans.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.system_insurance_plans.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.system_insurance_plans.updated_at": string;
  /** Format: uuid */
  "rowFilter.system_insurance_plans.created_by": string;
  /** Format: text */
  "rowFilter.system_insurance_plans.name": string;
  /** Format: uuid */
  "rowFilter.system_insurance_plans.owner_id": string;
  /** Format: uuid */
  "rowFilter.system_insurance_plans.insurance_plan_id": string;
  /** Format: uuid */
  "rowFilter.system_insurance_plans.updated_by": string;
  /** @description request_trainer_registrations */
  "body.request_trainer_registrations": definitions["request_trainer_registrations"];
  /** Format: uuid */
  "rowFilter.request_trainer_registrations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_trainer_registrations.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_trainer_registrations.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_trainer_registrations.created_by": string;
  /** Format: text */
  "rowFilter.request_trainer_registrations.notes": string;
  /** Format: uuid */
  "rowFilter.request_trainer_registrations.owner_id": string;
  /** Format: text */
  "rowFilter.request_trainer_registrations.title": string;
  /** Format: text */
  "rowFilter.request_trainer_registrations.type": string;
  /** Format: uuid */
  "rowFilter.request_trainer_registrations.updated_by": string;
  /** Format: text */
  "rowFilter.request_trainer_registrations.status": string;
  /** Format: uuid */
  "rowFilter.request_trainer_registrations.training_id": string;
  /** Format: text */
  "rowFilter.request_trainer_registrations.qualifications": string;
  /** Format: uuid */
  "rowFilter.request_trainer_registrations.entity_id": string;
  /** @description advances */
  "body.advances": definitions["advances"];
  /** Format: uuid */
  "rowFilter.advances.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.advances.created_at": string;
  /** Format: uuid */
  "rowFilter.advances.created_by": string;
  /** Format: uuid */
  "rowFilter.advances.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.advances.updated_at": string;
  /** Format: numeric */
  "rowFilter.advances.amount": string;
  /** Format: text */
  "rowFilter.advances.notes": string;
  /** Format: uuid */
  "rowFilter.advances.employee_id": string;
  /** Format: uuid */
  "rowFilter.advances.advance_request_id": string;
  /** Format: numeric */
  "rowFilter.advances.installments": string;
  /** Format: date */
  "rowFilter.advances.date_of_payment": string;
  /** Format: date */
  "rowFilter.advances.date_of_receipt": string;
  /** Format: uuid */
  "rowFilter.advances.advance_type_id": string;
  /** Format: uuid */
  "rowFilter.advances.bank_account_id": string;
  /** Format: uuid */
  "rowFilter.advances.updated_by": string;
  /** @description complaint_financial */
  "body.complaint_financial": definitions["complaint_financial"];
  /** Format: uuid */
  "rowFilter.complaint_financial.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.complaint_financial.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.complaint_financial.updated_at": string;
  /** Format: uuid */
  "rowFilter.complaint_financial.created_by": string;
  /** Format: text */
  "rowFilter.complaint_financial.notes": string;
  /** Format: uuid */
  "rowFilter.complaint_financial.owner_id": string;
  /** Format: text */
  "rowFilter.complaint_financial.title": string;
  /** Format: text */
  "rowFilter.complaint_financial.type": string;
  /** Format: uuid */
  "rowFilter.complaint_financial.updated_by": string;
  /** Format: numeric */
  "rowFilter.complaint_financial.amount": string;
  /** Format: uuid */
  "rowFilter.complaint_financial.financial_complaint_type_id": string;
  /** @description request_benefits */
  "body.request_benefits": definitions["request_benefits"];
  /** Format: uuid */
  "rowFilter.request_benefits.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_benefits.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_benefits.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_benefits.created_by": string;
  /** Format: text */
  "rowFilter.request_benefits.notes": string;
  /** Format: uuid */
  "rowFilter.request_benefits.owner_id": string;
  /** Format: text */
  "rowFilter.request_benefits.title": string;
  /** Format: text */
  "rowFilter.request_benefits.type": string;
  /** Format: uuid */
  "rowFilter.request_benefits.updated_by": string;
  /** Format: text */
  "rowFilter.request_benefits.status": string;
  /** @description request_delegations */
  "body.request_delegations": definitions["request_delegations"];
  /** Format: uuid */
  "rowFilter.request_delegations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_delegations.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_delegations.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_delegations.created_by": string;
  /** Format: text */
  "rowFilter.request_delegations.notes": string;
  /** Format: uuid */
  "rowFilter.request_delegations.owner_id": string;
  /** Format: text */
  "rowFilter.request_delegations.title": string;
  /** Format: text */
  "rowFilter.request_delegations.type": string;
  /** Format: uuid */
  "rowFilter.request_delegations.updated_by": string;
  /** Format: text */
  "rowFilter.request_delegations.status": string;
  /** Format: text */
  "rowFilter.request_delegations.reason": string;
  /** Format: date */
  "rowFilter.request_delegations.from": string;
  /** Format: date */
  "rowFilter.request_delegations.to": string;
  /** @description request_external_delegations */
  "body.request_external_delegations": definitions["request_external_delegations"];
  /** Format: uuid */
  "rowFilter.request_external_delegations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_external_delegations.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_external_delegations.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_external_delegations.created_by": string;
  /** Format: text */
  "rowFilter.request_external_delegations.notes": string;
  /** Format: uuid */
  "rowFilter.request_external_delegations.owner_id": string;
  /** Format: text */
  "rowFilter.request_external_delegations.title": string;
  /** Format: text */
  "rowFilter.request_external_delegations.type": string;
  /** Format: uuid */
  "rowFilter.request_external_delegations.updated_by": string;
  /** Format: text */
  "rowFilter.request_external_delegations.status": string;
  /** Format: text */
  "rowFilter.request_external_delegations.reason": string;
  /** Format: date */
  "rowFilter.request_external_delegations.from": string;
  /** Format: date */
  "rowFilter.request_external_delegations.to": string;
  /** Format: text */
  "rowFilter.request_external_delegations.destination": string;
  /** @description base_call_for_action */
  "body.base_call_for_action": definitions["base_call_for_action"];
  /** Format: uuid */
  "rowFilter.base_call_for_action.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_call_for_action.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_call_for_action.updated_at": string;
  /** Format: uuid */
  "rowFilter.base_call_for_action.created_by": string;
  /** Format: text */
  "rowFilter.base_call_for_action.notes": string;
  /** Format: uuid */
  "rowFilter.base_call_for_action.owner_id": string;
  /** Format: text */
  "rowFilter.base_call_for_action.title": string;
  /** Format: text */
  "rowFilter.base_call_for_action.type": string;
  /** Format: uuid */
  "rowFilter.base_call_for_action.updated_by": string;
  /** @description entity_types */
  "body.entity_types": definitions["entity_types"];
  /** Format: uuid */
  "rowFilter.entity_types.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.entity_types.created_at": string;
  /** Format: uuid */
  "rowFilter.entity_types.created_by": string;
  /** Format: timestamp with time zone */
  "rowFilter.entity_types.updated_at": string;
  /** Format: jsonb */
  "rowFilter.entity_types.name": string;
  /** Format: text */
  "rowFilter.entity_types.category": string;
  /** Format: public.entity_level */
  "rowFilter.entity_types.level": string;
  /** Format: text */
  "rowFilter.entity_types.slug": string;
  /** Format: text */
  "rowFilter.entity_types.description": string;
  /** Format: uuid */
  "rowFilter.entity_types.updated_by": string;
  /** @description request_resignations */
  "body.request_resignations": definitions["request_resignations"];
  /** Format: uuid */
  "rowFilter.request_resignations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_resignations.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_resignations.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_resignations.created_by": string;
  /** Format: text */
  "rowFilter.request_resignations.notes": string;
  /** Format: uuid */
  "rowFilter.request_resignations.owner_id": string;
  /** Format: text */
  "rowFilter.request_resignations.title": string;
  /** Format: text */
  "rowFilter.request_resignations.type": string;
  /** Format: uuid */
  "rowFilter.request_resignations.updated_by": string;
  /** Format: text */
  "rowFilter.request_resignations.status": string;
  /** Format: text */
  "rowFilter.request_resignations.reason": string;
  /** Format: date */
  "rowFilter.request_resignations.date_of_effective_resignation": string;
  /** @description payroll_deductions */
  "body.payroll_deductions": definitions["payroll_deductions"];
  /** Format: uuid */
  "rowFilter.payroll_deductions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.payroll_deductions.created_at": string;
  /** Format: uuid */
  "rowFilter.payroll_deductions.created_by": string;
  /** Format: uuid */
  "rowFilter.payroll_deductions.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.payroll_deductions.updated_at": string;
  /** Format: uuid */
  "rowFilter.payroll_deductions.payroll_deduction_type_id": string;
  /** Format: text */
  "rowFilter.payroll_deductions.amount": string;
  /** Format: uuid */
  "rowFilter.payroll_deductions.updated_by": string;
  /** @description surveys */
  "body.surveys": definitions["surveys"];
  /** Format: uuid */
  "rowFilter.surveys.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.surveys.created_at": string;
  /** Format: uuid */
  "rowFilter.surveys.created_by": string;
  /** Format: timestamp with time zone */
  "rowFilter.surveys.updated_at": string;
  /** Format: text */
  "rowFilter.surveys.name": string;
  /** Format: jsonb */
  "rowFilter.surveys.survey_schema": string;
  /** Format: uuid */
  "rowFilter.surveys.updated_by": string;
  /** @description shipping_companies */
  "body.shipping_companies": definitions["shipping_companies"];
  /** Format: uuid */
  "rowFilter.shipping_companies.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.shipping_companies.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.shipping_companies.updated_at": string;
  /** Format: text */
  "rowFilter.shipping_companies.employee_name": string;
  /** Format: text */
  "rowFilter.shipping_companies.phone": string;
  /** Format: text */
  "rowFilter.shipping_companies.email": string;
  /** Format: text */
  "rowFilter.shipping_companies.website": string;
  /** Format: uuid */
  "rowFilter.shipping_companies.updated_by": string;
  /** Format: uuid */
  "rowFilter.shipping_companies.owner_id": string;
  /** Format: uuid */
  "rowFilter.shipping_companies.country_id": string;
  /** Format: uuid */
  "rowFilter.shipping_companies.city_id": string;
  /** Format: text */
  "rowFilter.shipping_companies.street": string;
  /** Format: text */
  "rowFilter.shipping_companies.building": string;
  /** Format: text */
  "rowFilter.shipping_companies.landmark": string;
  /** Format: jsonb */
  "rowFilter.shipping_companies.gps": string;
  /** Format: uuid */
  "rowFilter.shipping_companies.created_by": string;
  /** Format: text */
  "rowFilter.shipping_companies.name": string;
  /** @description join_department_employees */
  "body.join_department_employees": definitions["join_department_employees"];
  /** Format: timestamp with time zone */
  "rowFilter.join_department_employees.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_department_employees.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_department_employees.created_by": string;
  /** Format: uuid */
  "rowFilter.join_department_employees.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_department_employees.department_id": string;
  /** Format: uuid */
  "rowFilter.join_department_employees.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_department_employees.updated_by": string;
  /** @description join_relative_health_conditions */
  "body.join_relative_health_conditions": definitions["join_relative_health_conditions"];
  /** Format: timestamp with time zone */
  "rowFilter.join_relative_health_conditions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_relative_health_conditions.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_relative_health_conditions.created_by": string;
  /** Format: uuid */
  "rowFilter.join_relative_health_conditions.relative_id": string;
  /** Format: uuid */
  "rowFilter.join_relative_health_conditions.condition_id": string;
  /** Format: uuid */
  "rowFilter.join_relative_health_conditions.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_relative_health_conditions.updated_by": string;
  /** @description base_proposals */
  "body.base_proposals": definitions["base_proposals"];
  /** Format: uuid */
  "rowFilter.base_proposals.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_proposals.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_proposals.updated_at": string;
  /** Format: uuid */
  "rowFilter.base_proposals.created_by": string;
  /** Format: text */
  "rowFilter.base_proposals.notes": string;
  /** Format: uuid */
  "rowFilter.base_proposals.owner_id": string;
  /** Format: text */
  "rowFilter.base_proposals.title": string;
  /** Format: text */
  "rowFilter.base_proposals.type": string;
  /** Format: uuid */
  "rowFilter.base_proposals.updated_by": string;
  /** @description request_vacations */
  "body.request_vacations": definitions["request_vacations"];
  /** Format: uuid */
  "rowFilter.request_vacations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_vacations.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_vacations.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_vacations.created_by": string;
  /** Format: text */
  "rowFilter.request_vacations.notes": string;
  /** Format: uuid */
  "rowFilter.request_vacations.owner_id": string;
  /** Format: text */
  "rowFilter.request_vacations.title": string;
  /** Format: text */
  "rowFilter.request_vacations.type": string;
  /** Format: uuid */
  "rowFilter.request_vacations.updated_by": string;
  /** Format: text */
  "rowFilter.request_vacations.status": string;
  /** Format: date */
  "rowFilter.request_vacations.from": string;
  /** Format: date */
  "rowFilter.request_vacations.to": string;
  /** Format: uuid */
  "rowFilter.request_vacations.vacation_type_id": string;
  /** @description group_invites */
  "body.group_invites": definitions["group_invites"];
  /** Format: uuid */
  "rowFilter.group_invites.id": string;
  /** Format: uuid */
  "rowFilter.group_invites.group_id": string;
  /** Format: text[] */
  "rowFilter.group_invites.roles": string;
  /** Format: uuid */
  "rowFilter.group_invites.invited_by": string;
  /** Format: timestamp with time zone */
  "rowFilter.group_invites.created_at": string;
  /** Format: uuid */
  "rowFilter.group_invites.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.group_invites.accepted_at": string;
  /** @description request_work_hours_changes */
  "body.request_work_hours_changes": definitions["request_work_hours_changes"];
  /** Format: uuid */
  "rowFilter.request_work_hours_changes.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_work_hours_changes.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_work_hours_changes.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_work_hours_changes.created_by": string;
  /** Format: text */
  "rowFilter.request_work_hours_changes.notes": string;
  /** Format: uuid */
  "rowFilter.request_work_hours_changes.owner_id": string;
  /** Format: text */
  "rowFilter.request_work_hours_changes.title": string;
  /** Format: text */
  "rowFilter.request_work_hours_changes.type": string;
  /** Format: uuid */
  "rowFilter.request_work_hours_changes.updated_by": string;
  /** Format: text */
  "rowFilter.request_work_hours_changes.status": string;
  /** Format: uuid */
  "rowFilter.request_work_hours_changes.new_work_hours_id": string;
  /** @description product_type_attributes */
  "body.product_type_attributes": definitions["product_type_attributes"];
  /** Format: uuid */
  "rowFilter.product_type_attributes.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_type_attributes.created_at": string;
  /** Format: uuid */
  "rowFilter.product_type_attributes.created_by": string;
  /** Format: uuid */
  "rowFilter.product_type_attributes.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_type_attributes.updated_at": string;
  /** Format: text */
  "rowFilter.product_type_attributes.description": string;
  /** Format: uuid */
  "rowFilter.product_type_attributes.product_type_id": string;
  /** Format: text */
  "rowFilter.product_type_attributes.name": string;
  /** Format: uuid */
  "rowFilter.product_type_attributes.updated_by": string;
  /** @description policies */
  "body.policies": definitions["policies"];
  /** Format: uuid */
  "rowFilter.policies.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.policies.created_at": string;
  /** Format: uuid */
  "rowFilter.policies.created_by": string;
  /** Format: uuid */
  "rowFilter.policies.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.policies.updated_at": string;
  /** Format: numeric */
  "rowFilter.policies.sick_vacation": string;
  /** Format: numeric */
  "rowFilter.policies.annual_vacation": string;
  /** Format: numeric */
  "rowFilter.policies.parental_vacation": string;
  /** Format: numeric */
  "rowFilter.policies.maternal_vacation": string;
  /** Format: numeric */
  "rowFilter.policies.death_vacation": string;
  /** Format: numeric */
  "rowFilter.policies.marriage_vacation": string;
  /** Format: uuid */
  "rowFilter.policies.work_hours_id": string;
  /** Format: text */
  "rowFilter.policies.work_days": string;
  /** Format: text */
  "rowFilter.policies.transportation": string;
  /** Format: text */
  "rowFilter.policies.nda": string;
  /** Format: text */
  "rowFilter.policies.benefits": string;
  /** Format: uuid */
  "rowFilter.policies.updated_by": string;
  /** @description request_payroll_deductions_cancels */
  "body.request_payroll_deductions_cancels": definitions["request_payroll_deductions_cancels"];
  /** Format: uuid */
  "rowFilter.request_payroll_deductions_cancels.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_payroll_deductions_cancels.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_payroll_deductions_cancels.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_payroll_deductions_cancels.created_by": string;
  /** Format: text */
  "rowFilter.request_payroll_deductions_cancels.notes": string;
  /** Format: uuid */
  "rowFilter.request_payroll_deductions_cancels.owner_id": string;
  /** Format: text */
  "rowFilter.request_payroll_deductions_cancels.title": string;
  /** Format: text */
  "rowFilter.request_payroll_deductions_cancels.type": string;
  /** Format: uuid */
  "rowFilter.request_payroll_deductions_cancels.updated_by": string;
  /** Format: text */
  "rowFilter.request_payroll_deductions_cancels.status": string;
  /** Format: text */
  "rowFilter.request_payroll_deductions_cancels.reason": string;
  /** Format: uuid */
  "rowFilter.request_payroll_deductions_cancels.deduction_id": string;
  /** @description res_countries */
  "body.res_countries": definitions["res_countries"];
  /** Format: text */
  "rowFilter.res_countries.name": string;
  /** Format: text */
  "rowFilter.res_countries.iso2": string;
  /** Format: text */
  "rowFilter.res_countries.iso3": string;
  /** Format: text */
  "rowFilter.res_countries.local_name": string;
  /** Format: uuid */
  "rowFilter.res_countries.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.res_countries.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.res_countries.created_at": string;
  /** Format: text */
  "rowFilter.res_countries.nationality": string;
  /** Format: uuid */
  "rowFilter.res_countries.currency_id": string;
  /** Format: uuid */
  "rowFilter.res_countries.updated_by": string;
  /** @description request_installments */
  "body.request_installments": definitions["request_installments"];
  /** Format: uuid */
  "rowFilter.request_installments.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_installments.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_installments.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_installments.created_by": string;
  /** Format: text */
  "rowFilter.request_installments.notes": string;
  /** Format: uuid */
  "rowFilter.request_installments.owner_id": string;
  /** Format: text */
  "rowFilter.request_installments.title": string;
  /** Format: text */
  "rowFilter.request_installments.type": string;
  /** Format: uuid */
  "rowFilter.request_installments.updated_by": string;
  /** Format: text */
  "rowFilter.request_installments.status": string;
  /** Format: numeric */
  "rowFilter.request_installments.amount": string;
  /** Format: date */
  "rowFilter.request_installments.from": string;
  /** Format: date */
  "rowFilter.request_installments.to": string;
  /** Format: numeric */
  "rowFilter.request_installments.installment": string;
  /** Format: uuid */
  "rowFilter.request_installments.installment_type_id": string;
  /** Format: uuid */
  "rowFilter.request_installments.bank_account_id": string;
  /** @description request_insurance_raises */
  "body.request_insurance_raises": definitions["request_insurance_raises"];
  /** Format: uuid */
  "rowFilter.request_insurance_raises.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_raises.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_raises.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_insurance_raises.created_by": string;
  /** Format: text */
  "rowFilter.request_insurance_raises.notes": string;
  /** Format: uuid */
  "rowFilter.request_insurance_raises.owner_id": string;
  /** Format: text */
  "rowFilter.request_insurance_raises.title": string;
  /** Format: text */
  "rowFilter.request_insurance_raises.type": string;
  /** Format: uuid */
  "rowFilter.request_insurance_raises.updated_by": string;
  /** Format: text */
  "rowFilter.request_insurance_raises.status": string;
  /** Format: uuid */
  "rowFilter.request_insurance_raises.new_plan_id": string;
  /** Format: uuid */
  "rowFilter.request_insurance_raises.old_plan_id": string;
  /** @description healthcare_service_providers */
  "body.healthcare_service_providers": definitions["healthcare_service_providers"];
  /** Format: uuid */
  "rowFilter.healthcare_service_providers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.healthcare_service_providers.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.healthcare_service_providers.updated_at": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.employee_name": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.phone": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.email": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.website": string;
  /** Format: uuid */
  "rowFilter.healthcare_service_providers.updated_by": string;
  /** Format: uuid */
  "rowFilter.healthcare_service_providers.owner_id": string;
  /** Format: uuid */
  "rowFilter.healthcare_service_providers.country_id": string;
  /** Format: uuid */
  "rowFilter.healthcare_service_providers.city_id": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.street": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.building": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.landmark": string;
  /** Format: jsonb */
  "rowFilter.healthcare_service_providers.gps": string;
  /** Format: uuid */
  "rowFilter.healthcare_service_providers.created_by": string;
  /** Format: text */
  "rowFilter.healthcare_service_providers.name": string;
  /** Format: public.healthcare_service_types */
  "rowFilter.healthcare_service_providers.service_type": string;
  /** Format: public.healthcare_provider_types */
  "rowFilter.healthcare_service_providers.service_provider_type": string;
  /** @description request_insurance_financial_returns */
  "body.request_insurance_financial_returns": definitions["request_insurance_financial_returns"];
  /** Format: uuid */
  "rowFilter.request_insurance_financial_returns.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_financial_returns.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_insurance_financial_returns.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_insurance_financial_returns.created_by": string;
  /** Format: text */
  "rowFilter.request_insurance_financial_returns.notes": string;
  /** Format: uuid */
  "rowFilter.request_insurance_financial_returns.owner_id": string;
  /** Format: text */
  "rowFilter.request_insurance_financial_returns.title": string;
  /** Format: text */
  "rowFilter.request_insurance_financial_returns.type": string;
  /** Format: uuid */
  "rowFilter.request_insurance_financial_returns.updated_by": string;
  /** Format: text */
  "rowFilter.request_insurance_financial_returns.status": string;
  /** Format: date */
  "rowFilter.request_insurance_financial_returns.date_of_service": string;
  /** Format: numeric */
  "rowFilter.request_insurance_financial_returns.amount": string;
  /** Format: uuid */
  "rowFilter.request_insurance_financial_returns.bank_account_id": string;
  /** @description expenses */
  "body.expenses": definitions["expenses"];
  /** Format: uuid */
  "rowFilter.expenses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.expenses.created_at": string;
  /** Format: uuid */
  "rowFilter.expenses.created_by": string;
  /** Format: uuid */
  "rowFilter.expenses.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.expenses.updated_at": string;
  /** Format: text */
  "rowFilter.expenses.title": string;
  /** Format: numeric */
  "rowFilter.expenses.amount": string;
  /** Format: uuid */
  "rowFilter.expenses.request_expense_id": string;
  /** Format: uuid */
  "rowFilter.expenses.expense_type_id": string;
  /** Format: uuid */
  "rowFilter.expenses.updated_by": string;
  /** @description status_histories */
  "body.status_histories": definitions["status_histories"];
  /** Format: uuid */
  "rowFilter.status_histories.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.status_histories.created_at": string;
  /** Format: uuid */
  "rowFilter.status_histories.created_by": string;
  /** Format: uuid */
  "rowFilter.status_histories.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.status_histories.updated_at": string;
  /** Format: text */
  "rowFilter.status_histories.old_status": string;
  /** Format: text */
  "rowFilter.status_histories.new_status": string;
  /** Format: uuid */
  "rowFilter.status_histories.request_uuid": string;
  /** Format: text */
  "rowFilter.status_histories.message": string;
  /** Format: uuid */
  "rowFilter.status_histories.updated_by": string;
  /** Format: text */
  "rowFilter.status_histories.request_type": string;
  /** @description request_advances */
  "body.request_advances": definitions["request_advances"];
  /** Format: uuid */
  "rowFilter.request_advances.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_advances.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_advances.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_advances.created_by": string;
  /** Format: text */
  "rowFilter.request_advances.notes": string;
  /** Format: uuid */
  "rowFilter.request_advances.owner_id": string;
  /** Format: text */
  "rowFilter.request_advances.title": string;
  /** Format: text */
  "rowFilter.request_advances.type": string;
  /** Format: uuid */
  "rowFilter.request_advances.updated_by": string;
  /** Format: text */
  "rowFilter.request_advances.status": string;
  /** Format: date */
  "rowFilter.request_advances.date_of_payment": string;
  /** Format: numeric */
  "rowFilter.request_advances.installments": string;
  /** Format: numeric */
  "rowFilter.request_advances.amount": string;
  /** Format: date */
  "rowFilter.request_advances.date_of_receipt": string;
  /** Format: uuid */
  "rowFilter.request_advances.advance_type_id": string;
  /** Format: numeric */
  "rowFilter.request_advances.number_of_installments": string;
  /** Format: uuid */
  "rowFilter.request_advances.bank_account_id": string;
  /** @description join_ship_line_ports */
  "body.join_ship_line_ports": definitions["join_ship_line_ports"];
  /** Format: timestamp with time zone */
  "rowFilter.join_ship_line_ports.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_ship_line_ports.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_ship_line_ports.created_by": string;
  /** Format: uuid */
  "rowFilter.join_ship_line_ports.ship_line_id": string;
  /** Format: uuid */
  "rowFilter.join_ship_line_ports.port_id": string;
  /** Format: uuid */
  "rowFilter.join_ship_line_ports.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_ship_line_ports.updated_by": string;
  /** @description addresses */
  "body.addresses": definitions["addresses"];
  /** Format: uuid */
  "rowFilter.addresses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.addresses.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.addresses.updated_at": string;
  /** Format: uuid */
  "rowFilter.addresses.country_id": string;
  /** Format: uuid */
  "rowFilter.addresses.city_id": string;
  /** Format: text */
  "rowFilter.addresses.street": string;
  /** Format: text */
  "rowFilter.addresses.building": string;
  /** Format: text */
  "rowFilter.addresses.landmark": string;
  /** Format: uuid */
  "rowFilter.addresses.owner_id": string;
  /** Format: jsonb */
  "rowFilter.addresses.gps": string;
  /** @description job_titles */
  "body.job_titles": definitions["job_titles"];
  /** Format: uuid */
  "rowFilter.job_titles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.job_titles.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.job_titles.updated_at": string;
  /** Format: uuid */
  "rowFilter.job_titles.created_by": string;
  /** Format: uuid */
  "rowFilter.job_titles.owner_id": string;
  /** Format: uuid */
  "rowFilter.job_titles.updated_by": string;
  /** Format: jsonb */
  "rowFilter.job_titles.name": string;
  /** @description request_training_additions */
  "body.request_training_additions": definitions["request_training_additions"];
  /** Format: uuid */
  "rowFilter.request_training_additions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_training_additions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_training_additions.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_training_additions.created_by": string;
  /** Format: text */
  "rowFilter.request_training_additions.notes": string;
  /** Format: uuid */
  "rowFilter.request_training_additions.owner_id": string;
  /** Format: text */
  "rowFilter.request_training_additions.title": string;
  /** Format: text */
  "rowFilter.request_training_additions.type": string;
  /** Format: uuid */
  "rowFilter.request_training_additions.updated_by": string;
  /** Format: text */
  "rowFilter.request_training_additions.status": string;
  /** Format: text */
  "rowFilter.request_training_additions.reason": string;
  /** Format: date */
  "rowFilter.request_training_additions.from": string;
  /** Format: date */
  "rowFilter.request_training_additions.to": string;
  /** Format: uuid */
  "rowFilter.request_training_additions.training_type_id": string;
  /** Format: text */
  "rowFilter.request_training_additions.training_location": string;
  /** @description employee_reports */
  "body.employee_reports": definitions["employee_reports"];
  /** Format: uuid */
  "rowFilter.employee_reports.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.employee_reports.created_at": string;
  /** Format: uuid */
  "rowFilter.employee_reports.created_by": string;
  /** Format: uuid */
  "rowFilter.employee_reports.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.employee_reports.updated_at": string;
  /** Format: jsonb */
  "rowFilter.employee_reports.answers": string;
  /** Format: uuid */
  "rowFilter.employee_reports.employee_id": string;
  /** Format: date */
  "rowFilter.employee_reports.quarter": string;
  /** Format: uuid */
  "rowFilter.employee_reports.updated_by": string;
  /** @description relatives */
  "body.relatives": definitions["relatives"];
  /** Format: uuid */
  "rowFilter.relatives.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.relatives.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.relatives.updated_at": string;
  /** Format: uuid */
  "rowFilter.relatives.created_by": string;
  /** Format: text */
  "rowFilter.relatives.name": string;
  /** Format: date */
  "rowFilter.relatives.date_of_birth": string;
  /** Format: uuid */
  "rowFilter.relatives.owner_id": string;
  /** Format: text */
  "rowFilter.relatives.type": string;
  /** Format: uuid */
  "rowFilter.relatives.updated_by": string;
  /** Format: uuid */
  "rowFilter.relatives.employee_id": string;
  /** Format: public.genders */
  "rowFilter.relatives.gender": string;
  /** Format: uuid */
  "rowFilter.relatives.relation_types_id": string;
  /** @description roles */
  "body.roles": definitions["roles"];
  /** Format: uuid */
  "rowFilter.roles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.roles.created_at": string;
  /** Format: uuid */
  "rowFilter.roles.created_by": string;
  /** Format: uuid */
  "rowFilter.roles.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.roles.updated_at": string;
  /** Format: text */
  "rowFilter.roles.name": string;
  /** Format: jsonb */
  "rowFilter.roles.permissions": string;
  /** Format: text */
  "rowFilter.roles.description": string;
  /** Format: uuid */
  "rowFilter.roles.updated_by": string;
  /** Format: integer */
  "rowFilter.roles.level": string;
  /** @description request_training_bonuses */
  "body.request_training_bonuses": definitions["request_training_bonuses"];
  /** Format: uuid */
  "rowFilter.request_training_bonuses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_training_bonuses.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_training_bonuses.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_training_bonuses.created_by": string;
  /** Format: text */
  "rowFilter.request_training_bonuses.notes": string;
  /** Format: uuid */
  "rowFilter.request_training_bonuses.owner_id": string;
  /** Format: text */
  "rowFilter.request_training_bonuses.title": string;
  /** Format: text */
  "rowFilter.request_training_bonuses.type": string;
  /** Format: uuid */
  "rowFilter.request_training_bonuses.updated_by": string;
  /** Format: text */
  "rowFilter.request_training_bonuses.status": string;
  /** Format: uuid */
  "rowFilter.request_training_bonuses.training_id": string;
  /** @description join_employee_health_conditions */
  "body.join_employee_health_conditions": definitions["join_employee_health_conditions"];
  /** Format: timestamp with time zone */
  "rowFilter.join_employee_health_conditions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_employee_health_conditions.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_employee_health_conditions.employee_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_health_conditions.condition_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_health_conditions.created_by": string;
  /** Format: uuid */
  "rowFilter.join_employee_health_conditions.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_employee_health_conditions.updated_by": string;
  /** @description visas */
  "body.visas": definitions["visas"];
  /** Format: uuid */
  "rowFilter.visas.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.visas.created_at": string;
  /** Format: uuid */
  "rowFilter.visas.created_by": string;
  /** Format: uuid */
  "rowFilter.visas.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.visas.updated_at": string;
  /** Format: date */
  "rowFilter.visas.from": string;
  /** Format: date */
  "rowFilter.visas.to": string;
  /** Format: text */
  "rowFilter.visas.id_number": string;
  /** Format: uuid */
  "rowFilter.visas.employee_id": string;
  /** Format: uuid */
  "rowFilter.visas.visa_type_id": string;
  /** Format: uuid */
  "rowFilter.visas.updated_by": string;
  /** Format: uuid */
  "rowFilter.visas.country_of_issue_id": string;
  /** @description work_hours */
  "body.work_hours": definitions["work_hours"];
  /** Format: uuid */
  "rowFilter.work_hours.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.work_hours.created_at": string;
  /** Format: uuid */
  "rowFilter.work_hours.created_by": string;
  /** Format: uuid */
  "rowFilter.work_hours.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.work_hours.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.work_hours.from": string;
  /** Format: timestamp with time zone */
  "rowFilter.work_hours.to": string;
  /** Format: uuid */
  "rowFilter.work_hours.updated_by": string;
  /** @description product_categories */
  "body.product_categories": definitions["product_categories"];
  /** Format: uuid */
  "rowFilter.product_categories.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_categories.created_at": string;
  /** Format: uuid */
  "rowFilter.product_categories.created_by": string;
  /** Format: uuid */
  "rowFilter.product_categories.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_categories.updated_at": string;
  /** Format: text */
  "rowFilter.product_categories.name": string;
  /** Format: uuid */
  "rowFilter.product_categories.updated_by": string;
  /** @description passports */
  "body.passports": definitions["passports"];
  /** Format: uuid */
  "rowFilter.passports.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.passports.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.passports.updated_at": string;
  /** Format: uuid */
  "rowFilter.passports.created_by": string;
  /** Format: date */
  "rowFilter.passports.date_of_expiry": string;
  /** Format: date */
  "rowFilter.passports.date_of_issue": string;
  /** Format: text */
  "rowFilter.passports.job_title": string;
  /** Format: uuid */
  "rowFilter.passports.owner_id": string;
  /** Format: uuid */
  "rowFilter.passports.employee_id": string;
  /** Format: uuid */
  "rowFilter.passports.place_of_issue_id": string;
  /** Format: uuid */
  "rowFilter.passports.updated_by": string;
  /** @description identification_cards */
  "body.identification_cards": definitions["identification_cards"];
  /** Format: uuid */
  "rowFilter.identification_cards.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.identification_cards.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.identification_cards.updated_at": string;
  /** Format: uuid */
  "rowFilter.identification_cards.created_by": string;
  /** Format: text */
  "rowFilter.identification_cards.id_number": string;
  /** Format: date */
  "rowFilter.identification_cards.date_of_issue": string;
  /** Format: text */
  "rowFilter.identification_cards.job_title": string;
  /** Format: uuid */
  "rowFilter.identification_cards.front_image_id": string;
  /** Format: uuid */
  "rowFilter.identification_cards.owner_id": string;
  /** Format: uuid */
  "rowFilter.identification_cards.employee_id": string;
  /** Format: uuid */
  "rowFilter.identification_cards.back_image_id": string;
  /** Format: date */
  "rowFilter.identification_cards.date_of_expiry": string;
  /** Format: uuid */
  "rowFilter.identification_cards.place_of_issue_id": string;
  /** Format: uuid */
  "rowFilter.identification_cards.updated_by": string;
  /** @description contact_information */
  "body.contact_information": definitions["contact_information"];
  /** Format: uuid */
  "rowFilter.contact_information.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.contact_information.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.contact_information.updated_at": string;
  /** Format: text */
  "rowFilter.contact_information.employee_name": string;
  /** Format: text */
  "rowFilter.contact_information.phone": string;
  /** Format: text */
  "rowFilter.contact_information.email": string;
  /** Format: text */
  "rowFilter.contact_information.website": string;
  /** Format: uuid */
  "rowFilter.contact_information.updated_by": string;
  /** Format: uuid */
  "rowFilter.contact_information.owner_id": string;
  /** @description bank_accounts */
  "body.bank_accounts": definitions["bank_accounts"];
  /** Format: uuid */
  "rowFilter.bank_accounts.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.bank_accounts.created_at": string;
  /** Format: uuid */
  "rowFilter.bank_accounts.created_by": string;
  /** Format: uuid */
  "rowFilter.bank_accounts.owner_id": string;
  /** Format: text */
  "rowFilter.bank_accounts.iban": string;
  /** Format: timestamp with time zone */
  "rowFilter.bank_accounts.updated_at": string;
  /** Format: uuid */
  "rowFilter.bank_accounts.bank_id": string;
  /** Format: uuid */
  "rowFilter.bank_accounts.employee_id": string;
  /** Format: uuid */
  "rowFilter.bank_accounts.updated_by": string;
  /** @description compensations */
  "body.compensations": definitions["compensations"];
  /** Format: uuid */
  "rowFilter.compensations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.compensations.created_at": string;
  /** Format: uuid */
  "rowFilter.compensations.created_by": string;
  /** Format: uuid */
  "rowFilter.compensations.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.compensations.updated_at": string;
  /** Format: text */
  "rowFilter.compensations.name": string;
  /** Format: uuid */
  "rowFilter.compensations.updated_by": string;
  /** @description insurance_offers */
  "body.insurance_offers": definitions["insurance_offers"];
  /** Format: uuid */
  "rowFilter.insurance_offers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_offers.created_at": string;
  /** Format: uuid */
  "rowFilter.insurance_offers.created_by": string;
  /** Format: uuid */
  "rowFilter.insurance_offers.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.insurance_offers.updated_at": string;
  /** Format: text */
  "rowFilter.insurance_offers.name": string;
  /** Format: uuid */
  "rowFilter.insurance_offers.insurance_company_id": string;
  /** Format: text */
  "rowFilter.insurance_offers.notes": string;
  /** Format: uuid */
  "rowFilter.insurance_offers.updated_by": string;
  /** @description kids */
  "body.kids": definitions["kids"];
  /** Format: uuid */
  "rowFilter.kids.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.kids.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.kids.updated_at": string;
  /** Format: uuid */
  "rowFilter.kids.created_by": string;
  /** Format: text */
  "rowFilter.kids.name": string;
  /** Format: date */
  "rowFilter.kids.date_of_birth": string;
  /** Format: uuid */
  "rowFilter.kids.owner_id": string;
  /** Format: text */
  "rowFilter.kids.type": string;
  /** Format: uuid */
  "rowFilter.kids.updated_by": string;
  /** Format: public.genders */
  "rowFilter.kids.gender": string;
  /** @description join_shipping_company_countries */
  "body.join_shipping_company_countries": definitions["join_shipping_company_countries"];
  /** Format: timestamp with time zone */
  "rowFilter.join_shipping_company_countries.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_shipping_company_countries.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_shipping_company_countries.created_by": string;
  /** Format: uuid */
  "rowFilter.join_shipping_company_countries.shipping_company_id": string;
  /** Format: uuid */
  "rowFilter.join_shipping_company_countries.res_country_id": string;
  /** Format: uuid */
  "rowFilter.join_shipping_company_countries.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_shipping_company_countries.updated_by": string;
  /** @description request_settlements */
  "body.request_settlements": definitions["request_settlements"];
  /** Format: uuid */
  "rowFilter.request_settlements.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_settlements.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_settlements.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_settlements.created_by": string;
  /** Format: text */
  "rowFilter.request_settlements.notes": string;
  /** Format: uuid */
  "rowFilter.request_settlements.owner_id": string;
  /** Format: text */
  "rowFilter.request_settlements.title": string;
  /** Format: text */
  "rowFilter.request_settlements.type": string;
  /** Format: uuid */
  "rowFilter.request_settlements.updated_by": string;
  /** Format: text */
  "rowFilter.request_settlements.status": string;
  /** Format: numeric */
  "rowFilter.request_settlements.amount": string;
  /** Format: uuid */
  "rowFilter.request_settlements.settlement_type_id": string;
  /** Format: date */
  "rowFilter.request_settlements.date_of_settlement": string;
  /** @description request_punctuality_changes */
  "body.request_punctuality_changes": definitions["request_punctuality_changes"];
  /** Format: uuid */
  "rowFilter.request_punctuality_changes.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_punctuality_changes.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.request_punctuality_changes.updated_at": string;
  /** Format: uuid */
  "rowFilter.request_punctuality_changes.created_by": string;
  /** Format: text */
  "rowFilter.request_punctuality_changes.notes": string;
  /** Format: uuid */
  "rowFilter.request_punctuality_changes.owner_id": string;
  /** Format: text */
  "rowFilter.request_punctuality_changes.title": string;
  /** Format: text */
  "rowFilter.request_punctuality_changes.type": string;
  /** Format: uuid */
  "rowFilter.request_punctuality_changes.updated_by": string;
  /** Format: text */
  "rowFilter.request_punctuality_changes.status": string;
  /** Format: uuid */
  "rowFilter.request_punctuality_changes.advances_id": string;
  /** Format: uuid */
  "rowFilter.request_punctuality_changes.punctuality_type_id": string;
  /** Format: date */
  "rowFilter.request_punctuality_changes.date_of_old_punctuality": string;
  /** Format: date */
  "rowFilter.request_punctuality_changes.date_of_new_punctuality": string;
  /** @description join_request_documents */
  "body.join_request_documents": definitions["join_request_documents"];
  /** Format: timestamp with time zone */
  "rowFilter.join_request_documents.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.join_request_documents.updated_at": string;
  /** Format: uuid */
  "rowFilter.join_request_documents.created_by": string;
  /** Format: uuid */
  "rowFilter.join_request_documents.request_id": string;
  /** Format: uuid */
  "rowFilter.join_request_documents.image_id": string;
  /** Format: uuid */
  "rowFilter.join_request_documents.owner_id": string;
  /** Format: uuid */
  "rowFilter.join_request_documents.updated_by": string;
  /** @description vacations */
  "body.vacations": definitions["vacations"];
  /** Format: uuid */
  "rowFilter.vacations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.vacations.created_at": string;
  /** Format: uuid */
  "rowFilter.vacations.created_by": string;
  /** Format: uuid */
  "rowFilter.vacations.owner_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.vacations.updated_at": string;
  /** Format: date */
  "rowFilter.vacations.from": string;
  /** Format: date */
  "rowFilter.vacations.to": string;
  /** Format: uuid */
  "rowFilter.vacations.employee_id": string;
  /** Format: text */
  "rowFilter.vacations.name": string;
  /** Format: uuid */
  "rowFilter.vacations.request_vacation_id": string;
  /** Format: uuid */
  "rowFilter.vacations.vacation_type_id": string;
  /** Format: uuid */
  "rowFilter.vacations.updated_by": string;
  /** @description base_requests */
  "body.base_requests": definitions["base_requests"];
  /** Format: uuid */
  "rowFilter.base_requests.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_requests.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.base_requests.updated_at": string;
  /** Format: uuid */
  "rowFilter.base_requests.created_by": string;
  /** Format: text */
  "rowFilter.base_requests.notes": string;
  /** Format: uuid */
  "rowFilter.base_requests.owner_id": string;
  /** Format: text */
  "rowFilter.base_requests.title": string;
  /** Format: text */
  "rowFilter.base_requests.type": string;
  /** Format: uuid */
  "rowFilter.base_requests.updated_by": string;
  /** Format: text */
  "rowFilter.base_requests.status": string;
}

export interface operations {}

export interface external {}
